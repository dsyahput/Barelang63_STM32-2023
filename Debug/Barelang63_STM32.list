
Barelang63_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f658  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  0800f7e0  0800f7e0  0001f7e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe40  0800fe40  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe40  0800fe40  0001fe40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe48  0800fe48  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800fe48  0800fe48  0001fe48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800fe54  0800fe54  0001fe54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800fe5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00002218  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200023fc  200023fc  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e019  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000057c5  00000000  00000000  0004e22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  000539f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018a0  00000000  00000000  00055470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b54e  00000000  00000000  00056d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f98d  00000000  00000000  0008225e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6ae7  00000000  00000000  000a1beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001886d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007b00  00000000  00000000  00188728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800f7c8 	.word	0x0800f7c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	0800f7c8 	.word	0x0800f7c8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 b96e 	b.w	8000e84 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468c      	mov	ip, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	f040 8083 	bne.w	8000cd6 <__udivmoddi4+0x116>
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	4617      	mov	r7, r2
 8000bd4:	d947      	bls.n	8000c66 <__udivmoddi4+0xa6>
 8000bd6:	fab2 f282 	clz	r2, r2
 8000bda:	b142      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bdc:	f1c2 0020 	rsb	r0, r2, #32
 8000be0:	fa24 f000 	lsr.w	r0, r4, r0
 8000be4:	4091      	lsls	r1, r2
 8000be6:	4097      	lsls	r7, r2
 8000be8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bec:	4094      	lsls	r4, r2
 8000bee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bf2:	0c23      	lsrs	r3, r4, #16
 8000bf4:	fbbc f6f8 	udiv	r6, ip, r8
 8000bf8:	fa1f fe87 	uxth.w	lr, r7
 8000bfc:	fb08 c116 	mls	r1, r8, r6, ip
 8000c00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c04:	fb06 f10e 	mul.w	r1, r6, lr
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d909      	bls.n	8000c20 <__udivmoddi4+0x60>
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c12:	f080 8119 	bcs.w	8000e48 <__udivmoddi4+0x288>
 8000c16:	4299      	cmp	r1, r3
 8000c18:	f240 8116 	bls.w	8000e48 <__udivmoddi4+0x288>
 8000c1c:	3e02      	subs	r6, #2
 8000c1e:	443b      	add	r3, r7
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c28:	fb08 3310 	mls	r3, r8, r0, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c34:	45a6      	cmp	lr, r4
 8000c36:	d909      	bls.n	8000c4c <__udivmoddi4+0x8c>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c3e:	f080 8105 	bcs.w	8000e4c <__udivmoddi4+0x28c>
 8000c42:	45a6      	cmp	lr, r4
 8000c44:	f240 8102 	bls.w	8000e4c <__udivmoddi4+0x28c>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	443c      	add	r4, r7
 8000c4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c50:	eba4 040e 	sub.w	r4, r4, lr
 8000c54:	2600      	movs	r6, #0
 8000c56:	b11d      	cbz	r5, 8000c60 <__udivmoddi4+0xa0>
 8000c58:	40d4      	lsrs	r4, r2
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xaa>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f282 	clz	r2, r2
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d150      	bne.n	8000d14 <__udivmoddi4+0x154>
 8000c72:	1bcb      	subs	r3, r1, r7
 8000c74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c78:	fa1f f887 	uxth.w	r8, r7
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c82:	0c21      	lsrs	r1, r4, #16
 8000c84:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d907      	bls.n	8000ca4 <__udivmoddi4+0xe4>
 8000c94:	1879      	adds	r1, r7, r1
 8000c96:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0xe2>
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	f200 80e9 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	1ac9      	subs	r1, r1, r3
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cac:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cb4:	fb08 f800 	mul.w	r8, r8, r0
 8000cb8:	45a0      	cmp	r8, r4
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x10c>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x10a>
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	f200 80d9 	bhi.w	8000e7c <__udivmoddi4+0x2bc>
 8000cca:	4618      	mov	r0, r3
 8000ccc:	eba4 0408 	sub.w	r4, r4, r8
 8000cd0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd4:	e7bf      	b.n	8000c56 <__udivmoddi4+0x96>
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x12e>
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	f000 80b1 	beq.w	8000e42 <__udivmoddi4+0x282>
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	4631      	mov	r1, r6
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	fab3 f683 	clz	r6, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d14a      	bne.n	8000d8c <__udivmoddi4+0x1cc>
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0x140>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 80b8 	bhi.w	8000e70 <__udivmoddi4+0x2b0>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb61 0103 	sbc.w	r1, r1, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	468c      	mov	ip, r1
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0a8      	beq.n	8000c60 <__udivmoddi4+0xa0>
 8000d0e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d12:	e7a5      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000d14:	f1c2 0320 	rsb	r3, r2, #32
 8000d18:	fa20 f603 	lsr.w	r6, r0, r3
 8000d1c:	4097      	lsls	r7, r2
 8000d1e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d26:	40d9      	lsrs	r1, r3
 8000d28:	4330      	orrs	r0, r6
 8000d2a:	0c03      	lsrs	r3, r0, #16
 8000d2c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3c:	fb06 f108 	mul.w	r1, r6, r8
 8000d40:	4299      	cmp	r1, r3
 8000d42:	fa04 f402 	lsl.w	r4, r4, r2
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x19c>
 8000d48:	18fb      	adds	r3, r7, r3
 8000d4a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 808d 	bcs.w	8000e6c <__udivmoddi4+0x2ac>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 808a 	bls.w	8000e6c <__udivmoddi4+0x2ac>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	443b      	add	r3, r7
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b281      	uxth	r1, r0
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb00 f308 	mul.w	r3, r0, r8
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x1c4>
 8000d74:	1879      	adds	r1, r7, r1
 8000d76:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d7a:	d273      	bcs.n	8000e64 <__udivmoddi4+0x2a4>
 8000d7c:	428b      	cmp	r3, r1
 8000d7e:	d971      	bls.n	8000e64 <__udivmoddi4+0x2a4>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4439      	add	r1, r7
 8000d84:	1acb      	subs	r3, r1, r3
 8000d86:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d8a:	e778      	b.n	8000c7e <__udivmoddi4+0xbe>
 8000d8c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d90:	fa03 f406 	lsl.w	r4, r3, r6
 8000d94:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d9e:	fa01 f306 	lsl.w	r3, r1, r6
 8000da2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000da6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000daa:	431f      	orrs	r7, r3
 8000dac:	0c3b      	lsrs	r3, r7, #16
 8000dae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db2:	fa1f f884 	uxth.w	r8, r4
 8000db6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dbe:	fb09 fa08 	mul.w	sl, r9, r8
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x220>
 8000dce:	1861      	adds	r1, r4, r1
 8000dd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dd4:	d248      	bcs.n	8000e68 <__udivmoddi4+0x2a8>
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	d946      	bls.n	8000e68 <__udivmoddi4+0x2a8>
 8000dda:	f1a9 0902 	sub.w	r9, r9, #2
 8000dde:	4421      	add	r1, r4
 8000de0:	eba1 010a 	sub.w	r1, r1, sl
 8000de4:	b2bf      	uxth	r7, r7
 8000de6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dea:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000df2:	fb00 f808 	mul.w	r8, r0, r8
 8000df6:	45b8      	cmp	r8, r7
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x24a>
 8000dfa:	19e7      	adds	r7, r4, r7
 8000dfc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e00:	d22e      	bcs.n	8000e60 <__udivmoddi4+0x2a0>
 8000e02:	45b8      	cmp	r8, r7
 8000e04:	d92c      	bls.n	8000e60 <__udivmoddi4+0x2a0>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4427      	add	r7, r4
 8000e0a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0e:	eba7 0708 	sub.w	r7, r7, r8
 8000e12:	fba0 8902 	umull	r8, r9, r0, r2
 8000e16:	454f      	cmp	r7, r9
 8000e18:	46c6      	mov	lr, r8
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	d31a      	bcc.n	8000e54 <__udivmoddi4+0x294>
 8000e1e:	d017      	beq.n	8000e50 <__udivmoddi4+0x290>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x27a>
 8000e22:	ebb3 020e 	subs.w	r2, r3, lr
 8000e26:	eb67 0701 	sbc.w	r7, r7, r1
 8000e2a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e2e:	40f2      	lsrs	r2, r6
 8000e30:	ea4c 0202 	orr.w	r2, ip, r2
 8000e34:	40f7      	lsrs	r7, r6
 8000e36:	e9c5 2700 	strd	r2, r7, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e70b      	b.n	8000c60 <__udivmoddi4+0xa0>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e9      	b.n	8000c20 <__udivmoddi4+0x60>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6fd      	b.n	8000c4c <__udivmoddi4+0x8c>
 8000e50:	4543      	cmp	r3, r8
 8000e52:	d2e5      	bcs.n	8000e20 <__udivmoddi4+0x260>
 8000e54:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e58:	eb69 0104 	sbc.w	r1, r9, r4
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7df      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e60:	4608      	mov	r0, r1
 8000e62:	e7d2      	b.n	8000e0a <__udivmoddi4+0x24a>
 8000e64:	4660      	mov	r0, ip
 8000e66:	e78d      	b.n	8000d84 <__udivmoddi4+0x1c4>
 8000e68:	4681      	mov	r9, r0
 8000e6a:	e7b9      	b.n	8000de0 <__udivmoddi4+0x220>
 8000e6c:	4666      	mov	r6, ip
 8000e6e:	e775      	b.n	8000d5c <__udivmoddi4+0x19c>
 8000e70:	4630      	mov	r0, r6
 8000e72:	e74a      	b.n	8000d0a <__udivmoddi4+0x14a>
 8000e74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e78:	4439      	add	r1, r7
 8000e7a:	e713      	b.n	8000ca4 <__udivmoddi4+0xe4>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	e724      	b.n	8000ccc <__udivmoddi4+0x10c>
 8000e82:	bf00      	nop

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <_ZN7EncoderC1EP12GPIO_TypeDefS1_tt>:
 *      Author: abiq
 */

#include "Encoder.h"

Encoder::Encoder(GPIO_TypeDef *GPIOxA, GPIO_TypeDef *GPIOxB, uint16_t pinA, uint16_t pinB)
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	807b      	strh	r3, [r7, #2]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	731a      	strb	r2, [r3, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	735a      	strb	r2, [r3, #13]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
{
	encA_port = GPIOxA;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	601a      	str	r2, [r3, #0]
	encB_port = GPIOxB;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	605a      	str	r2, [r3, #4]

	encA_pin = pinA;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	811a      	strh	r2, [r3, #8]
	encB_pin = pinB;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	8b3a      	ldrh	r2, [r7, #24]
 8000ebe:	815a      	strh	r2, [r3, #10]
}
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_ZN7Encoder7ReadPinEv>:

void Encoder::ReadPin()
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
	pulseA = HAL_GPIO_ReadPin(encA_port, encA_pin);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	891b      	ldrh	r3, [r3, #8]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4610      	mov	r0, r2
 8000ee2:	f004 fd9d 	bl	8005a20 <HAL_GPIO_ReadPin>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf14      	ite	ne
 8000eec:	2301      	movne	r3, #1
 8000eee:	2300      	moveq	r3, #0
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	731a      	strb	r2, [r3, #12]
	pulseB = HAL_GPIO_ReadPin(encB_port, encB_pin);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	895b      	ldrh	r3, [r3, #10]
 8000efe:	4619      	mov	r1, r3
 8000f00:	4610      	mov	r0, r2
 8000f02:	f004 fd8d 	bl	8005a20 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf14      	ite	ne
 8000f0c:	2301      	movne	r3, #1
 8000f0e:	2300      	moveq	r3, #0
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	735a      	strb	r2, [r3, #13]
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZN7Encoder8CountingEv>:

void Encoder::Counting()
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	ReadPin();
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffd1 	bl	8000ece <_ZN7Encoder7ReadPinEv>

	if(pulseA != pulseB) counter ++;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7b1b      	ldrb	r3, [r3, #12]
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	7b5b      	ldrb	r3, [r3, #13]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	bf14      	ite	ne
 8000f3c:	2301      	movne	r3, #1
 8000f3e:	2300      	moveq	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <_ZN7Encoder8CountingEv+0x34>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	611a      	str	r2, [r3, #16]
	else counter --;
}
 8000f50:	e004      	b.n	8000f5c <_ZN7Encoder8CountingEv+0x3e>
	else counter --;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	1e5a      	subs	r2, r3, #1
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	611a      	str	r2, [r3, #16]
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_ZN7Encoder15CountingReverseEv>:

void Encoder::CountingReverse()
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	ReadPin();
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ffae 	bl	8000ece <_ZN7Encoder7ReadPinEv>

	if(pulseA == pulseB) counter ++;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7b1b      	ldrb	r3, [r3, #12]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7b5b      	ldrb	r3, [r3, #13]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	bf0c      	ite	eq
 8000f82:	2301      	moveq	r3, #1
 8000f84:	2300      	movne	r3, #0
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <_ZN7Encoder15CountingReverseEv+0x34>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	611a      	str	r2, [r3, #16]
	else counter --;
}
 8000f96:	e004      	b.n	8000fa2 <_ZN7Encoder15CountingReverseEv+0x3e>
	else counter --;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	1e5a      	subs	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	611a      	str	r2, [r3, #16]
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_ZN7Encoder10GetCounterEv>:

int Encoder::GetCounter()
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	return counter;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <_ZN8IMU_GY2512KalibrasiImuEv>:
#include "main.h"

extern UART_HandleTypeDef huart1;
extern DMA_HandleTypeDef hdma_usart1_tx;

void IMU_GY25::KalibrasiImu(){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	//Kalibrasi A5 dan 54
	HAL_UART_Transmit(&huart1, kalibrasi, 1, 10);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	1d19      	adds	r1, r3, #4
 8000fd0:	230a      	movs	r3, #10
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	481a      	ldr	r0, [pc, #104]	; (8001040 <_ZN8IMU_GY2512KalibrasiImuEv+0x7c>)
 8000fd6:	f007 fbe2 	bl	800879e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, kalibrasi + 2, 1, 10);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	1c99      	adds	r1, r3, #2
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4816      	ldr	r0, [pc, #88]	; (8001040 <_ZN8IMU_GY2512KalibrasiImuEv+0x7c>)
 8000fe6:	f007 fbda 	bl	800879e <HAL_UART_Transmit>
	HAL_Delay(100);
 8000fea:	2064      	movs	r0, #100	; 0x64
 8000fec:	f003 fa7a 	bl	80044e4 <HAL_Delay>

	//Kalibrasi A5 dan 55
	HAL_UART_Transmit(&huart1, kalibrasi, 1, 10);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1d19      	adds	r1, r3, #4
 8000ff4:	230a      	movs	r3, #10
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4811      	ldr	r0, [pc, #68]	; (8001040 <_ZN8IMU_GY2512KalibrasiImuEv+0x7c>)
 8000ffa:	f007 fbd0 	bl	800879e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, kalibrasi + 1, 1, 10);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3304      	adds	r3, #4
 8001002:	1c59      	adds	r1, r3, #1
 8001004:	230a      	movs	r3, #10
 8001006:	2201      	movs	r2, #1
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <_ZN8IMU_GY2512KalibrasiImuEv+0x7c>)
 800100a:	f007 fbc8 	bl	800879e <HAL_UART_Transmit>
	HAL_Delay(100);
 800100e:	2064      	movs	r0, #100	; 0x64
 8001010:	f003 fa68 	bl	80044e4 <HAL_Delay>

	//Kalibrasi A5 dan 52 (Convert to ASCII)
	HAL_UART_Transmit(&huart1, kalibrasi, 1, 10);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	1d19      	adds	r1, r3, #4
 8001018:	230a      	movs	r3, #10
 800101a:	2201      	movs	r2, #1
 800101c:	4808      	ldr	r0, [pc, #32]	; (8001040 <_ZN8IMU_GY2512KalibrasiImuEv+0x7c>)
 800101e:	f007 fbbe 	bl	800879e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, kalibrasi + 3, 1, 10);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3304      	adds	r3, #4
 8001026:	1cd9      	adds	r1, r3, #3
 8001028:	230a      	movs	r3, #10
 800102a:	2201      	movs	r2, #1
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <_ZN8IMU_GY2512KalibrasiImuEv+0x7c>)
 800102e:	f007 fbb6 	bl	800879e <HAL_UART_Transmit>
	HAL_Delay(100);
 8001032:	2064      	movs	r0, #100	; 0x64
 8001034:	f003 fa56 	bl	80044e4 <HAL_Delay>
	}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000049c 	.word	0x2000049c

08001044 <_ZN8IMU_GY2513processingIMUEi>:

uint16_t IMU_GY25::processingIMU(int imu){
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
//	int mumu = imu;
	if(imu < 0) imu += 36000;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	da04      	bge.n	800105e <_ZN8IMU_GY2513processingIMUEi+0x1a>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 800105a:	33a0      	adds	r3, #160	; 0xa0
 800105c:	603b      	str	r3, [r7, #0]
	return imu;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	b29b      	uxth	r3, r3
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	ed87 0a01 	vstr	s0, [r7, #4]
 8001078:	ed97 0a01 	vldr	s0, [r7, #4]
 800107c:	f00c fa60 	bl	800d540 <cosf>
 8001080:	eef0 7a40 	vmov.f32	s15, s0
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	ed87 0a01 	vstr	s0, [r7, #4]
 8001098:	ed97 0a01 	vldr	s0, [r7, #4]
 800109c:	f00c fa90 	bl	800d5c0 <sinf>
 80010a0:	eef0 7a40 	vmov.f32	s15, s0
 80010a4:	eeb0 0a67 	vmov.f32	s0, s15
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_ZN9kinematic5MotorC1Ev>:
namespace kinematic
{
  class Motor
  {
  public:
    Motor() {}
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff f9cd 	bl	800046c <__aeabi_i2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ec43 2b10 	vmov	d0, r2, r3
 80010da:	f00c faef 	bl	800d6bc <sqrt>
 80010de:	eeb0 7a40 	vmov.f32	s14, s0
 80010e2:	eef0 7a60 	vmov.f32	s15, s1
 80010e6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ea:	eef0 0a67 	vmov.f32	s1, s15
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	0000      	movs	r0, r0
	...

080010f8 <_ZN9kinematic5Motor8calcOdomEv>:
std::vector<double>e{0,0,0};
std::vector<double>prev_e{0,0,0};
std::vector<double> v{0,0,0};

extern  STM32 Send;
void Motor::calcOdom(){
 80010f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010fc:	ed2d 8b02 	vpush	{d8}
 8001100:	b08d      	sub	sp, #52	; 0x34
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
	e[0] = (float)Send.Encoder[0];
 8001106:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <_ZN9kinematic5Motor8calcOdomEv+0xd8>)
 8001108:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001114:	2100      	movs	r1, #0
 8001116:	482f      	ldr	r0, [pc, #188]	; (80011d4 <_ZN9kinematic5Motor8calcOdomEv+0xdc>)
 8001118:	f000 fbeb 	bl	80018f2 <_ZNSt6vectorIdSaIdEEixEj>
 800111c:	4606      	mov	r6, r0
 800111e:	ee18 0a10 	vmov	r0, s16
 8001122:	f7ff f9b5 	bl	8000490 <__aeabi_f2d>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	e9c6 2300 	strd	r2, r3, [r6]
	e[1] = (float)Send.Encoder[1];
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <_ZN9kinematic5Motor8calcOdomEv+0xd8>)
 8001130:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800113c:	2101      	movs	r1, #1
 800113e:	4825      	ldr	r0, [pc, #148]	; (80011d4 <_ZN9kinematic5Motor8calcOdomEv+0xdc>)
 8001140:	f000 fbd7 	bl	80018f2 <_ZNSt6vectorIdSaIdEEixEj>
 8001144:	4606      	mov	r6, r0
 8001146:	ee18 0a10 	vmov	r0, s16
 800114a:	f7ff f9a1 	bl	8000490 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	e9c6 2300 	strd	r2, r3, [r6]
	e[2] = (float)Send.Encoder[2];
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <_ZN9kinematic5Motor8calcOdomEv+0xd8>)
 8001158:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001164:	2102      	movs	r1, #2
 8001166:	481b      	ldr	r0, [pc, #108]	; (80011d4 <_ZN9kinematic5Motor8calcOdomEv+0xdc>)
 8001168:	f000 fbc3 	bl	80018f2 <_ZNSt6vectorIdSaIdEEixEj>
 800116c:	4606      	mov	r6, r0
 800116e:	ee18 0a10 	vmov	r0, s16
 8001172:	f7ff f98d 	bl	8000490 <__aeabi_f2d>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	e9c6 2300 	strd	r2, r3, [r6]

	for(int i = 0; i < 3; i++){
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	2b02      	cmp	r3, #2
 8001186:	dc2b      	bgt.n	80011e0 <_ZN9kinematic5Motor8calcOdomEv+0xe8>
		v[i] = e[i] - prev_e[i];
 8001188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118a:	4619      	mov	r1, r3
 800118c:	4811      	ldr	r0, [pc, #68]	; (80011d4 <_ZN9kinematic5Motor8calcOdomEv+0xdc>)
 800118e:	f000 fbb0 	bl	80018f2 <_ZNSt6vectorIdSaIdEEixEj>
 8001192:	4603      	mov	r3, r0
 8001194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119a:	4619      	mov	r1, r3
 800119c:	480e      	ldr	r0, [pc, #56]	; (80011d8 <_ZN9kinematic5Motor8calcOdomEv+0xe0>)
 800119e:	f000 fba8 	bl	80018f2 <_ZNSt6vectorIdSaIdEEixEj>
 80011a2:	4603      	mov	r3, r0
 80011a4:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80011a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011aa:	4619      	mov	r1, r3
 80011ac:	480b      	ldr	r0, [pc, #44]	; (80011dc <_ZN9kinematic5Motor8calcOdomEv+0xe4>)
 80011ae:	f000 fba0 	bl	80018f2 <_ZNSt6vectorIdSaIdEEixEj>
 80011b2:	4606      	mov	r6, r0
 80011b4:	4652      	mov	r2, sl
 80011b6:	465b      	mov	r3, fp
 80011b8:	4640      	mov	r0, r8
 80011ba:	4649      	mov	r1, r9
 80011bc:	f7ff f808 	bl	80001d0 <__aeabi_dsub>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	e9c6 2300 	strd	r2, r3, [r6]
	for(int i = 0; i < 3; i++){
 80011c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ca:	3301      	adds	r3, #1
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ce:	e7d8      	b.n	8001182 <_ZN9kinematic5Motor8calcOdomEv+0x8a>
 80011d0:	20000870 	.word	0x20000870
 80011d4:	20000254 	.word	0x20000254
 80011d8:	20000260 	.word	0x20000260
 80011dc:	2000026c 	.word	0x2000026c
	}

	mtr_.v1 = v[0] / 7500 * M_PI * 10;
 80011e0:	2100      	movs	r1, #0
 80011e2:	48d5      	ldr	r0, [pc, #852]	; (8001538 <_ZN9kinematic5Motor8calcOdomEv+0x440>)
 80011e4:	f000 fb85 	bl	80018f2 <_ZNSt6vectorIdSaIdEEixEj>
 80011e8:	4603      	mov	r3, r0
 80011ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ee:	a3ca      	add	r3, pc, #808	; (adr r3, 8001518 <_ZN9kinematic5Motor8calcOdomEv+0x420>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff face 	bl	8000794 <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	a3c7      	add	r3, pc, #796	; (adr r3, 8001520 <_ZN9kinematic5Motor8calcOdomEv+0x428>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff f99b 	bl	8000540 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4bc9      	ldr	r3, [pc, #804]	; (800153c <_ZN9kinematic5Motor8calcOdomEv+0x444>)
 8001218:	f7ff f992 	bl	8000540 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fc64 	bl	8000af0 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	4ac5      	ldr	r2, [pc, #788]	; (8001540 <_ZN9kinematic5Motor8calcOdomEv+0x448>)
 800122c:	60d3      	str	r3, [r2, #12]
//	e1.ResetCounter();
	mtr_.v2 = v[1] / 7500 * M_PI * 10;
 800122e:	2101      	movs	r1, #1
 8001230:	48c1      	ldr	r0, [pc, #772]	; (8001538 <_ZN9kinematic5Motor8calcOdomEv+0x440>)
 8001232:	f000 fb5e 	bl	80018f2 <_ZNSt6vectorIdSaIdEEixEj>
 8001236:	4603      	mov	r3, r0
 8001238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800123c:	a3b6      	add	r3, pc, #728	; (adr r3, 8001518 <_ZN9kinematic5Motor8calcOdomEv+0x420>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff faa7 	bl	8000794 <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	a3b4      	add	r3, pc, #720	; (adr r3, 8001520 <_ZN9kinematic5Motor8calcOdomEv+0x428>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff f974 	bl	8000540 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	4bb5      	ldr	r3, [pc, #724]	; (800153c <_ZN9kinematic5Motor8calcOdomEv+0x444>)
 8001266:	f7ff f96b 	bl	8000540 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f7ff fc3d 	bl	8000af0 <__aeabi_d2f>
 8001276:	4603      	mov	r3, r0
 8001278:	4ab1      	ldr	r2, [pc, #708]	; (8001540 <_ZN9kinematic5Motor8calcOdomEv+0x448>)
 800127a:	6113      	str	r3, [r2, #16]
//	e2.ResetCounter();
	mtr_.v3 = v[2] / 7500 * M_PI * 10;
 800127c:	2102      	movs	r1, #2
 800127e:	48ae      	ldr	r0, [pc, #696]	; (8001538 <_ZN9kinematic5Motor8calcOdomEv+0x440>)
 8001280:	f000 fb37 	bl	80018f2 <_ZNSt6vectorIdSaIdEEixEj>
 8001284:	4603      	mov	r3, r0
 8001286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800128a:	a3a3      	add	r3, pc, #652	; (adr r3, 8001518 <_ZN9kinematic5Motor8calcOdomEv+0x420>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff fa80 	bl	8000794 <__aeabi_ddiv>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	a3a0      	add	r3, pc, #640	; (adr r3, 8001520 <_ZN9kinematic5Motor8calcOdomEv+0x428>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f94d 	bl	8000540 <__aeabi_dmul>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4ba2      	ldr	r3, [pc, #648]	; (800153c <_ZN9kinematic5Motor8calcOdomEv+0x444>)
 80012b4:	f7ff f944 	bl	8000540 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc16 	bl	8000af0 <__aeabi_d2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4a9e      	ldr	r2, [pc, #632]	; (8001540 <_ZN9kinematic5Motor8calcOdomEv+0x448>)
 80012c8:	6153      	str	r3, [r2, #20]
//	e3.ResetCounter();
	velocity.x = ((-sqrt(3) * mtr_.v1) + (sqrt(3) * mtr_.v3)) / 3;
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff fefa 	bl	80010c4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012d0:	ec53 2b10 	vmov	r2, r3, d0
 80012d4:	4614      	mov	r4, r2
 80012d6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012da:	4b99      	ldr	r3, [pc, #612]	; (8001540 <_ZN9kinematic5Motor8calcOdomEv+0x448>)
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f8d6 	bl	8000490 <__aeabi_f2d>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7ff f928 	bl	8000540 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	2003      	movs	r0, #3
 80012fa:	f7ff fee3 	bl	80010c4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012fe:	ec59 8b10 	vmov	r8, r9, d0
 8001302:	4b8f      	ldr	r3, [pc, #572]	; (8001540 <_ZN9kinematic5Motor8calcOdomEv+0x448>)
 8001304:	695b      	ldr	r3, [r3, #20]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f8c2 	bl	8000490 <__aeabi_f2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4640      	mov	r0, r8
 8001312:	4649      	mov	r1, r9
 8001314:	f7ff f914 	bl	8000540 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7fe ff58 	bl	80001d4 <__adddf3>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b84      	ldr	r3, [pc, #528]	; (8001544 <_ZN9kinematic5Motor8calcOdomEv+0x44c>)
 8001332:	f7ff fa2f 	bl	8000794 <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbd7 	bl	8000af0 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a80      	ldr	r2, [pc, #512]	; (8001548 <_ZN9kinematic5Motor8calcOdomEv+0x450>)
 8001346:	6013      	str	r3, [r2, #0]
	velocity.y = ((-2 * mtr_.v2) + mtr_.v1 + mtr_.v3) / 3;
 8001348:	4b7d      	ldr	r3, [pc, #500]	; (8001540 <_ZN9kinematic5Motor8calcOdomEv+0x448>)
 800134a:	edd3 7a04 	vldr	s15, [r3, #16]
 800134e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001352:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001356:	4b7a      	ldr	r3, [pc, #488]	; (8001540 <_ZN9kinematic5Motor8calcOdomEv+0x448>)
 8001358:	edd3 7a03 	vldr	s15, [r3, #12]
 800135c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001360:	4b77      	ldr	r3, [pc, #476]	; (8001540 <_ZN9kinematic5Motor8calcOdomEv+0x448>)
 8001362:	edd3 7a05 	vldr	s15, [r3, #20]
 8001366:	ee37 7a27 	vadd.f32	s14, s14, s15
 800136a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800136e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001372:	4b75      	ldr	r3, [pc, #468]	; (8001548 <_ZN9kinematic5Motor8calcOdomEv+0x450>)
 8001374:	edc3 7a01 	vstr	s15, [r3, #4]
	velocity.theta = (mtr_.v1 + mtr_.v2 + mtr_.v3) / (3 * 20.8);
 8001378:	4b71      	ldr	r3, [pc, #452]	; (8001540 <_ZN9kinematic5Motor8calcOdomEv+0x448>)
 800137a:	ed93 7a03 	vldr	s14, [r3, #12]
 800137e:	4b70      	ldr	r3, [pc, #448]	; (8001540 <_ZN9kinematic5Motor8calcOdomEv+0x448>)
 8001380:	edd3 7a04 	vldr	s15, [r3, #16]
 8001384:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001388:	4b6d      	ldr	r3, [pc, #436]	; (8001540 <_ZN9kinematic5Motor8calcOdomEv+0x448>)
 800138a:	edd3 7a05 	vldr	s15, [r3, #20]
 800138e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001392:	ee17 0a90 	vmov	r0, s15
 8001396:	f7ff f87b 	bl	8000490 <__aeabi_f2d>
 800139a:	a363      	add	r3, pc, #396	; (adr r3, 8001528 <_ZN9kinematic5Motor8calcOdomEv+0x430>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f9f8 	bl	8000794 <__aeabi_ddiv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fba0 	bl	8000af0 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4a65      	ldr	r2, [pc, #404]	; (8001548 <_ZN9kinematic5Motor8calcOdomEv+0x450>)
 80013b4:	6093      	str	r3, [r2, #8]

	double radian = fmod(pos.theta, M_PI*2);
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <_ZN9kinematic5Motor8calcOdomEv+0x454>)
 80013b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80013bc:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 8001530 <_ZN9kinematic5Motor8calcOdomEv+0x438>
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	f000 faa5 	bl	8001912 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013c8:	ed87 0b08 	vstr	d0, [r7, #32]
	if(radian < 0)
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013d8:	f7ff fb24 	bl	8000a24 <__aeabi_dcmplt>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00a      	beq.n	80013f8 <_ZN9kinematic5Motor8calcOdomEv+0x300>
		radian += M_PI *2;
 80013e2:	a353      	add	r3, pc, #332	; (adr r3, 8001530 <_ZN9kinematic5Motor8calcOdomEv+0x438>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013ec:	f7fe fef2 	bl	80001d4 <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	Point2D vel_glob;
	vel_glob.x = (std::cos(radian) * velocity.x) - (std::sin(radian) * velocity.y);
 80013f8:	ed97 0b08 	vldr	d0, [r7, #32]
 80013fc:	f00b fffc 	bl	800d3f8 <cos>
 8001400:	ec55 4b10 	vmov	r4, r5, d0
 8001404:	4b50      	ldr	r3, [pc, #320]	; (8001548 <_ZN9kinematic5Motor8calcOdomEv+0x450>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f841 	bl	8000490 <__aeabi_f2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4620      	mov	r0, r4
 8001414:	4629      	mov	r1, r5
 8001416:	f7ff f893 	bl	8000540 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4614      	mov	r4, r2
 8001420:	461d      	mov	r5, r3
 8001422:	ed97 0b08 	vldr	d0, [r7, #32]
 8001426:	f00c f837 	bl	800d498 <sin>
 800142a:	ec59 8b10 	vmov	r8, r9, d0
 800142e:	4b46      	ldr	r3, [pc, #280]	; (8001548 <_ZN9kinematic5Motor8calcOdomEv+0x450>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f82c 	bl	8000490 <__aeabi_f2d>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4640      	mov	r0, r8
 800143e:	4649      	mov	r1, r9
 8001440:	f7ff f87e 	bl	8000540 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4620      	mov	r0, r4
 800144a:	4629      	mov	r1, r5
 800144c:	f7fe fec0 	bl	80001d0 <__aeabi_dsub>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fb4a 	bl	8000af0 <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
 800145e:	60bb      	str	r3, [r7, #8]
	vel_glob.y = (std::cos(radian) * velocity.y) + (std::sin(radian) * velocity.x);
 8001460:	ed97 0b08 	vldr	d0, [r7, #32]
 8001464:	f00b ffc8 	bl	800d3f8 <cos>
 8001468:	ec55 4b10 	vmov	r4, r5, d0
 800146c:	4b36      	ldr	r3, [pc, #216]	; (8001548 <_ZN9kinematic5Motor8calcOdomEv+0x450>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f80d 	bl	8000490 <__aeabi_f2d>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4620      	mov	r0, r4
 800147c:	4629      	mov	r1, r5
 800147e:	f7ff f85f 	bl	8000540 <__aeabi_dmul>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	4614      	mov	r4, r2
 8001488:	461d      	mov	r5, r3
 800148a:	ed97 0b08 	vldr	d0, [r7, #32]
 800148e:	f00c f803 	bl	800d498 <sin>
 8001492:	ec59 8b10 	vmov	r8, r9, d0
 8001496:	4b2c      	ldr	r3, [pc, #176]	; (8001548 <_ZN9kinematic5Motor8calcOdomEv+0x450>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe fff8 	bl	8000490 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4640      	mov	r0, r8
 80014a6:	4649      	mov	r1, r9
 80014a8:	f7ff f84a 	bl	8000540 <__aeabi_dmul>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7fe fe8e 	bl	80001d4 <__adddf3>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fb16 	bl	8000af0 <__aeabi_d2f>
 80014c4:	4603      	mov	r3, r0
 80014c6:	60fb      	str	r3, [r7, #12]


	pos.x += vel_glob.x;
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <_ZN9kinematic5Motor8calcOdomEv+0x454>)
 80014ca:	ed93 7a00 	vldr	s14, [r3]
 80014ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80014d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <_ZN9kinematic5Motor8calcOdomEv+0x454>)
 80014d8:	edc3 7a00 	vstr	s15, [r3]
	pos.y += vel_glob.y;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <_ZN9kinematic5Motor8calcOdomEv+0x454>)
 80014de:	ed93 7a01 	vldr	s14, [r3, #4]
 80014e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <_ZN9kinematic5Motor8calcOdomEv+0x454>)
 80014ec:	edc3 7a01 	vstr	s15, [r3, #4]
	pos.theta += velocity.theta;
 80014f0:	4b16      	ldr	r3, [pc, #88]	; (800154c <_ZN9kinematic5Motor8calcOdomEv+0x454>)
 80014f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <_ZN9kinematic5Motor8calcOdomEv+0x450>)
 80014f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80014fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <_ZN9kinematic5Motor8calcOdomEv+0x454>)
 8001502:	edc3 7a02 	vstr	s15, [r3, #8]

	prev_e = e;
 8001506:	4912      	ldr	r1, [pc, #72]	; (8001550 <_ZN9kinematic5Motor8calcOdomEv+0x458>)
 8001508:	4812      	ldr	r0, [pc, #72]	; (8001554 <_ZN9kinematic5Motor8calcOdomEv+0x45c>)
 800150a:	f000 fa2f 	bl	800196c <_ZNSt6vectorIdSaIdEEaSERKS1_>
}
 800150e:	bf00      	nop
 8001510:	3734      	adds	r7, #52	; 0x34
 8001512:	e021      	b.n	8001558 <_ZN9kinematic5Motor8calcOdomEv+0x460>
 8001514:	f3af 8000 	nop.w
 8001518:	00000000 	.word	0x00000000
 800151c:	40bd4c00 	.word	0x40bd4c00
 8001520:	54442d18 	.word	0x54442d18
 8001524:	400921fb 	.word	0x400921fb
 8001528:	33333334 	.word	0x33333334
 800152c:	404f3333 	.word	0x404f3333
 8001530:	54442d18 	.word	0x54442d18
 8001534:	401921fb 	.word	0x401921fb
 8001538:	2000026c 	.word	0x2000026c
 800153c:	40240000 	.word	0x40240000
 8001540:	20000200 	.word	0x20000200
 8001544:	40080000 	.word	0x40080000
 8001548:	2000023c 	.word	0x2000023c
 800154c:	20000224 	.word	0x20000224
 8001550:	20000254 	.word	0x20000254
 8001554:	20000260 	.word	0x20000260
 8001558:	46bd      	mov	sp, r7
 800155a:	ecbd 8b02 	vpop	{d8}
 800155e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001562:	bf00      	nop
 8001564:	0000      	movs	r0, r0
	...

08001568 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D>:

void Motor::inverseKinematic(float x,float y,float z,Point2D &output){
 8001568:	b5b0      	push	{r4, r5, r7, lr}
 800156a:	ed2d 8b02 	vpush	{d8}
 800156e:	b098      	sub	sp, #96	; 0x60
 8001570:	af00      	add	r7, sp, #0
 8001572:	6178      	str	r0, [r7, #20]
 8001574:	ed87 0a04 	vstr	s0, [r7, #16]
 8001578:	edc7 0a03 	vstr	s1, [r7, #12]
 800157c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001580:	6079      	str	r1, [r7, #4]
	Point2D vel_world;
	Point2D Vin;
	Point2D Vrad;
	Vin.x = x;
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
	Vin.y = y;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
	Vin.theta = z;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	63bb      	str	r3, [r7, #56]	; 0x38

	vel_world.x = cos(pos.theta) * Vin.x + sin(pos.theta) * Vin.y;
 800158e:	4bba      	ldr	r3, [pc, #744]	; (8001878 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x310>)
 8001590:	edd3 7a02 	vldr	s15, [r3, #8]
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	f7ff fd69 	bl	800106e <_ZSt3cosf>
 800159c:	eeb0 7a40 	vmov.f32	s14, s0
 80015a0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015a4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80015a8:	4bb3      	ldr	r3, [pc, #716]	; (8001878 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x310>)
 80015aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ae:	eeb0 0a67 	vmov.f32	s0, s15
 80015b2:	f7ff fd6c 	bl	800108e <_ZSt3sinf>
 80015b6:	eeb0 7a40 	vmov.f32	s14, s0
 80015ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80015c6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	vel_world.y = -sin(pos.theta) * Vin.x + cos(pos.theta) * Vin.y;
 80015ca:	4bab      	ldr	r3, [pc, #684]	; (8001878 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x310>)
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	f7ff fd5b 	bl	800108e <_ZSt3sinf>
 80015d8:	eef0 7a40 	vmov.f32	s15, s0
 80015dc:	eeb1 7a67 	vneg.f32	s14, s15
 80015e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80015e4:	ee27 8a27 	vmul.f32	s16, s14, s15
 80015e8:	4ba3      	ldr	r3, [pc, #652]	; (8001878 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x310>)
 80015ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	f7ff fd3c 	bl	800106e <_ZSt3cosf>
 80015f6:	eeb0 7a40 	vmov.f32	s14, s0
 80015fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80015fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001602:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001606:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	vel_world.theta = Vin.theta;
 800160a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800160c:	653b      	str	r3, [r7, #80]	; 0x50

	Vrad.a = ((-sqrt(3) * vel_world.x / 2) + (vel_world.y / 2) + 20.8 * vel_world.theta) / 5;
 800160e:	2003      	movs	r0, #3
 8001610:	f7ff fd58 	bl	80010c4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001614:	ec53 2b10 	vmov	r2, r3, d0
 8001618:	4614      	mov	r4, r2
 800161a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800161e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff35 	bl	8000490 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	f7fe ff87 	bl	8000540 <__aeabi_dmul>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001642:	f7ff f8a7 	bl	8000794 <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4614      	mov	r4, r2
 800164c:	461d      	mov	r5, r3
 800164e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001652:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001656:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800165a:	ee16 0a90 	vmov	r0, s13
 800165e:	f7fe ff17 	bl	8000490 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe fdb3 	bl	80001d4 <__adddf3>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4614      	mov	r4, r2
 8001674:	461d      	mov	r5, r3
 8001676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ff09 	bl	8000490 <__aeabi_f2d>
 800167e:	a378      	add	r3, pc, #480	; (adr r3, 8001860 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x2f8>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe ff5c 	bl	8000540 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fda0 	bl	80001d4 <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	4b76      	ldr	r3, [pc, #472]	; (800187c <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x314>)
 80016a2:	f7ff f877 	bl	8000794 <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff fa1f 	bl	8000af0 <__aeabi_d2f>
 80016b2:	4603      	mov	r3, r0
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
	Vrad.b = (-vel_world.y + 20.8 * vel_world.theta) / 5;
 80016b6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80016ba:	eef1 7a67 	vneg.f32	s15, s15
 80016be:	ee17 3a90 	vmov	r3, s15
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fee4 	bl	8000490 <__aeabi_f2d>
 80016c8:	4604      	mov	r4, r0
 80016ca:	460d      	mov	r5, r1
 80016cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe fede 	bl	8000490 <__aeabi_f2d>
 80016d4:	a362      	add	r3, pc, #392	; (adr r3, 8001860 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x2f8>)
 80016d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016da:	f7fe ff31 	bl	8000540 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4620      	mov	r0, r4
 80016e4:	4629      	mov	r1, r5
 80016e6:	f7fe fd75 	bl	80001d4 <__adddf3>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b61      	ldr	r3, [pc, #388]	; (800187c <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x314>)
 80016f8:	f7ff f84c 	bl	8000794 <__aeabi_ddiv>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff f9f4 	bl	8000af0 <__aeabi_d2f>
 8001708:	4603      	mov	r3, r0
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
	Vrad.c = ((sqrt(3) * vel_world.x / 2) + (vel_world.y / 2) + 20.8 * vel_world.theta) / 5;
 800170c:	2003      	movs	r0, #3
 800170e:	f7ff fcd9 	bl	80010c4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001712:	ec55 4b10 	vmov	r4, r5, d0
 8001716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe feb9 	bl	8000490 <__aeabi_f2d>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4620      	mov	r0, r4
 8001724:	4629      	mov	r1, r5
 8001726:	f7fe ff0b 	bl	8000540 <__aeabi_dmul>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800173a:	f7ff f82b 	bl	8000794 <__aeabi_ddiv>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4614      	mov	r4, r2
 8001744:	461d      	mov	r5, r3
 8001746:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800174a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800174e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001752:	ee16 0a90 	vmov	r0, s13
 8001756:	f7fe fe9b 	bl	8000490 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe fd37 	bl	80001d4 <__adddf3>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4614      	mov	r4, r2
 800176c:	461d      	mov	r5, r3
 800176e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fe8d 	bl	8000490 <__aeabi_f2d>
 8001776:	a33a      	add	r3, pc, #232	; (adr r3, 8001860 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x2f8>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	f7fe fee0 	bl	8000540 <__aeabi_dmul>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7fe fd24 	bl	80001d4 <__adddf3>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	4b38      	ldr	r3, [pc, #224]	; (800187c <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x314>)
 800179a:	f7fe fffb 	bl	8000794 <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4610      	mov	r0, r2
 80017a4:	4619      	mov	r1, r3
 80017a6:	f7ff f9a3 	bl	8000af0 <__aeabi_d2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	output.a = Vrad.a / (433 * (2* M_PI / 60)) * 225;
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fe6d 	bl	8000490 <__aeabi_f2d>
 80017b6:	a32c      	add	r3, pc, #176	; (adr r3, 8001868 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x300>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe ffea 	bl	8000794 <__aeabi_ddiv>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	a329      	add	r3, pc, #164	; (adr r3, 8001870 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x308>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe feb7 	bl	8000540 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f7ff f989 	bl	8000af0 <__aeabi_d2f>
 80017de:	4602      	mov	r2, r0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	60da      	str	r2, [r3, #12]
	output.b = Vrad.b / (433 * (2* M_PI / 60)) * 225;
 80017e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe fe52 	bl	8000490 <__aeabi_f2d>
 80017ec:	a31e      	add	r3, pc, #120	; (adr r3, 8001868 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x300>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7fe ffcf 	bl	8000794 <__aeabi_ddiv>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	a31c      	add	r3, pc, #112	; (adr r3, 8001870 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x308>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe fe9c 	bl	8000540 <__aeabi_dmul>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f96e 	bl	8000af0 <__aeabi_d2f>
 8001814:	4602      	mov	r2, r0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	611a      	str	r2, [r3, #16]
	output.c = Vrad.c / (433 * (2* M_PI / 60)) * 225;
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe37 	bl	8000490 <__aeabi_f2d>
 8001822:	a311      	add	r3, pc, #68	; (adr r3, 8001868 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x300>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe ffb4 	bl	8000794 <__aeabi_ddiv>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	a30e      	add	r3, pc, #56	; (adr r3, 8001870 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D+0x308>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fe81 	bl	8000540 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f953 	bl	8000af0 <__aeabi_d2f>
 800184a:	4602      	mov	r2, r0
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	615a      	str	r2, [r3, #20]

}
 8001850:	bf00      	nop
 8001852:	3760      	adds	r7, #96	; 0x60
 8001854:	46bd      	mov	sp, r7
 8001856:	ecbd 8b02 	vpop	{d8}
 800185a:	bdb0      	pop	{r4, r5, r7, pc}
 800185c:	f3af 8000 	nop.w
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	4034cccc 	.word	0x4034cccc
 8001868:	da6a4cf2 	.word	0xda6a4cf2
 800186c:	4046abfc 	.word	0x4046abfc
 8001870:	00000000 	.word	0x00000000
 8001874:	406c2000 	.word	0x406c2000
 8001878:	20000224 	.word	0x20000224
 800187c:	40140000 	.word	0x40140000

08001880 <_ZNSaIdEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f964 	bl	8001b56 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_ZNSaIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f963 	bl	8001b6c <_ZN9__gnu_cxx13new_allocatorIdED1Ev>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>:
       *  initializer_list @a __l.
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      vector(initializer_list<value_type> __l,
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	1d38      	adds	r0, r7, #4
 80018ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80018be:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6839      	ldr	r1, [r7, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f000 f968 	bl	8001b9a <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f98c 	bl	8001bea <_ZNKSt16initializer_listIdE5beginEv>
 80018d2:	4604      	mov	r4, r0
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f993 	bl	8001c02 <_ZNKSt16initializer_listIdE3endEv>
 80018dc:	4602      	mov	r2, r0
 80018de:	462b      	mov	r3, r5
 80018e0:	4621      	mov	r1, r4
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f000 f99f 	bl	8001c26 <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bdb0      	pop	{r4, r5, r7, pc}

080018f2 <_ZNSt6vectorIdSaIdEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
      }
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    fmod(_Tp __x, _Up __y)
 8001912:	b580      	push	{r7, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	ed87 0a03 	vstr	s0, [r7, #12]
 800191c:	ed87 1b00 	vstr	d1, [r7]
      return fmod(__type(__x), __type(__y));
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f7fe fdb5 	bl	8000490 <__aeabi_f2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	ed97 1b00 	vldr	d1, [r7]
 800192e:	ec43 2b10 	vmov	d0, r2, r3
 8001932:	f00b fe87 	bl	800d644 <fmod>
 8001936:	eeb0 7a40 	vmov.f32	s14, s0
 800193a:	eef0 7a60 	vmov.f32	s15, s1
    }
 800193e:	eeb0 0a47 	vmov.f32	s0, s14
 8001942:	eef0 0a67 	vmov.f32	s1, s15
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <_ZN9__gnu_cxx14__alloc_traitsISaIdEdE27_S_propagate_on_copy_assignEv>:
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
    { return _Base_type::propagate_on_container_copy_assignment::value; }
 8001950:	2300      	movs	r3, #0
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_ZN9__gnu_cxx14__alloc_traitsISaIdEdE15_S_always_equalEv>:
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
    { return _Base_type::is_always_equal::value; }
 8001960:	2301      	movs	r3, #1
 8001962:	4618      	mov	r0, r3
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_ZNSt6vectorIdSaIdEEaSERKS1_>:
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	f000 80e6 	beq.w	8001b4c <_ZNSt6vectorIdSaIdEEaSERKS1_+0x1e0>
	{
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
#if __cplusplus >= 201103L
	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 8001980:	f7ff ffe4 	bl	800194c <_ZN9__gnu_cxx14__alloc_traitsISaIdEdE27_S_propagate_on_copy_assignEv>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d043      	beq.n	8001a12 <_ZNSt6vectorIdSaIdEEaSERKS1_+0xa6>
	    {
	      if (!_Alloc_traits::_S_always_equal()
 800198a:	f7ff ffe7 	bl	800195c <_ZN9__gnu_cxx14__alloc_traitsISaIdEdE15_S_always_equalEv>
 800198e:	4603      	mov	r3, r0
 8001990:	f083 0301 	eor.w	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 8001996:	2b00      	cmp	r3, #0
 8001998:	d012      	beq.n	80019c0 <_ZNSt6vectorIdSaIdEEaSERKS1_+0x54>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4618      	mov	r0, r3
 800199e:	f000 f97b 	bl	8001c98 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80019a2:	4604      	mov	r4, r0
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f981 	bl	8001cae <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4620      	mov	r0, r4
 80019b2:	f000 f987 	bl	8001cc4 <_ZStneRKSaIdES1_>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <_ZNSt6vectorIdSaIdEEaSERKS1_+0x54>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <_ZNSt6vectorIdSaIdEEaSERKS1_+0x56>
 80019c0:	2300      	movs	r3, #0
	      if (!_Alloc_traits::_S_always_equal()
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d017      	beq.n	80019f6 <_ZNSt6vectorIdSaIdEEaSERKS1_+0x8a>
	        {
		  // replacement allocator cannot free existing storage
		  this->clear();
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f988 	bl	8001cdc <_ZNSt6vectorIdSaIdEE5clearEv>
		  _M_deallocate(this->_M_impl._M_start,
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6819      	ldr	r1, [r3, #0]
				this->_M_impl._M_end_of_storage
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689a      	ldr	r2, [r3, #8]
				- this->_M_impl._M_start);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	10db      	asrs	r3, r3, #3
		  _M_deallocate(this->_M_impl._M_start,
 80019de:	461a      	mov	r2, r3
 80019e0:	f000 f98a 	bl	8001cf8 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
		  this->_M_impl._M_start = nullptr;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
		  this->_M_impl._M_finish = nullptr;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
		  this->_M_impl._M_end_of_storage = nullptr;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
		}
	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f94d 	bl	8001c98 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 80019fe:	4604      	mov	r4, r0
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f000 f953 	bl	8001cae <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f000 f986 	bl	8001d1e <_ZSt15__alloc_on_copyISaIdEEvRT_RKS1_>
				   __x._M_get_Tp_allocator());
	    }
#endif
	  const size_type __xlen = __x.size();
 8001a12:	6838      	ldr	r0, [r7, #0]
 8001a14:	f000 f991 	bl	8001d3a <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001a18:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f99d 	bl	8001d5a <_ZNKSt6vectorIdSaIdEE8capacityEv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4293      	cmp	r3, r2
 8001a26:	bf8c      	ite	hi
 8001a28:	2301      	movhi	r3, #1
 8001a2a:	2300      	movls	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d032      	beq.n	8001a98 <_ZNSt6vectorIdSaIdEEaSERKS1_+0x12c>
	    {
	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 8001a32:	6838      	ldr	r0, [r7, #0]
 8001a34:	f000 f9a1 	bl	8001d7a <_ZNKSt6vectorIdSaIdEE5beginEv>
 8001a38:	4604      	mov	r4, r0
 8001a3a:	6838      	ldr	r0, [r7, #0]
 8001a3c:	f000 f9b1 	bl	8001da2 <_ZNKSt6vectorIdSaIdEE3endEv>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4622      	mov	r2, r4
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f9bf 	bl	8001dca <_ZNSt6vectorIdSaIdEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKdS1_EEEEPdjT_S9_>
 8001a4c:	60b8      	str	r0, [r7, #8]
						   __x.end());
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681c      	ldr	r4, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 f91d 	bl	8001c98 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001a5e:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8001a60:	461a      	mov	r2, r3
 8001a62:	4629      	mov	r1, r5
 8001a64:	4620      	mov	r0, r4
 8001a66:	f000 f9cc 	bl	8001e02 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
			    - this->_M_impl._M_start);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	10db      	asrs	r3, r3, #3
	      _M_deallocate(this->_M_impl._M_start,
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f000 f93b 	bl	8001cf8 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
	      this->_M_impl._M_start = __tmp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68ba      	ldr	r2, [r7, #8]
 8001a86:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	441a      	add	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	e052      	b.n	8001b3e <_ZNSt6vectorIdSaIdEEaSERKS1_+0x1d2>
	    }
	  else if (size() >= __xlen)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f94e 	bl	8001d3a <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	bf94      	ite	ls
 8001aa6:	2301      	movls	r3, #1
 8001aa8:	2300      	movhi	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d020      	beq.n	8001af2 <_ZNSt6vectorIdSaIdEEaSERKS1_+0x186>
	    {
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8001ab0:	6838      	ldr	r0, [r7, #0]
 8001ab2:	f000 f962 	bl	8001d7a <_ZNKSt6vectorIdSaIdEE5beginEv>
 8001ab6:	4604      	mov	r4, r0
 8001ab8:	6838      	ldr	r0, [r7, #0]
 8001aba:	f000 f972 	bl	8001da2 <_ZNKSt6vectorIdSaIdEE3endEv>
 8001abe:	4605      	mov	r5, r0
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f9ac 	bl	8001e1e <_ZNSt6vectorIdSaIdEE5beginEv>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4629      	mov	r1, r5
 8001acc:	4620      	mov	r0, r4
 8001ace:	f000 f9b6 	bl	8001e3e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEENS1_IPdS6_EEET0_T_SB_SA_>
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 f9ca 	bl	8001e6e <_ZNSt6vectorIdSaIdEE3endEv>
 8001ada:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f8da 	bl	8001c98 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001ae4:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4629      	mov	r1, r5
 8001aea:	4620      	mov	r0, r4
 8001aec:	f000 f9d0 	bl	8001e90 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEvT_S7_RSaIT0_E>
 8001af0:	e025      	b.n	8001b3e <_ZNSt6vectorIdSaIdEEaSERKS1_+0x1d2>
	    }
	  else
	    {
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681d      	ldr	r5, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681c      	ldr	r4, [r3, #0]
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f91d 	bl	8001d3a <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001b00:	4603      	mov	r3, r0
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	18e1      	adds	r1, r4, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f000 f9cd 	bl	8001eac <_ZSt4copyIPdS0_ET0_T_S2_S1_>
			this->_M_impl._M_start);
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681c      	ldr	r4, [r3, #0]
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f90f 	bl	8001d3a <_ZNKSt6vectorIdSaIdEE4sizeEv>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685e      	ldr	r6, [r3, #4]
					  this->_M_impl._M_finish,
					  _M_get_Tp_allocator());
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f8b3 	bl	8001c98 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001b32:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8001b34:	4632      	mov	r2, r6
 8001b36:	4629      	mov	r1, r5
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f000 f9cf 	bl	8001edc <_ZSt22__uninitialized_copy_aIPdS0_dET0_T_S2_S1_RSaIT1_E>
	    }
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	441a      	add	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	605a      	str	r2, [r3, #4]
	}
      return *this;
 8001b4c:	687b      	ldr	r3, [r7, #4]
    }
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b56 <_ZN9__gnu_cxx13new_allocatorIdEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_ZN9__gnu_cxx13new_allocatorIdED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fe84 	bl	8001898 <_ZNSaIdED1Ev>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_ZNSt12_Vector_baseIdSaIdEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6839      	ldr	r1, [r7, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 f9a8 	bl	8001efe <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_ZNSt12_Vector_baseIdSaIdEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f890 	bl	8001cf8 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>
      }
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ffd1 	bl	8001b82 <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implD1Ev>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_ZNKSt16initializer_listIdE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <_ZNKSt16initializer_listIdE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8001c02:	b590      	push	{r4, r7, lr}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffed 	bl	8001bea <_ZNKSt16initializer_listIdE5beginEv>
 8001c10:	4604      	mov	r4, r0
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f985 	bl	8001f22 <_ZNKSt16initializer_listIdE4sizeEv>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4423      	add	r3, r4
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd90      	pop	{r4, r7, pc}

08001c26 <_ZNSt6vectorIdSaIdEE19_M_range_initializeIPKdEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
	void
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8001c26:	b590      	push	{r4, r7, lr}
 8001c28:	b087      	sub	sp, #28
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	703b      	strb	r3, [r7, #0]
			    std::forward_iterator_tag)
	{
	  const size_type __n = std::distance(__first, __last);
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	68b8      	ldr	r0, [r7, #8]
 8001c38:	f000 f97f 	bl	8001f3a <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 8001c40:	68fc      	ldr	r4, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f827 	bl	8001c98 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f000 f988 	bl	8001f64 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4619      	mov	r1, r3
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f000 f9ab 	bl	8001fb4 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8001c5e:	4602      	mov	r2, r0
	  this->_M_impl._M_start
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	441a      	add	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 f80d 	bl	8001c98 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001c7e:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8001c80:	4622      	mov	r2, r4
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	68b8      	ldr	r0, [r7, #8]
 8001c86:	f000 f9a9 	bl	8001fdc <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>
 8001c8a:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	605a      	str	r2, [r3, #4]
	}
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}

08001c98 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_ZNKSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_ZStneRKSaIdES1_>:
      friend bool
      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW
      { return true; }

      friend bool
      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
      { return false; }
 8001cce:	2300      	movs	r3, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_ZNSt6vectorIdSaIdEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f987 	bl	8001ffe <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd>
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj>:
      _M_deallocate(pointer __p, size_t __n)
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
	if (__p)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 f995 	bl	8002040 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>
      }
 8001d16:	bf00      	nop
 8001d18:	3710      	adds	r7, #16
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <_ZSt15__alloc_on_copyISaIdEEvRT_RKS1_>:
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
 8001d28:	461a      	mov	r2, r3
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f996 	bl	800205e <_ZSt18__do_alloc_on_copyISaIdEEvRT_RKS1_St17integral_constantIbLb0EE>
    }
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <_ZNKSt6vectorIdSaIdEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	10db      	asrs	r3, r3, #3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_ZNKSt6vectorIdSaIdEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	10db      	asrs	r3, r3, #3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_ZNKSt6vectorIdSaIdEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	f107 020c 	add.w	r2, r7, #12
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f96f 	bl	8002076 <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1ERKS2_>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_ZNKSt6vectorIdSaIdEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	f107 020c 	add.w	r2, r7, #12
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 f95b 	bl	8002076 <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1ERKS2_>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_ZNSt6vectorIdSaIdEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKdS1_EEEEPdjT_S9_>:
	_M_allocate_and_copy(size_type __n,
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 f8e9 	bl	8001fb4 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>
 8001de2:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff ff56 	bl	8001c98 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8001dec:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	6839      	ldr	r1, [r7, #0]
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f94f 	bl	8002096 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEPddET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8001df8:	697b      	ldr	r3, [r7, #20]
	}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8001e0e:	68b9      	ldr	r1, [r7, #8]
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f951 	bl	80020b8 <_ZSt8_DestroyIPdEvT_S1_>
    }
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_ZNSt6vectorIdSaIdEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f94f 	bl	80020d2 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEENS1_IPdS6_EEET0_T_SB_SA_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001e3e:	b590      	push	{r4, r7, lr}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f951 	bl	80020f2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEET_S8_>
 8001e50:	4604      	mov	r4, r0
 8001e52:	68b8      	ldr	r0, [r7, #8]
 8001e54:	f000 f94d 	bl	80020f2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEET_S8_>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f000 f952 	bl	8002108 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEENS1_IPdS6_EEET1_T0_SB_SA_>
 8001e64:	4603      	mov	r3, r0
    }
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd90      	pop	{r4, r7, pc}

08001e6e <_ZNSt6vectorIdSaIdEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	1d1a      	adds	r2, r3, #4
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f926 	bl	80020d2 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEdEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 f953 	bl	800214a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_>
    }
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_ZSt4copyIPdS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 f953 	bl	8002164 <_ZSt12__miter_baseIPdET_S1_>
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	68b8      	ldr	r0, [r7, #8]
 8001ec2:	f000 f94f 	bl	8002164 <_ZSt12__miter_baseIPdET_S1_>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f000 f954 	bl	800217a <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>
 8001ed2:	4603      	mov	r3, r0
    }
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd90      	pop	{r4, r7, pc}

08001edc <_ZSt22__uninitialized_copy_aIPdS0_dET0_T_S2_S1_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 f966 	bl	80021c0 <_ZSt18uninitialized_copyIPdS0_ET0_T_S2_S1_>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_ZNSt12_Vector_baseIdSaIdEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8001f08:	6839      	ldr	r1, [r7, #0]
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f96a 	bl	80021e4 <_ZNSaIdEC1ERKS_>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f000 f974 	bl	8002200 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>
	{ }
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_ZNKSt16initializer_listIdE4sizeEv>:
      size() const noexcept { return _M_len; }
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <_ZSt8distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001f3a:	b5b0      	push	{r4, r5, r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001f44:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f000 f96d 	bl	8002228 <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8001f4e:	462a      	mov	r2, r5
 8001f50:	6839      	ldr	r1, [r7, #0]
 8001f52:	4620      	mov	r0, r4
 8001f54:	f000 f972 	bl	800223c <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8001f58:	4603      	mov	r3, r0
    }
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001f64 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_>:
	return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      // Called by constructors to check initial size.
      static size_type
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
      {
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	6839      	ldr	r1, [r7, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f935 	bl	80021e4 <_ZNSaIdEC1ERKS_>
 8001f7a:	f107 030c 	add.w	r3, r7, #12
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 f96c 	bl	800225c <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>
 8001f84:	4602      	mov	r2, r0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	bf8c      	ite	hi
 8001f8c:	2301      	movhi	r3, #1
 8001f8e:	2300      	movls	r3, #0
 8001f90:	b2dc      	uxtb	r4, r3
 8001f92:	f107 030c 	add.w	r3, r7, #12
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fc7e 	bl	8001898 <_ZNSaIdED1Ev>
 8001f9c:	2c00      	cmp	r4, #0
 8001f9e:	d002      	beq.n	8001fa6 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x42>
	  __throw_length_error(
 8001fa0:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <_ZNSt6vectorIdSaIdEE17_S_check_init_lenEjRKS0_+0x4c>)
 8001fa2:	f00b fa1d 	bl	800d3e0 <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
 8001fa6:	687b      	ldr	r3, [r7, #4]
      }
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd90      	pop	{r4, r7, pc}
 8001fb0:	0800f7e0 	.word	0x0800f7e0

08001fb4 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x1e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6839      	ldr	r1, [r7, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f961 	bl	8002290 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	e000      	b.n	8001fd4 <_ZNSt12_Vector_baseIdSaIdEE11_M_allocateEj+0x20>
 8001fd2:	2300      	movs	r3, #0
      }
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_ZSt22__uninitialized_copy_aIPKdPddET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	68b9      	ldr	r1, [r7, #8]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f95d 	bl	80022ae <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8001ffe:	b590      	push	{r4, r7, lr}
 8002000:	b085      	sub	sp, #20
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	10db      	asrs	r3, r3, #3
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00e      	beq.n	8002038 <_ZNSt6vectorIdSaIdEE15_M_erase_at_endEPd+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fe39 	bl	8001c98 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002026:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8002028:	461a      	mov	r2, r3
 800202a:	4621      	mov	r1, r4
 800202c:	6838      	ldr	r0, [r7, #0]
 800202e:	f7ff fee8 	bl	8001e02 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	bd90      	pop	{r4, r7, pc}

08002040 <_ZNSt16allocator_traitsISaIdEE10deallocateERS0_Pdj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68b9      	ldr	r1, [r7, #8]
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f93e 	bl	80022d2 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <_ZSt18__do_alloc_on_copyISaIdEEvRT_RKS1_St17integral_constantIbLb0EE>:
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	713a      	strb	r2, [r7, #4]
    { }
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <_ZN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEPddET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f91f 	bl	80022ec <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEPdET0_T_SA_S9_>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <_ZSt8_DestroyIPdEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80020c2:	6839      	ldr	r1, [r7, #0]
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f923 	bl	8002310 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>
    }
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
 80020da:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEET_S8_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEENS1_IPdS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002108:	b5b0      	push	{r4, r5, r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f906 	bl	8002326 <_ZSt12__niter_baseIPKdSt6vectorIdSaIdEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800211a:	4604      	mov	r4, r0
 800211c:	68b8      	ldr	r0, [r7, #8]
 800211e:	f000 f902 	bl	8002326 <_ZSt12__niter_baseIPKdSt6vectorIdSaIdEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002122:	4605      	mov	r5, r0
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f90c 	bl	8002342 <_ZSt12__niter_baseIPdSt6vectorIdSaIdEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	4629      	mov	r1, r5
 8002130:	4620      	mov	r0, r4
 8002132:	f000 f914 	bl	800235e <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>
 8002136:	4603      	mov	r3, r0
 8002138:	4619      	mov	r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f921 	bl	8002382 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEES2_ET_S7_T0_>
 8002140:	4603      	mov	r3, r0
    }
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bdb0      	pop	{r4, r5, r7, pc}

0800214a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8002154:	6839      	ldr	r1, [r7, #0]
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f92a 	bl	80023b0 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S9_>
    }
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_ZSt12__miter_baseIPdET_S1_>:
    __miter_base(_Iterator __it)
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4618      	mov	r0, r3
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800217a:	b5b0      	push	{r4, r5, r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f91d 	bl	80023c6 <_ZSt12__niter_baseIPdET_S1_>
 800218c:	4604      	mov	r4, r0
 800218e:	68b8      	ldr	r0, [r7, #8]
 8002190:	f000 f919 	bl	80023c6 <_ZSt12__niter_baseIPdET_S1_>
 8002194:	4605      	mov	r5, r0
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4618      	mov	r0, r3
 800219a:	f000 f914 	bl	80023c6 <_ZSt12__niter_baseIPdET_S1_>
 800219e:	4603      	mov	r3, r0
 80021a0:	461a      	mov	r2, r3
 80021a2:	4629      	mov	r1, r5
 80021a4:	4620      	mov	r0, r4
 80021a6:	f000 f919 	bl	80023dc <_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_>
 80021aa:	4602      	mov	r2, r0
 80021ac:	1d3b      	adds	r3, r7, #4
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f925 	bl	8002400 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 80021b6:	4603      	mov	r3, r0
    }
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bdb0      	pop	{r4, r5, r7, pc}

080021c0 <_ZSt18uninitialized_copyIPdS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80021cc:	2301      	movs	r3, #1
 80021ce:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 f91f 	bl	8002418 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPdS2_EET0_T_S4_S3_>
 80021da:	4603      	mov	r3, r0
    }
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <_ZNSaIdEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f921 	bl	8002438 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <_ZNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
	{ }
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_ZSt19__iterator_categoryIPKdENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_ZSt10__distanceIPKdENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	10db      	asrs	r3, r3, #3
    }
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_ZNSt6vectorIdSaIdEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8002264:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002268:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f8f0 	bl	8002450 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>
 8002270:	4603      	mov	r3, r0
 8002272:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002274:	f107 0208 	add.w	r2, r7, #8
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f8f2 	bl	8002468 <_ZSt3minIjERKT_S2_S2_>
 8002284:	4603      	mov	r3, r0
 8002286:	681b      	ldr	r3, [r3, #0]
      }
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <_ZNSt16allocator_traitsISaIdEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800229a:	2200      	movs	r2, #0
 800229c:	6839      	ldr	r1, [r7, #0]
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f8f6 	bl	8002490 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <_ZSt18uninitialized_copyIPKdPdET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80022ba:	2301      	movs	r3, #1
 80022bc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f902 	bl	80024cc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>
 80022c8:	4603      	mov	r3, r0
    }
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	60f8      	str	r0, [r7, #12]
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80022de:	68b8      	ldr	r0, [r7, #8]
 80022e0:	f00b f868 	bl	800d3b4 <_ZdlPv>
      }
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEPdET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80022f8:	2301      	movs	r3, #1
 80022fa:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68b9      	ldr	r1, [r7, #8]
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f8f3 	bl	80024ec <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEPdEET0_T_SC_SB_>
 8002306:	4603      	mov	r3, r0
    }
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_ZNSt12_Destroy_auxILb1EE9__destroyIPdEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_ZSt12__niter_baseIPKdSt6vectorIdSaIdEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it.base(); }
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	4618      	mov	r0, r3
 8002332:	f000 f8eb 	bl	800250c <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>
 8002336:	4603      	mov	r3, r0
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_ZSt12__niter_baseIPdSt6vectorIdSaIdEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f8e8 	bl	8002522 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>
 8002352:	4603      	mov	r3, r0
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800236a:	2301      	movs	r3, #1
 800236c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f8e0 	bl	8002538 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 8002378:	4603      	mov	r3, r0
    }
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEES2_ET_S7_T0_>:
    __niter_wrap(_From __from, _To __res)
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ffd8 	bl	8002342 <_ZSt12__niter_baseIPdSt6vectorIdSaIdEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 8002392:	4602      	mov	r2, r0
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	10db      	asrs	r3, r3, #3
 800239a:	461a      	mov	r2, r3
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f8e6 	bl	8002572 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEplEi>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEEEEvT_S9_>:
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 80023e8:	2301      	movs	r3, #1
 80023ea:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	68b9      	ldr	r1, [r7, #8]
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f8a1 	bl	8002538 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 80023f6:	4603      	mov	r3, r0
    }
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
    { return __res; }
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPdS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f7ff fd3f 	bl	8001eac <_ZSt4copyIPdS0_ET0_T_S2_S1_>
 800242e:	4603      	mov	r3, r0
 8002430:	4618      	mov	r0, r3
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <_ZN9__gnu_cxx13new_allocatorIdEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <_ZNSt16allocator_traitsISaIdEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a) noexcept
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f8a2 	bl	80025a2 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 800245e:	4603      	mov	r3, r0
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d201      	bcs.n	8002482 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	e000      	b.n	8002484 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002482:	687b      	ldr	r3, [r7, #4]
    }
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 f880 	bl	80025a2 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4293      	cmp	r3, r2
 80024a8:	bf8c      	ite	hi
 80024aa:	2301      	movhi	r3, #1
 80024ac:	2300      	movls	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <_ZN9__gnu_cxx13new_allocatorIdE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80024b4:	f00a ff91 	bl	800d3da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4618      	mov	r0, r3
 80024be:	f00a ff7b 	bl	800d3b8 <_Znwj>
 80024c2:	4603      	mov	r3, r0
      }
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKdPdEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f86c 	bl	80025ba <_ZSt4copyIPKdPdET0_T_S4_S3_>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEPdEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	68b9      	ldr	r1, [r7, #8]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f874 	bl	80025ea <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEPdET0_T_SA_S9_>
 8002502:	4603      	mov	r3, r0
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZNK9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	10db      	asrs	r3, r3, #3
 800254c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	461a      	mov	r2, r3
 800255a:	68f9      	ldr	r1, [r7, #12]
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f00d f805 	bl	800f56c <memmove>
	  return __result + _Num;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4413      	add	r3, r2
	}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <_ZNK9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	f107 020c 	add.w	r2, r7, #12
 800258c:	f107 0308 	add.w	r3, r7, #8
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fd9d 	bl	80020d2 <_ZN9__gnu_cxx17__normal_iteratorIPdSt6vectorIdSaIdEEEC1ERKS1_>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80025aa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
#else
	return size_t(-1) / sizeof(_Tp);
#endif
      }
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_ZSt4copyIPKdPdET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 80025ba:	b590      	push	{r4, r7, lr}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f827 	bl	800261a <_ZSt12__miter_baseIPKdET_S2_>
 80025cc:	4604      	mov	r4, r0
 80025ce:	68b8      	ldr	r0, [r7, #8]
 80025d0:	f000 f823 	bl	800261a <_ZSt12__miter_baseIPKdET_S2_>
 80025d4:	4603      	mov	r3, r0
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4619      	mov	r1, r3
 80025da:	4620      	mov	r0, r4
 80025dc:	f000 f828 	bl	8002630 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>
 80025e0:	4603      	mov	r3, r0
    }
 80025e2:	4618      	mov	r0, r3
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd90      	pop	{r4, r7, pc}

080025ea <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEPdET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 80025ea:	b590      	push	{r4, r7, lr}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7ff fd7b 	bl	80020f2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEET_S8_>
 80025fc:	4604      	mov	r4, r0
 80025fe:	68b8      	ldr	r0, [r7, #8]
 8002600:	f7ff fd77 	bl	80020f2 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEET_S8_>
 8002604:	4603      	mov	r3, r0
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4619      	mov	r1, r3
 800260a:	4620      	mov	r0, r4
 800260c:	f000 f833 	bl	8002676 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEPdET1_T0_SA_S9_>
 8002610:	4603      	mov	r3, r0
    }
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	bd90      	pop	{r4, r7, pc}

0800261a <_ZSt12__miter_baseIPKdET_S2_>:
    __miter_base(_Iterator __it)
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4618      	mov	r0, r3
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <_ZSt14__copy_move_a2ILb0EPKdPdET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002630:	b5b0      	push	{r4, r5, r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f83d 	bl	80026bc <_ZSt12__niter_baseIPKdET_S2_>
 8002642:	4604      	mov	r4, r0
 8002644:	68b8      	ldr	r0, [r7, #8]
 8002646:	f000 f839 	bl	80026bc <_ZSt12__niter_baseIPKdET_S2_>
 800264a:	4605      	mov	r5, r0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff feb9 	bl	80023c6 <_ZSt12__niter_baseIPdET_S1_>
 8002654:	4603      	mov	r3, r0
 8002656:	461a      	mov	r2, r3
 8002658:	4629      	mov	r1, r5
 800265a:	4620      	mov	r0, r4
 800265c:	f7ff fe7f 	bl	800235e <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>
 8002660:	4602      	mov	r2, r0
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff feca 	bl	8002400 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 800266c:	4603      	mov	r3, r0
    }
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bdb0      	pop	{r4, r5, r7, pc}

08002676 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKdSt6vectorIdSaIdEEEEPdET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8002676:	b5b0      	push	{r4, r5, r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7ff fe4f 	bl	8002326 <_ZSt12__niter_baseIPKdSt6vectorIdSaIdEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002688:	4604      	mov	r4, r0
 800268a:	68b8      	ldr	r0, [r7, #8]
 800268c:	f7ff fe4b 	bl	8002326 <_ZSt12__niter_baseIPKdSt6vectorIdSaIdEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8002690:	4605      	mov	r5, r0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fe96 	bl	80023c6 <_ZSt12__niter_baseIPdET_S1_>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	4629      	mov	r1, r5
 80026a0:	4620      	mov	r0, r4
 80026a2:	f7ff fe5c 	bl	800235e <_ZSt13__copy_move_aILb0EPKdPdET1_T0_S4_S3_>
 80026a6:	4602      	mov	r2, r0
 80026a8:	1d3b      	adds	r3, r7, #4
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fea7 	bl	8002400 <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 80026b2:	4603      	mov	r3, r0
    }
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bdb0      	pop	{r4, r5, r7, pc}

080026bc <_ZSt12__niter_baseIPKdET_S2_>:
    __niter_base(_Iterator __it)
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <_Z41__static_initialization_and_destruction_0ii>:
Point2D Motor::getpos(){
	return pos;
}
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b0a0      	sub	sp, #128	; 0x80
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	f040 8083 	bne.w	80027ec <_Z41__static_initialization_and_destruction_0ii+0x118>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d17d      	bne.n	80027ec <_Z41__static_initialization_and_destruction_0ii+0x118>
Motor mtr_;
 80026f0:	4849      	ldr	r0, [pc, #292]	; (8002818 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80026f2:	f7fe fcdc 	bl	80010ae <_ZN9kinematic5MotorC1Ev>
std::vector<double>e{0,0,0};
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800271a:	f107 0310 	add.w	r3, r7, #16
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	2303      	movs	r3, #3
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff f8a9 	bl	8001880 <_ZNSaIdEC1Ev>
 800272e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002732:	f107 0208 	add.w	r2, r7, #8
 8002736:	ca06      	ldmia	r2, {r1, r2}
 8002738:	4838      	ldr	r0, [pc, #224]	; (800281c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800273a:	f7ff f8b9 	bl	80018b0 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 800273e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f8a8 	bl	8001898 <_ZNSaIdED1Ev>
std::vector<double>prev_e{0,0,0};
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800276c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002770:	633b      	str	r3, [r7, #48]	; 0x30
 8002772:	2303      	movs	r3, #3
 8002774:	637b      	str	r3, [r7, #52]	; 0x34
 8002776:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff f880 	bl	8001880 <_ZNSaIdEC1Ev>
 8002780:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002784:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002788:	ca06      	ldmia	r2, {r1, r2}
 800278a:	4825      	ldr	r0, [pc, #148]	; (8002820 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 800278c:	f7ff f890 	bl	80018b0 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 8002790:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f87f 	bl	8001898 <_ZNSaIdED1Ev>
std::vector<double> v{0,0,0};
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80027be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80027c4:	2303      	movs	r3, #3
 80027c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff f857 	bl	8001880 <_ZNSaIdEC1Ev>
 80027d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027d6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80027da:	ca06      	ldmia	r2, {r1, r2}
 80027dc:	4811      	ldr	r0, [pc, #68]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80027de:	f7ff f867 	bl	80018b0 <_ZNSt6vectorIdSaIdEEC1ESt16initializer_listIdERKS0_>
 80027e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f856 	bl	8001898 <_ZNSaIdED1Ev>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10d      	bne.n	800280e <_Z41__static_initialization_and_destruction_0ii+0x13a>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d108      	bne.n	800280e <_Z41__static_initialization_and_destruction_0ii+0x13a>
 80027fc:	4809      	ldr	r0, [pc, #36]	; (8002824 <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80027fe:	f000 f813 	bl	8002828 <_ZNSt6vectorIdSaIdEED1Ev>
std::vector<double>prev_e{0,0,0};
 8002802:	4807      	ldr	r0, [pc, #28]	; (8002820 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8002804:	f000 f810 	bl	8002828 <_ZNSt6vectorIdSaIdEED1Ev>
std::vector<double>e{0,0,0};
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <_Z41__static_initialization_and_destruction_0ii+0x148>)
 800280a:	f000 f80d 	bl	8002828 <_ZNSt6vectorIdSaIdEED1Ev>
}
 800280e:	bf00      	nop
 8002810:	3780      	adds	r7, #128	; 0x80
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000200 	.word	0x20000200
 800281c:	20000254 	.word	0x20000254
 8002820:	20000260 	.word	0x20000260
 8002824:	2000026c 	.word	0x2000026c

08002828 <_ZNSt6vectorIdSaIdEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002828:	b5b0      	push	{r4, r5, r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681c      	ldr	r4, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fa2c 	bl	8001c98 <_ZNSt12_Vector_baseIdSaIdEE19_M_get_Tp_allocatorEv>
 8002840:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002842:	461a      	mov	r2, r3
 8002844:	4629      	mov	r1, r5
 8002846:	4620      	mov	r0, r4
 8002848:	f7ff fadb 	bl	8001e02 <_ZSt8_DestroyIPddEvT_S1_RSaIT0_E>
      }
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f9b2 	bl	8001bb8 <_ZNSt12_Vector_baseIdSaIdEED1Ev>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bdb0      	pop	{r4, r5, r7, pc}

0800285e <_GLOBAL__sub_I_mtr_>:
 800285e:	b580      	push	{r7, lr}
 8002860:	af00      	add	r7, sp, #0
 8002862:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002866:	2001      	movs	r0, #1
 8002868:	f7ff ff34 	bl	80026d4 <_Z41__static_initialization_and_destruction_0ii>
 800286c:	bd80      	pop	{r7, pc}

0800286e <_GLOBAL__sub_D_mtr_>:
 800286e:	b580      	push	{r7, lr}
 8002870:	af00      	add	r7, sp, #0
 8002872:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002876:	2000      	movs	r0, #0
 8002878:	f7ff ff2c 	bl	80026d4 <_Z41__static_initialization_and_destruction_0ii>
 800287c:	bd80      	pop	{r7, pc}

0800287e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002882:	f001 fdbd 	bl	8004400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002886:	f000 f81b 	bl	80028c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800288a:	f000 fbcf 	bl	800302c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800288e:	f000 fb57 	bl	8002f40 <_ZL11MX_DMA_Initv>
  MX_TIM1_Init();
 8002892:	f000 f941 	bl	8002b18 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8002896:	f000 fa41 	bl	8002d1c <_ZL12MX_TIM2_Initv>
  MX_USART3_UART_Init();
 800289a:	f000 fb23 	bl	8002ee4 <_ZL19MX_USART3_UART_Initv>
  MX_UART4_Init();
 800289e:	f000 fa97 	bl	8002dd0 <_ZL13MX_UART4_Initv>
  MX_USB_DEVICE_Init();
 80028a2:	f00a f88d 	bl	800c9c0 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 80028a6:	f000 faef 	bl	8002e88 <_ZL19MX_USART2_UART_Initv>
  MX_ADC1_Init();
 80028aa:	f000 f87d 	bl	80029a8 <_ZL12MX_ADC1_Initv>
  MX_ADC2_Init();
 80028ae:	f000 f8d7 	bl	8002a60 <_ZL12MX_ADC2_Initv>
  MX_USART1_UART_Init();
 80028b2:	f000 fabb 	bl	8002e2c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
  init();
 80028b6:	f000 fd23 	bl	8003300 <_Z4initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80028ba:	f000 fde9 	bl	8003490 <_Z4loopv>
 80028be:	e7fc      	b.n	80028ba <main+0x3c>

080028c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b094      	sub	sp, #80	; 0x50
 80028c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028c6:	f107 0320 	add.w	r3, r7, #32
 80028ca:	2230      	movs	r2, #48	; 0x30
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f00c fe66 	bl	800f5a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028d4:	f107 030c 	add.w	r3, r7, #12
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <_Z18SystemClock_Configv+0xe0>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	4a2c      	ldr	r2, [pc, #176]	; (80029a0 <_Z18SystemClock_Configv+0xe0>)
 80028ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f2:	6413      	str	r3, [r2, #64]	; 0x40
 80028f4:	4b2a      	ldr	r3, [pc, #168]	; (80029a0 <_Z18SystemClock_Configv+0xe0>)
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002900:	2300      	movs	r3, #0
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <_Z18SystemClock_Configv+0xe4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a26      	ldr	r2, [pc, #152]	; (80029a4 <_Z18SystemClock_Configv+0xe4>)
 800290a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b24      	ldr	r3, [pc, #144]	; (80029a4 <_Z18SystemClock_Configv+0xe4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800291c:	2301      	movs	r3, #1
 800291e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002920:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002926:	2302      	movs	r3, #2
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800292a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002930:	2304      	movs	r3, #4
 8002932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002934:	23a8      	movs	r3, #168	; 0xa8
 8002936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002938:	2302      	movs	r3, #2
 800293a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800293c:	2307      	movs	r3, #7
 800293e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002940:	f107 0320 	add.w	r3, r7, #32
 8002944:	4618      	mov	r0, r3
 8002946:	f004 fa43 	bl	8006dd0 <HAL_RCC_OscConfig>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf14      	ite	ne
 8002950:	2301      	movne	r3, #1
 8002952:	2300      	moveq	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800295a:	f000 fca5 	bl	80032a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800295e:	230f      	movs	r3, #15
 8002960:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002962:	2302      	movs	r3, #2
 8002964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800296a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800296e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002974:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	2105      	movs	r1, #5
 800297c:	4618      	mov	r0, r3
 800297e:	f004 fc9f 	bl	80072c0 <HAL_RCC_ClockConfig>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf14      	ite	ne
 8002988:	2301      	movne	r3, #1
 800298a:	2300      	moveq	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8002992:	f000 fc89 	bl	80032a8 <Error_Handler>
  }
}
 8002996:	bf00      	nop
 8002998:	3750      	adds	r7, #80	; 0x50
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40007000 	.word	0x40007000

080029a8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029ae:	463b      	mov	r3, r7
 80029b0:	2200      	movs	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <_ZL12MX_ADC1_Initv+0xb0>)
 80029be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 80029c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029c8:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80029ce:	4b21      	ldr	r3, [pc, #132]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029d4:	4b1f      	ldr	r3, [pc, #124]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 80029ea:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <_ZL12MX_ADC1_Initv+0xb4>)
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80029fa:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a02:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a08:	4812      	ldr	r0, [pc, #72]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 8002a0a:	f001 fd8f 	bl	800452c <HAL_ADC_Init>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 8002a1e:	f000 fc43 	bl	80032a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002a22:	230a      	movs	r3, #10
 8002a24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a2e:	463b      	mov	r3, r7
 8002a30:	4619      	mov	r1, r3
 8002a32:	4808      	ldr	r0, [pc, #32]	; (8002a54 <_ZL12MX_ADC1_Initv+0xac>)
 8002a34:	f001 ff1c 	bl	8004870 <HAL_ADC_ConfigChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8002a48:	f000 fc2e 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a4c:	bf00      	nop
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000278 	.word	0x20000278
 8002a58:	40012000 	.word	0x40012000
 8002a5c:	0f000001 	.word	0x0f000001

08002a60 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a66:	463b      	mov	r3, r7
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002a72:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002a74:	4a26      	ldr	r2, [pc, #152]	; (8002b10 <_ZL12MX_ADC2_Initv+0xb0>)
 8002a76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a78:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a7e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a80:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002a86:	4b21      	ldr	r3, [pc, #132]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002a8c:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a92:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002aa2:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <_ZL12MX_ADC2_Initv+0xb4>)
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002aac:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002ac0:	4812      	ldr	r0, [pc, #72]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002ac2:	f001 fd33 	bl	800452c <HAL_ADC_Init>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <_ZL12MX_ADC2_Initv+0x7a>
  {
    Error_Handler();
 8002ad6:	f000 fbe7 	bl	80032a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002ada:	230d      	movs	r3, #13
 8002adc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ae6:	463b      	mov	r3, r7
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4808      	ldr	r0, [pc, #32]	; (8002b0c <_ZL12MX_ADC2_Initv+0xac>)
 8002aec:	f001 fec0 	bl	8004870 <HAL_ADC_ConfigChannel>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <_ZL12MX_ADC2_Initv+0xa4>
  {
    Error_Handler();
 8002b00:	f000 fbd2 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200002c0 	.word	0x200002c0
 8002b10:	40012100 	.word	0x40012100
 8002b14:	0f000001 	.word	0x0f000001

08002b18 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b096      	sub	sp, #88	; 0x58
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	60da      	str	r2, [r3, #12]
 8002b44:	611a      	str	r2, [r3, #16]
 8002b46:	615a      	str	r2, [r3, #20]
 8002b48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	2100      	movs	r1, #0
 8002b50:	4618      	mov	r0, r3
 8002b52:	f00c fd25 	bl	800f5a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b56:	4b6f      	ldr	r3, [pc, #444]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002b58:	4a6f      	ldr	r2, [pc, #444]	; (8002d18 <_ZL12MX_TIM1_Initv+0x200>)
 8002b5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 671;
 8002b5c:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002b5e:	f240 229f 	movw	r2, #671	; 0x29f
 8002b62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b64:	4b6b      	ldr	r3, [pc, #428]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8002b6a:	4b6a      	ldr	r3, [pc, #424]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002b6c:	22f9      	movs	r2, #249	; 0xf9
 8002b6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b70:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b76:	4b67      	ldr	r3, [pc, #412]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b7c:	4b65      	ldr	r3, [pc, #404]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b82:	4864      	ldr	r0, [pc, #400]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002b84:	f004 fd98 	bl	80076b8 <HAL_TIM_Base_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	bf14      	ite	ne
 8002b8e:	2301      	movne	r3, #1
 8002b90:	2300      	moveq	r3, #0
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <_ZL12MX_TIM1_Initv+0x84>
  {
    Error_Handler();
 8002b98:	f000 fb86 	bl	80032a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ba2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	485a      	ldr	r0, [pc, #360]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002baa:	f005 f8bf 	bl	8007d2c <HAL_TIM_ConfigClockSource>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <_ZL12MX_TIM1_Initv+0xaa>
  {
    Error_Handler();
 8002bbe:	f000 fb73 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bc2:	4854      	ldr	r0, [pc, #336]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002bc4:	f004 fdc7 	bl	8007756 <HAL_TIM_PWM_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf14      	ite	ne
 8002bce:	2301      	movne	r3, #1
 8002bd0:	2300      	moveq	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <_ZL12MX_TIM1_Initv+0xc4>
  {
    Error_Handler();
 8002bd8:	f000 fb66 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002be4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002be8:	4619      	mov	r1, r3
 8002bea:	484a      	ldr	r0, [pc, #296]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002bec:	f005 fca8 	bl	8008540 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bf14      	ite	ne
 8002bf6:	2301      	movne	r3, #1
 8002bf8:	2300      	moveq	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <_ZL12MX_TIM1_Initv+0xec>
  {
    Error_Handler();
 8002c00:	f000 fb52 	bl	80032a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c04:	2360      	movs	r3, #96	; 0x60
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c10:	2300      	movs	r3, #0
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c24:	2200      	movs	r2, #0
 8002c26:	4619      	mov	r1, r3
 8002c28:	483a      	ldr	r0, [pc, #232]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002c2a:	f004 ffbd 	bl	8007ba8 <HAL_TIM_PWM_ConfigChannel>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <_ZL12MX_TIM1_Initv+0x12a>
  {
    Error_Handler();
 8002c3e:	f000 fb33 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c46:	2204      	movs	r2, #4
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4832      	ldr	r0, [pc, #200]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002c4c:	f004 ffac 	bl	8007ba8 <HAL_TIM_PWM_ConfigChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	bf14      	ite	ne
 8002c56:	2301      	movne	r3, #1
 8002c58:	2300      	moveq	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8002c60:	f000 fb22 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c68:	2208      	movs	r2, #8
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4829      	ldr	r0, [pc, #164]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002c6e:	f004 ff9b 	bl	8007ba8 <HAL_TIM_PWM_ConfigChannel>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	bf14      	ite	ne
 8002c78:	2301      	movne	r3, #1
 8002c7a:	2300      	moveq	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8002c82:	f000 fb11 	bl	80032a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c8a:	220c      	movs	r2, #12
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4821      	ldr	r0, [pc, #132]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002c90:	f004 ff8a 	bl	8007ba8 <HAL_TIM_PWM_ConfigChannel>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf14      	ite	ne
 8002c9a:	2301      	movne	r3, #1
 8002c9c:	2300      	moveq	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 8002ca4:	f000 fb00 	bl	80032a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4812      	ldr	r0, [pc, #72]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002ccc:	f005 fcb4 	bl	8008638 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	bf14      	ite	ne
 8002cd6:	2301      	movne	r3, #1
 8002cd8:	2300      	moveq	r3, #0
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <_ZL12MX_TIM1_Initv+0x1cc>
  {
    Error_Handler();
 8002ce0:	f000 fae2 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	480b      	ldr	r0, [pc, #44]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002ce8:	f004 fd8e 	bl	8007808 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002cec:	2104      	movs	r1, #4
 8002cee:	4809      	ldr	r0, [pc, #36]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002cf0:	f004 fd8a 	bl	8007808 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002cf4:	2108      	movs	r1, #8
 8002cf6:	4807      	ldr	r0, [pc, #28]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002cf8:	f004 fd86 	bl	8007808 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002cfc:	210c      	movs	r1, #12
 8002cfe:	4805      	ldr	r0, [pc, #20]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002d00:	f004 fd82 	bl	8007808 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002d04:	4803      	ldr	r0, [pc, #12]	; (8002d14 <_ZL12MX_TIM1_Initv+0x1fc>)
 8002d06:	f000 fecf 	bl	8003aa8 <HAL_TIM_MspPostInit>

}
 8002d0a:	bf00      	nop
 8002d0c:	3758      	adds	r7, #88	; 0x58
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200003c8 	.word	0x200003c8
 8002d18:	40010000 	.word	0x40010000

08002d1c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d22:	f107 0308 	add.w	r3, r7, #8
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d30:	463b      	mov	r3, r7
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d38:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <_ZL12MX_TIM2_Initv+0xb0>)
 8002d3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 23;
 8002d40:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <_ZL12MX_TIM2_Initv+0xb0>)
 8002d42:	2217      	movs	r2, #23
 8002d44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d46:	4b21      	ldr	r3, [pc, #132]	; (8002dcc <_ZL12MX_TIM2_Initv+0xb0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 34;
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <_ZL12MX_TIM2_Initv+0xb0>)
 8002d4e:	2222      	movs	r2, #34	; 0x22
 8002d50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <_ZL12MX_TIM2_Initv+0xb0>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d58:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <_ZL12MX_TIM2_Initv+0xb0>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d5e:	481b      	ldr	r0, [pc, #108]	; (8002dcc <_ZL12MX_TIM2_Initv+0xb0>)
 8002d60:	f004 fcaa 	bl	80076b8 <HAL_TIM_Base_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <_ZL12MX_TIM2_Initv+0x5c>
  {
    Error_Handler();
 8002d74:	f000 fa98 	bl	80032a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d7e:	f107 0308 	add.w	r3, r7, #8
 8002d82:	4619      	mov	r1, r3
 8002d84:	4811      	ldr	r0, [pc, #68]	; (8002dcc <_ZL12MX_TIM2_Initv+0xb0>)
 8002d86:	f004 ffd1 	bl	8007d2c <HAL_TIM_ConfigClockSource>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <_ZL12MX_TIM2_Initv+0x82>
  {
    Error_Handler();
 8002d9a:	f000 fa85 	bl	80032a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002da6:	463b      	mov	r3, r7
 8002da8:	4619      	mov	r1, r3
 8002daa:	4808      	ldr	r0, [pc, #32]	; (8002dcc <_ZL12MX_TIM2_Initv+0xb0>)
 8002dac:	f005 fbc8 	bl	8008540 <HAL_TIMEx_MasterConfigSynchronization>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <_ZL12MX_TIM2_Initv+0xa8>
  {
    Error_Handler();
 8002dc0:	f000 fa72 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dc4:	bf00      	nop
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000410 	.word	0x20000410

08002dd0 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002dd4:	4b13      	ldr	r3, [pc, #76]	; (8002e24 <_ZL13MX_UART4_Initv+0x54>)
 8002dd6:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <_ZL13MX_UART4_Initv+0x58>)
 8002dd8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002dda:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <_ZL13MX_UART4_Initv+0x54>)
 8002ddc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002de0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002de2:	4b10      	ldr	r3, [pc, #64]	; (8002e24 <_ZL13MX_UART4_Initv+0x54>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <_ZL13MX_UART4_Initv+0x54>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <_ZL13MX_UART4_Initv+0x54>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <_ZL13MX_UART4_Initv+0x54>)
 8002df6:	220c      	movs	r2, #12
 8002df8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <_ZL13MX_UART4_Initv+0x54>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <_ZL13MX_UART4_Initv+0x54>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e06:	4807      	ldr	r0, [pc, #28]	; (8002e24 <_ZL13MX_UART4_Initv+0x54>)
 8002e08:	f005 fc7c 	bl	8008704 <HAL_UART_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <_ZL13MX_UART4_Initv+0x50>
  {
    Error_Handler();
 8002e1c:	f000 fa44 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000458 	.word	0x20000458
 8002e28:	40004c00 	.word	0x40004c00

08002e2c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e32:	4a14      	ldr	r2, [pc, #80]	; (8002e84 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e36:	4b12      	ldr	r3, [pc, #72]	; (8002e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e44:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e50:	4b0b      	ldr	r3, [pc, #44]	; (8002e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e52:	220c      	movs	r2, #12
 8002e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e62:	4807      	ldr	r0, [pc, #28]	; (8002e80 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002e64:	f005 fc4e 	bl	8008704 <HAL_UART_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	bf14      	ite	ne
 8002e6e:	2301      	movne	r3, #1
 8002e70:	2300      	moveq	r3, #0
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002e78:	f000 fa16 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	2000049c 	.word	0x2000049c
 8002e84:	40011000 	.word	0x40011000

08002e88 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e8c:	4b13      	ldr	r3, [pc, #76]	; (8002edc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e8e:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e92:	4b12      	ldr	r3, [pc, #72]	; (8002edc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002eae:	220c      	movs	r2, #12
 8002eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eb2:	4b0a      	ldr	r3, [pc, #40]	; (8002edc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ebe:	4807      	ldr	r0, [pc, #28]	; (8002edc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ec0:	f005 fc20 	bl	8008704 <HAL_UART_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002ed4:	f000 f9e8 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200004e0 	.word	0x200004e0
 8002ee0:	40004400 	.word	0x40004400

08002ee4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002eea:	4a14      	ldr	r2, [pc, #80]	; (8002f3c <_ZL19MX_USART3_UART_Initv+0x58>)
 8002eec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002ef0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	; (8002f38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f1a:	4807      	ldr	r0, [pc, #28]	; (8002f38 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002f1c:	f005 fbf2 	bl	8008704 <HAL_UART_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	bf14      	ite	ne
 8002f26:	2301      	movne	r3, #1
 8002f28:	2300      	moveq	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 8002f30:	f000 f9ba 	bl	80032a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000524 	.word	0x20000524
 8002f3c:	40004800 	.word	0x40004800

08002f40 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <_ZL11MX_DMA_Initv+0xe8>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	4a36      	ldr	r2, [pc, #216]	; (8003028 <_ZL11MX_DMA_Initv+0xe8>)
 8002f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f54:	6313      	str	r3, [r2, #48]	; 0x30
 8002f56:	4b34      	ldr	r3, [pc, #208]	; (8003028 <_ZL11MX_DMA_Initv+0xe8>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f5e:	607b      	str	r3, [r7, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	4b30      	ldr	r3, [pc, #192]	; (8003028 <_ZL11MX_DMA_Initv+0xe8>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a2f      	ldr	r2, [pc, #188]	; (8003028 <_ZL11MX_DMA_Initv+0xe8>)
 8002f6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b2d      	ldr	r3, [pc, #180]	; (8003028 <_ZL11MX_DMA_Initv+0xe8>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f7a:	603b      	str	r3, [r7, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	200c      	movs	r0, #12
 8002f84:	f001 ff77 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002f88:	200c      	movs	r0, #12
 8002f8a:	f001 ff90 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	200d      	movs	r0, #13
 8002f94:	f001 ff6f 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002f98:	200d      	movs	r0, #13
 8002f9a:	f001 ff88 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	200e      	movs	r0, #14
 8002fa4:	f001 ff67 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002fa8:	200e      	movs	r0, #14
 8002faa:	f001 ff80 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	200f      	movs	r0, #15
 8002fb4:	f001 ff5f 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002fb8:	200f      	movs	r0, #15
 8002fba:	f001 ff78 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2010      	movs	r0, #16
 8002fc4:	f001 ff57 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002fc8:	2010      	movs	r0, #16
 8002fca:	f001 ff70 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	2011      	movs	r0, #17
 8002fd4:	f001 ff4f 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002fd8:	2011      	movs	r0, #17
 8002fda:	f001 ff68 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	2038      	movs	r0, #56	; 0x38
 8002fe4:	f001 ff47 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002fe8:	2038      	movs	r0, #56	; 0x38
 8002fea:	f001 ff60 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	203a      	movs	r0, #58	; 0x3a
 8002ff4:	f001 ff3f 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002ff8:	203a      	movs	r0, #58	; 0x3a
 8002ffa:	f001 ff58 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	2044      	movs	r0, #68	; 0x44
 8003004:	f001 ff37 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8003008:	2044      	movs	r0, #68	; 0x44
 800300a:	f001 ff50 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800300e:	2200      	movs	r2, #0
 8003010:	2100      	movs	r1, #0
 8003012:	2046      	movs	r0, #70	; 0x46
 8003014:	f001 ff2f 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003018:	2046      	movs	r0, #70	; 0x46
 800301a:	f001 ff48 	bl	8004eae <HAL_NVIC_EnableIRQ>

}
 800301e:	bf00      	nop
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023800 	.word	0x40023800

0800302c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08c      	sub	sp, #48	; 0x30
 8003030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003032:	f107 031c 	add.w	r3, r7, #28
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	609a      	str	r2, [r3, #8]
 800303e:	60da      	str	r2, [r3, #12]
 8003040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	4b92      	ldr	r3, [pc, #584]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a91      	ldr	r2, [pc, #580]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 800304c:	f043 0310 	orr.w	r3, r3, #16
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b8f      	ldr	r3, [pc, #572]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	61bb      	str	r3, [r7, #24]
 800305c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
 8003062:	4b8b      	ldr	r3, [pc, #556]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	4a8a      	ldr	r2, [pc, #552]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 8003068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306c:	6313      	str	r3, [r2, #48]	; 0x30
 800306e:	4b88      	ldr	r3, [pc, #544]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	4b84      	ldr	r3, [pc, #528]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a83      	ldr	r2, [pc, #524]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b81      	ldr	r3, [pc, #516]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	4b7d      	ldr	r3, [pc, #500]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a7c      	ldr	r2, [pc, #496]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b7a      	ldr	r3, [pc, #488]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	4a75      	ldr	r2, [pc, #468]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	6313      	str	r3, [r2, #48]	; 0x30
 80030c2:	4b73      	ldr	r3, [pc, #460]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	4a6e      	ldr	r2, [pc, #440]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	6313      	str	r3, [r2, #48]	; 0x30
 80030de:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <_ZL12MX_GPIO_Initv+0x264>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, En4A_Pin|En4B_Pin|Dir4_Pin|Mode4_Pin, GPIO_PIN_RESET);
 80030ea:	2200      	movs	r2, #0
 80030ec:	213c      	movs	r1, #60	; 0x3c
 80030ee:	4869      	ldr	r0, [pc, #420]	; (8003294 <_ZL12MX_GPIO_Initv+0x268>)
 80030f0:	f002 fcae 	bl	8005a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, En3A_Pin|En3B_Pin|Dir3_Pin|Mode3_Pin, GPIO_PIN_RESET);
 80030f4:	2200      	movs	r2, #0
 80030f6:	21f0      	movs	r1, #240	; 0xf0
 80030f8:	4867      	ldr	r0, [pc, #412]	; (8003298 <_ZL12MX_GPIO_Initv+0x26c>)
 80030fa:	f002 fca9 	bl	8005a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable4B_GPIO_Port, Enable4B_Pin, GPIO_PIN_RESET);
 80030fe:	2200      	movs	r2, #0
 8003100:	2120      	movs	r1, #32
 8003102:	4866      	ldr	r0, [pc, #408]	; (800329c <_ZL12MX_GPIO_Initv+0x270>)
 8003104:	f002 fca4 	bl	8005a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, En1A_Pin|En1B_Pin|Dir1_Pin|Mode1_Pin
 8003108:	2200      	movs	r2, #0
 800310a:	f44f 4172 	mov.w	r1, #61952	; 0xf200
 800310e:	4864      	ldr	r0, [pc, #400]	; (80032a0 <_ZL12MX_GPIO_Initv+0x274>)
 8003110:	f002 fc9e 	bl	8005a50 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, En2A_Pin|En2B_Pin|Dir2_Pin|Mode2_Pin
 8003114:	2200      	movs	r2, #0
 8003116:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800311a:	4862      	ldr	r0, [pc, #392]	; (80032a4 <_ZL12MX_GPIO_Initv+0x278>)
 800311c:	f002 fc98 	bl	8005a50 <HAL_GPIO_WritePin>
                          |LD1_Pin|LD2_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : En4A_Pin En4B_Pin Dir4_Pin Mode4_Pin */
  GPIO_InitStruct.Pin = En4A_Pin|En4B_Pin|Dir4_Pin|Mode4_Pin;
 8003120:	233c      	movs	r3, #60	; 0x3c
 8003122:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003124:	2301      	movs	r3, #1
 8003126:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312c:	2300      	movs	r3, #0
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003130:	f107 031c 	add.w	r3, r7, #28
 8003134:	4619      	mov	r1, r3
 8003136:	4857      	ldr	r0, [pc, #348]	; (8003294 <_ZL12MX_GPIO_Initv+0x268>)
 8003138:	f002 fad6 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Enc1A_Pin Enc3A_Pin */
  GPIO_InitStruct.Pin = Enc1A_Pin|Enc3A_Pin;
 800313c:	2382      	movs	r3, #130	; 0x82
 800313e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003140:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003146:	2301      	movs	r3, #1
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800314a:	f107 031c 	add.w	r3, r7, #28
 800314e:	4619      	mov	r1, r3
 8003150:	4852      	ldr	r0, [pc, #328]	; (800329c <_ZL12MX_GPIO_Initv+0x270>)
 8003152:	f002 fac9 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Enc1B_Pin Enc3B_Pin Enc4B_Pin */
  GPIO_InitStruct.Pin = Enc1B_Pin|Enc3B_Pin|Enc4B_Pin;
 8003156:	f241 1304 	movw	r3, #4356	; 0x1104
 800315a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800315c:	2300      	movs	r3, #0
 800315e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003160:	2301      	movs	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	4619      	mov	r1, r3
 800316a:	484c      	ldr	r0, [pc, #304]	; (800329c <_ZL12MX_GPIO_Initv+0x270>)
 800316c:	f002 fabc 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : En3A_Pin En3B_Pin Dir3_Pin Mode3_Pin */
  GPIO_InitStruct.Pin = En3A_Pin|En3B_Pin|Dir3_Pin|Mode3_Pin;
 8003170:	23f0      	movs	r3, #240	; 0xf0
 8003172:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003174:	2301      	movs	r3, #1
 8003176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003178:	2300      	movs	r3, #0
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317c:	2300      	movs	r3, #0
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003180:	f107 031c 	add.w	r3, r7, #28
 8003184:	4619      	mov	r1, r3
 8003186:	4844      	ldr	r0, [pc, #272]	; (8003298 <_ZL12MX_GPIO_Initv+0x26c>)
 8003188:	f002 faae 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Enable4B_Pin */
  GPIO_InitStruct.Pin = Enable4B_Pin;
 800318c:	2320      	movs	r3, #32
 800318e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003190:	2301      	movs	r3, #1
 8003192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003198:	2300      	movs	r3, #0
 800319a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Enable4B_GPIO_Port, &GPIO_InitStruct);
 800319c:	f107 031c 	add.w	r3, r7, #28
 80031a0:	4619      	mov	r1, r3
 80031a2:	483e      	ldr	r0, [pc, #248]	; (800329c <_ZL12MX_GPIO_Initv+0x270>)
 80031a4:	f002 faa0 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : bat_Pin */
  GPIO_InitStruct.Pin = bat_Pin;
 80031a8:	2302      	movs	r3, #2
 80031aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031ac:	2300      	movs	r3, #0
 80031ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031b0:	2302      	movs	r3, #2
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(bat_GPIO_Port, &GPIO_InitStruct);
 80031b4:	f107 031c 	add.w	r3, r7, #28
 80031b8:	4619      	mov	r1, r3
 80031ba:	4839      	ldr	r0, [pc, #228]	; (80032a0 <_ZL12MX_GPIO_Initv+0x274>)
 80031bc:	f002 fa94 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : En1A_Pin En1B_Pin Dir1_Pin Mode1_Pin
                           PB9 */
  GPIO_InitStruct.Pin = En1A_Pin|En1B_Pin|Dir1_Pin|Mode1_Pin
 80031c0:	f44f 4372 	mov.w	r3, #61952	; 0xf200
 80031c4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c6:	2301      	movs	r3, #1
 80031c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ce:	2300      	movs	r3, #0
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d2:	f107 031c 	add.w	r3, r7, #28
 80031d6:	4619      	mov	r1, r3
 80031d8:	4831      	ldr	r0, [pc, #196]	; (80032a0 <_ZL12MX_GPIO_Initv+0x274>)
 80031da:	f002 fa85 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : En2A_Pin En2B_Pin Dir2_Pin Mode2_Pin
                           LD1_Pin LD2_Pin LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = En2A_Pin|En2B_Pin|Dir2_Pin|Mode2_Pin
 80031de:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80031e2:	61fb      	str	r3, [r7, #28]
                          |LD1_Pin|LD2_Pin|LD3_Pin|LD4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031e4:	2301      	movs	r3, #1
 80031e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e8:	2300      	movs	r3, #0
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031f0:	f107 031c 	add.w	r3, r7, #28
 80031f4:	4619      	mov	r1, r3
 80031f6:	482b      	ldr	r0, [pc, #172]	; (80032a4 <_ZL12MX_GPIO_Initv+0x278>)
 80031f8:	f002 fa76 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Enc4A_Pin */
  GPIO_InitStruct.Pin = Enc4A_Pin;
 80031fc:	2308      	movs	r3, #8
 80031fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003200:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003206:	2301      	movs	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Enc4A_GPIO_Port, &GPIO_InitStruct);
 800320a:	f107 031c 	add.w	r3, r7, #28
 800320e:	4619      	mov	r1, r3
 8003210:	4824      	ldr	r0, [pc, #144]	; (80032a4 <_ZL12MX_GPIO_Initv+0x278>)
 8003212:	f002 fa69 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Enc2A_Pin */
  GPIO_InitStruct.Pin = Enc2A_Pin;
 8003216:	2310      	movs	r3, #16
 8003218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800321a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800321e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003220:	2301      	movs	r3, #1
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Enc2A_GPIO_Port, &GPIO_InitStruct);
 8003224:	f107 031c 	add.w	r3, r7, #28
 8003228:	4619      	mov	r1, r3
 800322a:	481d      	ldr	r0, [pc, #116]	; (80032a0 <_ZL12MX_GPIO_Initv+0x274>)
 800322c:	f002 fa5c 	bl	80056e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Enc2B_Pin */
  GPIO_InitStruct.Pin = Enc2B_Pin;
 8003230:	2320      	movs	r3, #32
 8003232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003234:	2300      	movs	r3, #0
 8003236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003238:	2301      	movs	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Enc2B_GPIO_Port, &GPIO_InitStruct);
 800323c:	f107 031c 	add.w	r3, r7, #28
 8003240:	4619      	mov	r1, r3
 8003242:	4817      	ldr	r0, [pc, #92]	; (80032a0 <_ZL12MX_GPIO_Initv+0x274>)
 8003244:	f002 fa50 	bl	80056e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003248:	2200      	movs	r2, #0
 800324a:	2100      	movs	r1, #0
 800324c:	2007      	movs	r0, #7
 800324e:	f001 fe12 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003252:	2007      	movs	r0, #7
 8003254:	f001 fe2b 	bl	8004eae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003258:	2200      	movs	r2, #0
 800325a:	2100      	movs	r1, #0
 800325c:	2009      	movs	r0, #9
 800325e:	f001 fe0a 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003262:	2009      	movs	r0, #9
 8003264:	f001 fe23 	bl	8004eae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003268:	2200      	movs	r2, #0
 800326a:	2100      	movs	r1, #0
 800326c:	200a      	movs	r0, #10
 800326e:	f001 fe02 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003272:	200a      	movs	r0, #10
 8003274:	f001 fe1b 	bl	8004eae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003278:	2200      	movs	r2, #0
 800327a:	2100      	movs	r1, #0
 800327c:	2017      	movs	r0, #23
 800327e:	f001 fdfa 	bl	8004e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003282:	2017      	movs	r0, #23
 8003284:	f001 fe13 	bl	8004eae <HAL_NVIC_EnableIRQ>

}
 8003288:	bf00      	nop
 800328a:	3730      	adds	r7, #48	; 0x30
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40023800 	.word	0x40023800
 8003294:	40021000 	.word	0x40021000
 8003298:	40020000 	.word	0x40020000
 800329c:	40020800 	.word	0x40020800
 80032a0:	40020400 	.word	0x40020400
 80032a4:	40020c00 	.word	0x40020c00

080032a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032ac:	b672      	cpsid	i
}
 80032ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032b0:	e7fe      	b.n	80032b0 <Error_Handler+0x8>
	...

080032b4 <_ZN5STM32C1Ev>:

struct PC{
	int16_t motorSpeed[3] = {0,0,0};
};

struct STM32{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a06      	ldr	r2, [pc, #24]	; (80032d8 <_ZN5STM32C1Ev+0x24>)
 80032c0:	3309      	adds	r3, #9
 80032c2:	6810      	ldr	r0, [r2, #0]
 80032c4:	6018      	str	r0, [r3, #0]
 80032c6:	8892      	ldrh	r2, [r2, #4]
 80032c8:	809a      	strh	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	0800f814 	.word	0x0800f814

080032dc <_ZN8IMU_GY25C1Ev>:
#define INC_IMU_GY25_H_

#include "stm32f4xx_hal.h"


class IMU_GY25{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a05      	ldr	r2, [pc, #20]	; (80032fc <_ZN8IMU_GY25C1Ev+0x20>)
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4618      	mov	r0, r3
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	0800f81c 	.word	0x0800f81c

08003300 <_Z4initv>:
unsigned long rxTick = 0;

int16_t hehe = 200;

// Void
void init(){
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b083      	sub	sp, #12
 8003304:	af02      	add	r7, sp, #8
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003306:	2100      	movs	r1, #0
 8003308:	4853      	ldr	r0, [pc, #332]	; (8003458 <_Z4initv+0x158>)
 800330a:	f004 fa7d 	bl	8007808 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800330e:	2104      	movs	r1, #4
 8003310:	4851      	ldr	r0, [pc, #324]	; (8003458 <_Z4initv+0x158>)
 8003312:	f004 fa79 	bl	8007808 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003316:	2108      	movs	r1, #8
 8003318:	484f      	ldr	r0, [pc, #316]	; (8003458 <_Z4initv+0x158>)
 800331a:	f004 fa75 	bl	8007808 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800331e:	210c      	movs	r1, #12
 8003320:	484d      	ldr	r0, [pc, #308]	; (8003458 <_Z4initv+0x158>)
 8003322:	f004 fa71 	bl	8007808 <HAL_TIM_PWM_Start>

	IMU = new IMU_GY25();
 8003326:	2008      	movs	r0, #8
 8003328:	f00a f846 	bl	800d3b8 <_Znwj>
 800332c:	4603      	mov	r3, r0
 800332e:	461c      	mov	r4, r3
 8003330:	4622      	mov	r2, r4
 8003332:	2300      	movs	r3, #0
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	6053      	str	r3, [r2, #4]
 8003338:	4620      	mov	r0, r4
 800333a:	f7ff ffcf 	bl	80032dc <_ZN8IMU_GY25C1Ev>
 800333e:	4b47      	ldr	r3, [pc, #284]	; (800345c <_Z4initv+0x15c>)
 8003340:	601c      	str	r4, [r3, #0]

	Motor1 = new MotorClass(M1_Port, M1_EnbA, M1_EnbB, 1);
 8003342:	2010      	movs	r0, #16
 8003344:	f00a f838 	bl	800d3b8 <_Znwj>
 8003348:	4603      	mov	r3, r0
 800334a:	461c      	mov	r4, r3
 800334c:	2301      	movs	r3, #1
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003354:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003358:	4941      	ldr	r1, [pc, #260]	; (8003460 <_Z4initv+0x160>)
 800335a:	4620      	mov	r0, r4
 800335c:	f000 f9ba 	bl	80036d4 <_ZN10MotorClassC1EP12GPIO_TypeDeftti>
 8003360:	4b40      	ldr	r3, [pc, #256]	; (8003464 <_Z4initv+0x164>)
 8003362:	601c      	str	r4, [r3, #0]
	Motor2 = new MotorClass(M2_Port, M2_EnbA, M2_EnbB, 2);
 8003364:	2010      	movs	r0, #16
 8003366:	f00a f827 	bl	800d3b8 <_Znwj>
 800336a:	4603      	mov	r3, r0
 800336c:	461c      	mov	r4, r3
 800336e:	2302      	movs	r3, #2
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337a:	493b      	ldr	r1, [pc, #236]	; (8003468 <_Z4initv+0x168>)
 800337c:	4620      	mov	r0, r4
 800337e:	f000 f9a9 	bl	80036d4 <_ZN10MotorClassC1EP12GPIO_TypeDeftti>
 8003382:	4b3a      	ldr	r3, [pc, #232]	; (800346c <_Z4initv+0x16c>)
 8003384:	601c      	str	r4, [r3, #0]
	Motor3 = new MotorClass(M3_Port, M3_EnbA, M3_EnbB, 3);
 8003386:	2010      	movs	r0, #16
 8003388:	f00a f816 	bl	800d3b8 <_Znwj>
 800338c:	4603      	mov	r3, r0
 800338e:	461c      	mov	r4, r3
 8003390:	2303      	movs	r3, #3
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	2340      	movs	r3, #64	; 0x40
 8003396:	2220      	movs	r2, #32
 8003398:	4935      	ldr	r1, [pc, #212]	; (8003470 <_Z4initv+0x170>)
 800339a:	4620      	mov	r0, r4
 800339c:	f000 f99a 	bl	80036d4 <_ZN10MotorClassC1EP12GPIO_TypeDeftti>
 80033a0:	4b34      	ldr	r3, [pc, #208]	; (8003474 <_Z4initv+0x174>)
 80033a2:	601c      	str	r4, [r3, #0]
	Motor4 = new MotorClass(M4_PortA, M4_PortB, M4_EnbA, M4_EnbB, 4);
 80033a4:	2010      	movs	r0, #16
 80033a6:	f00a f807 	bl	800d3b8 <_Znwj>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461c      	mov	r4, r3
 80033ae:	2304      	movs	r3, #4
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	2320      	movs	r3, #32
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <_Z4initv+0x178>)
 80033ba:	492d      	ldr	r1, [pc, #180]	; (8003470 <_Z4initv+0x170>)
 80033bc:	4620      	mov	r0, r4
 80033be:	f000 f96b 	bl	8003698 <_ZN10MotorClassC1EP12GPIO_TypeDefS1_tti>
 80033c2:	4b2e      	ldr	r3, [pc, #184]	; (800347c <_Z4initv+0x17c>)
 80033c4:	601c      	str	r4, [r3, #0]

//	Motor1 = new MotorClass(En1A_GPIO_Port, En1A_Pin, En1B_Pin, 1);
//	Motor2 = new MotorClass(En2A_GPIO_Port, En2A_Pin, En2B_Pin, 2);
//	Motor3 = new MotorClass(En3A_GPIO_Port, En3A_Pin, En3B_Pin, 3);

	Encoder1 = new Encoder(Enc1A_GPIO_Port, Enc1B_GPIO_Port, Enc1A_Pin, Enc1B_Pin);
 80033c6:	2014      	movs	r0, #20
 80033c8:	f009 fff6 	bl	800d3b8 <_Znwj>
 80033cc:	4603      	mov	r3, r0
 80033ce:	461c      	mov	r4, r3
 80033d0:	2304      	movs	r3, #4
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2302      	movs	r3, #2
 80033d6:	4a28      	ldr	r2, [pc, #160]	; (8003478 <_Z4initv+0x178>)
 80033d8:	4927      	ldr	r1, [pc, #156]	; (8003478 <_Z4initv+0x178>)
 80033da:	4620      	mov	r0, r4
 80033dc:	f7fd fd54 	bl	8000e88 <_ZN7EncoderC1EP12GPIO_TypeDefS1_tt>
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <_Z4initv+0x180>)
 80033e2:	601c      	str	r4, [r3, #0]
	Encoder2 = new Encoder(Enc2A_GPIO_Port, Enc2B_GPIO_Port, Enc2A_Pin, Enc2B_Pin);
 80033e4:	2014      	movs	r0, #20
 80033e6:	f009 ffe7 	bl	800d3b8 <_Znwj>
 80033ea:	4603      	mov	r3, r0
 80033ec:	461c      	mov	r4, r3
 80033ee:	2320      	movs	r3, #32
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	2310      	movs	r3, #16
 80033f4:	4a1a      	ldr	r2, [pc, #104]	; (8003460 <_Z4initv+0x160>)
 80033f6:	491a      	ldr	r1, [pc, #104]	; (8003460 <_Z4initv+0x160>)
 80033f8:	4620      	mov	r0, r4
 80033fa:	f7fd fd45 	bl	8000e88 <_ZN7EncoderC1EP12GPIO_TypeDefS1_tt>
 80033fe:	4b21      	ldr	r3, [pc, #132]	; (8003484 <_Z4initv+0x184>)
 8003400:	601c      	str	r4, [r3, #0]
	Encoder3 = new Encoder(Enc4A_GPIO_Port, Enc4B_GPIO_Port, Enc4A_Pin, Enc4B_Pin);
 8003402:	2014      	movs	r0, #20
 8003404:	f009 ffd8 	bl	800d3b8 <_Znwj>
 8003408:	4603      	mov	r3, r0
 800340a:	461c      	mov	r4, r3
 800340c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	2308      	movs	r3, #8
 8003414:	4a18      	ldr	r2, [pc, #96]	; (8003478 <_Z4initv+0x178>)
 8003416:	4914      	ldr	r1, [pc, #80]	; (8003468 <_Z4initv+0x168>)
 8003418:	4620      	mov	r0, r4
 800341a:	f7fd fd35 	bl	8000e88 <_ZN7EncoderC1EP12GPIO_TypeDefS1_tt>
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <_Z4initv+0x188>)
 8003420:	601c      	str	r4, [r3, #0]
	Encoder4 = new Encoder(Enc3A_GPIO_Port, Enc3B_GPIO_Port, Enc3A_Pin, Enc3B_Pin);
 8003422:	2014      	movs	r0, #20
 8003424:	f009 ffc8 	bl	800d3b8 <_Znwj>
 8003428:	4603      	mov	r3, r0
 800342a:	461c      	mov	r4, r3
 800342c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	4a10      	ldr	r2, [pc, #64]	; (8003478 <_Z4initv+0x178>)
 8003436:	4910      	ldr	r1, [pc, #64]	; (8003478 <_Z4initv+0x178>)
 8003438:	4620      	mov	r0, r4
 800343a:	f7fd fd25 	bl	8000e88 <_ZN7EncoderC1EP12GPIO_TypeDefS1_tt>
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <_Z4initv+0x18c>)
 8003440:	601c      	str	r4, [r3, #0]
//	Motor1 = new MotorClass(En1A_GPIO_Port, En1A_Pin, En1B_Pin, 4);

	IMU->KalibrasiImu();
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <_Z4initv+0x15c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd fdbc 	bl	8000fc4 <_ZN8IMU_GY2512KalibrasiImuEv>

	IMU_RX_Interrupt_Start();
 800344c:	f000 f8e6 	bl	800361c <_Z22IMU_RX_Interrupt_Startv>
}
 8003450:	bf00      	nop
 8003452:	3704      	adds	r7, #4
 8003454:	46bd      	mov	sp, r7
 8003456:	bd90      	pop	{r4, r7, pc}
 8003458:	200003c8 	.word	0x200003c8
 800345c:	20000898 	.word	0x20000898
 8003460:	40020400 	.word	0x40020400
 8003464:	2000089c 	.word	0x2000089c
 8003468:	40020c00 	.word	0x40020c00
 800346c:	200008a0 	.word	0x200008a0
 8003470:	40020000 	.word	0x40020000
 8003474:	200008a4 	.word	0x200008a4
 8003478:	40020800 	.word	0x40020800
 800347c:	200008a8 	.word	0x200008a8
 8003480:	200008ac 	.word	0x200008ac
 8003484:	200008b0 	.word	0x200008b0
 8003488:	200008b4 	.word	0x200008b4
 800348c:	200008b8 	.word	0x200008b8

08003490 <_Z4loopv>:


void loop(){
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
//	SendDatatoPC();

	kinematicaja->inverseKinematic(5, 0, 0,anu);
 8003494:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <_Z4loopv+0x80>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	491e      	ldr	r1, [pc, #120]	; (8003514 <_Z4loopv+0x84>)
 800349a:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8003518 <_Z4loopv+0x88>
 800349e:	eddf 0a1e 	vldr	s1, [pc, #120]	; 8003518 <_Z4loopv+0x88>
 80034a2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe f85e 	bl	8001568 <_ZN9kinematic5Motor16inverseKinematicEfffR7Point2D>
	Motor2->Motor(anu.a);
 80034ac:	4b1b      	ldr	r3, [pc, #108]	; (800351c <_Z4loopv+0x8c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a18      	ldr	r2, [pc, #96]	; (8003514 <_Z4loopv+0x84>)
 80034b2:	edd2 7a03 	vldr	s15, [r2, #12]
 80034b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ba:	ee17 1a90 	vmov	r1, s15
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f92a 	bl	8003718 <_ZN10MotorClass5MotorEi>
	Motor3->Motor(anu.b);
 80034c4:	4b16      	ldr	r3, [pc, #88]	; (8003520 <_Z4loopv+0x90>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a12      	ldr	r2, [pc, #72]	; (8003514 <_Z4loopv+0x84>)
 80034ca:	edd2 7a04 	vldr	s15, [r2, #16]
 80034ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034d2:	ee17 1a90 	vmov	r1, s15
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 f91e 	bl	8003718 <_ZN10MotorClass5MotorEi>
	Motor4->Motor(anu.c);
 80034dc:	4b11      	ldr	r3, [pc, #68]	; (8003524 <_Z4loopv+0x94>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a0c      	ldr	r2, [pc, #48]	; (8003514 <_Z4loopv+0x84>)
 80034e2:	edd2 7a05 	vldr	s15, [r2, #20]
 80034e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ea:	ee17 1a90 	vmov	r1, s15
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f912 	bl	8003718 <_ZN10MotorClass5MotorEi>

	tick = HAL_GetTick();
 80034f4:	f000 ffea 	bl	80044cc <HAL_GetTick>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4a0b      	ldr	r2, [pc, #44]	; (8003528 <_Z4loopv+0x98>)
 80034fc:	6013      	str	r3, [r2, #0]

	kinematicaja->calcOdom();
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <_Z4loopv+0x80>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fdf8 	bl	80010f8 <_ZN9kinematic5Motor8calcOdomEv>
	TakeEncoder();
 8003508:	f000 f860 	bl	80035cc <_Z11TakeEncoderv>

}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}
 8003510:	200008bc 	.word	0x200008bc
 8003514:	20000880 	.word	0x20000880
 8003518:	00000000 	.word	0x00000000
 800351c:	200008a0 	.word	0x200008a0
 8003520:	200008a4 	.word	0x200008a4
 8003524:	200008a8 	.word	0x200008a8
 8003528:	200008d4 	.word	0x200008d4

0800352c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1){//Serial Imu-Gy25 to STM32
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a12      	ldr	r2, [pc, #72]	; (8003588 <HAL_UARTEx_RxEventCallback+0x5c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d11d      	bne.n	800357e <HAL_UARTEx_RxEventCallback+0x52>
		rawImu = -(IMU_RX_Buff[1] << 8 | IMU_RX_Buff[2]);
 8003542:	4b12      	ldr	r3, [pc, #72]	; (800358c <HAL_UARTEx_RxEventCallback+0x60>)
 8003544:	785b      	ldrb	r3, [r3, #1]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	b21a      	sxth	r2, r3
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <HAL_UARTEx_RxEventCallback+0x60>)
 800354c:	789b      	ldrb	r3, [r3, #2]
 800354e:	b21b      	sxth	r3, r3
 8003550:	4313      	orrs	r3, r2
 8003552:	b21b      	sxth	r3, r3
 8003554:	b29b      	uxth	r3, r3
 8003556:	425b      	negs	r3, r3
 8003558:	b29b      	uxth	r3, r3
 800355a:	b21a      	sxth	r2, r3
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <HAL_UARTEx_RxEventCallback+0x64>)
 800355e:	801a      	strh	r2, [r3, #0]

		Send.Imu = IMU->processingIMU(rawImu);
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <HAL_UARTEx_RxEventCallback+0x68>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <HAL_UARTEx_RxEventCallback+0x64>)
 8003566:	f9b2 2000 	ldrsh.w	r2, [r2]
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f7fd fd69 	bl	8001044 <_ZN8IMU_GY2513processingIMUEi>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <HAL_UARTEx_RxEventCallback+0x6c>)
 8003578:	801a      	strh	r2, [r3, #0]

		IMU_RX_Interrupt_Start();
 800357a:	f000 f84f 	bl	800361c <_Z22IMU_RX_Interrupt_Startv>

	}

}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40011000 	.word	0x40011000
 800358c:	200008c0 	.word	0x200008c0
 8003590:	200008d0 	.word	0x200008d0
 8003594:	20000898 	.word	0x20000898
 8003598:	20000870 	.word	0x20000870

0800359c <receiveData>:


void receiveData(uint8_t* buf, uint32_t len){
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
	memcpy((uint8_t*)&Command, buf, sizeof(Command));
 80035a6:	2206      	movs	r2, #6
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4806      	ldr	r0, [pc, #24]	; (80035c4 <receiveData+0x28>)
 80035ac:	f00b ffd0 	bl	800f550 <memcpy>
	rxTick = HAL_GetTick();
 80035b0:	f000 ff8c 	bl	80044cc <HAL_GetTick>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <receiveData+0x2c>)
 80035b8:	6013      	str	r3, [r2, #0]
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000868 	.word	0x20000868
 80035c8:	200008d8 	.word	0x200008d8

080035cc <_Z11TakeEncoderv>:
	CDC_Transmit_FS(TX_Buff, sizeof(Send));
	}
}


void TakeEncoder(){
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
	Send.Encoder[0] = Encoder1->GetCounter();
 80035d0:	4b0e      	ldr	r3, [pc, #56]	; (800360c <_Z11TakeEncoderv+0x40>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7fd fce8 	bl	8000faa <_ZN7Encoder10GetCounterEv>
 80035da:	4603      	mov	r3, r0
 80035dc:	b21a      	sxth	r2, r3
 80035de:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <_Z11TakeEncoderv+0x44>)
 80035e0:	805a      	strh	r2, [r3, #2]
//	Encoder1->ResetCounter();
	Send.Encoder[1] = Encoder2->GetCounter();
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <_Z11TakeEncoderv+0x48>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd fcdf 	bl	8000faa <_ZN7Encoder10GetCounterEv>
 80035ec:	4603      	mov	r3, r0
 80035ee:	b21a      	sxth	r2, r3
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <_Z11TakeEncoderv+0x44>)
 80035f2:	809a      	strh	r2, [r3, #4]
//	Encoder2->ResetCounter();
	Send.Encoder[2] = Encoder3->GetCounter();
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <_Z11TakeEncoderv+0x4c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd fcd6 	bl	8000faa <_ZN7Encoder10GetCounterEv>
 80035fe:	4603      	mov	r3, r0
 8003600:	b21a      	sxth	r2, r3
 8003602:	4b03      	ldr	r3, [pc, #12]	; (8003610 <_Z11TakeEncoderv+0x44>)
 8003604:	80da      	strh	r2, [r3, #6]
//	Encoder3->ResetCounter();
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200008ac 	.word	0x200008ac
 8003610:	20000870 	.word	0x20000870
 8003614:	200008b0 	.word	0x200008b0
 8003618:	200008b4 	.word	0x200008b4

0800361c <_Z22IMU_RX_Interrupt_Startv>:


void IMU_RX_Interrupt_Start(){
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, IMU_RX_Buff, IMU_RX_Buff_Size);
 8003620:	2210      	movs	r2, #16
 8003622:	490b      	ldr	r1, [pc, #44]	; (8003650 <_Z22IMU_RX_Interrupt_Startv+0x34>)
 8003624:	480b      	ldr	r0, [pc, #44]	; (8003654 <_Z22IMU_RX_Interrupt_Startv+0x38>)
 8003626:	f005 f94c 	bl	80088c2 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <_Z22IMU_RX_Interrupt_Startv+0x3c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b09      	ldr	r3, [pc, #36]	; (8003658 <_Z22IMU_RX_Interrupt_Startv+0x3c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0208 	bic.w	r2, r2, #8
 8003638:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_TC);
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <_Z22IMU_RX_Interrupt_Startv+0x3c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <_Z22IMU_RX_Interrupt_Startv+0x3c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0210 	bic.w	r2, r2, #16
 8003648:	601a      	str	r2, [r3, #0]
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	200008c0 	.word	0x200008c0
 8003654:	2000049c 	.word	0x2000049c
 8003658:	20000628 	.word	0x20000628

0800365c <_Z41__static_initialization_and_destruction_0ii>:
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003672:	4293      	cmp	r3, r2
 8003674:	d102      	bne.n	800367c <_Z41__static_initialization_and_destruction_0ii+0x20>
STM32 Send;
 8003676:	4803      	ldr	r0, [pc, #12]	; (8003684 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8003678:	f7ff fe1c 	bl	80032b4 <_ZN5STM32C1Ev>
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000870 	.word	0x20000870

08003688 <_GLOBAL__sub_I_Command>:
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
 800368c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003690:	2001      	movs	r0, #1
 8003692:	f7ff ffe3 	bl	800365c <_Z41__static_initialization_and_destruction_0ii>
 8003696:	bd80      	pop	{r7, pc}

08003698 <_ZN10MotorClassC1EP12GPIO_TypeDefS1_tti>:
 */
#include "motor.h"

extern TIM_HandleTypeDef htim1;

MotorClass::MotorClass(GPIO_TypeDef *a, GPIO_TypeDef *b, uint16_t a2, uint16_t b2, int pwmNo){
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	807b      	strh	r3, [r7, #2]
	enA = a;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	601a      	str	r2, [r3, #0]
	enB = b;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	605a      	str	r2, [r3, #4]

	enA_pin = a2;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	887a      	ldrh	r2, [r7, #2]
 80036b6:	815a      	strh	r2, [r3, #10]
	enB_pin = b2;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8b3a      	ldrh	r2, [r7, #24]
 80036bc:	819a      	strh	r2, [r3, #12]

	pwmNum = pwmNo;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	b25a      	sxtb	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	739a      	strb	r2, [r3, #14]
}
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <_ZN10MotorClassC1EP12GPIO_TypeDeftti>:

MotorClass::MotorClass(GPIO_TypeDef *a, uint16_t a2, uint16_t b2, int pwmNo){
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	4611      	mov	r1, r2
 80036e0:	461a      	mov	r2, r3
 80036e2:	460b      	mov	r3, r1
 80036e4:	80fb      	strh	r3, [r7, #6]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80bb      	strh	r3, [r7, #4]
	enA = a;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	601a      	str	r2, [r3, #0]
	enB = a;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	605a      	str	r2, [r3, #4]

	enA_pin = a2;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	88fa      	ldrh	r2, [r7, #6]
 80036fa:	815a      	strh	r2, [r3, #10]
	enB_pin = b2;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	88ba      	ldrh	r2, [r7, #4]
 8003700:	819a      	strh	r2, [r3, #12]

	pwmNum = pwmNo;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	b25a      	sxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	739a      	strb	r2, [r3, #14]
}
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_ZN10MotorClass5MotorEi>:


void MotorClass::Motor(int pwm){
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
	if(pwm == 0){
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d110      	bne.n	800374a <_ZN10MotorClass5MotorEi+0x32>
//		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		HAL_GPIO_WritePin(enA, enA_pin, GPIO_PIN_RESET);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6818      	ldr	r0, [r3, #0]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	895b      	ldrh	r3, [r3, #10]
 8003730:	2200      	movs	r2, #0
 8003732:	4619      	mov	r1, r3
 8003734:	f002 f98c 	bl	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enB, enB_pin, GPIO_PIN_RESET);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6858      	ldr	r0, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	899b      	ldrh	r3, [r3, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	4619      	mov	r1, r3
 8003744:	f002 f984 	bl	8005a50 <HAL_GPIO_WritePin>
 8003748:	e026      	b.n	8003798 <_ZN10MotorClass5MotorEi+0x80>
	}

	else if(pwm > 0){
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	dd10      	ble.n	8003772 <_ZN10MotorClass5MotorEi+0x5a>
		HAL_GPIO_WritePin(enA, enA_pin, GPIO_PIN_RESET);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	895b      	ldrh	r3, [r3, #10]
 8003758:	2200      	movs	r2, #0
 800375a:	4619      	mov	r1, r3
 800375c:	f002 f978 	bl	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enB, enB_pin, GPIO_PIN_SET);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6858      	ldr	r0, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	899b      	ldrh	r3, [r3, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	4619      	mov	r1, r3
 800376c:	f002 f970 	bl	8005a50 <HAL_GPIO_WritePin>
 8003770:	e012      	b.n	8003798 <_ZN10MotorClass5MotorEi+0x80>
	}

	else{
		HAL_GPIO_WritePin(enA, enA_pin, GPIO_PIN_SET);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	895b      	ldrh	r3, [r3, #10]
 800377a:	2201      	movs	r2, #1
 800377c:	4619      	mov	r1, r3
 800377e:	f002 f967 	bl	8005a50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(enB, enB_pin, GPIO_PIN_RESET);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6858      	ldr	r0, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	899b      	ldrh	r3, [r3, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	4619      	mov	r1, r3
 800378e:	f002 f95f 	bl	8005a50 <HAL_GPIO_WritePin>
		pwm = -pwm;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	425b      	negs	r3, r3
 8003796:	603b      	str	r3, [r7, #0]

	}
	pwm+=9;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	3309      	adds	r3, #9
 800379c:	603b      	str	r3, [r7, #0]
//pwm+=9;
//	pwm += 24;
	if(pwmNum == 1) htim1.Instance->CCR1 = pwm;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d104      	bne.n	80037b2 <_ZN10MotorClass5MotorEi+0x9a>
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <_ZN10MotorClass5MotorEi+0xdc>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	635a      	str	r2, [r3, #52]	; 0x34
	else if(pwmNum == 2) htim1.Instance->CCR2 = pwm;
	else if(pwmNum == 3) htim1.Instance->CCR3 = pwm;
	else if(pwmNum == 4) htim1.Instance->CCR4 = pwm;

}
 80037b0:	e01c      	b.n	80037ec <_ZN10MotorClass5MotorEi+0xd4>
	else if(pwmNum == 2) htim1.Instance->CCR2 = pwm;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d104      	bne.n	80037c6 <_ZN10MotorClass5MotorEi+0xae>
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <_ZN10MotorClass5MotorEi+0xdc>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80037c4:	e012      	b.n	80037ec <_ZN10MotorClass5MotorEi+0xd4>
	else if(pwmNum == 3) htim1.Instance->CCR3 = pwm;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d104      	bne.n	80037da <_ZN10MotorClass5MotorEi+0xc2>
 80037d0:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <_ZN10MotorClass5MotorEi+0xdc>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80037d8:	e008      	b.n	80037ec <_ZN10MotorClass5MotorEi+0xd4>
	else if(pwmNum == 4) htim1.Instance->CCR4 = pwm;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d103      	bne.n	80037ec <_ZN10MotorClass5MotorEi+0xd4>
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <_ZN10MotorClass5MotorEi+0xdc>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	200003c8 	.word	0x200003c8

080037f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	607b      	str	r3, [r7, #4]
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_MspInit+0x4c>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <HAL_MspInit+0x4c>)
 8003808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800380c:	6453      	str	r3, [r2, #68]	; 0x44
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <HAL_MspInit+0x4c>)
 8003810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_MspInit+0x4c>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <HAL_MspInit+0x4c>)
 8003824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003828:	6413      	str	r3, [r2, #64]	; 0x40
 800382a:	4b06      	ldr	r3, [pc, #24]	; (8003844 <HAL_MspInit+0x4c>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003836:	2007      	movs	r0, #7
 8003838:	f001 fb12 	bl	8004e60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800

08003848 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08c      	sub	sp, #48	; 0x30
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	60da      	str	r2, [r3, #12]
 800385e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a66      	ldr	r2, [pc, #408]	; (8003a00 <HAL_ADC_MspInit+0x1b8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d160      	bne.n	800392c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	4b65      	ldr	r3, [pc, #404]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	4a64      	ldr	r2, [pc, #400]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003878:	6453      	str	r3, [r2, #68]	; 0x44
 800387a:	4b62      	ldr	r3, [pc, #392]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	4b5e      	ldr	r3, [pc, #376]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	4a5d      	ldr	r2, [pc, #372]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 8003890:	f043 0304 	orr.w	r3, r3, #4
 8003894:	6313      	str	r3, [r2, #48]	; 0x30
 8003896:	4b5b      	ldr	r3, [pc, #364]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038a2:	2301      	movs	r3, #1
 80038a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038a6:	2303      	movs	r3, #3
 80038a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ae:	f107 031c 	add.w	r3, r7, #28
 80038b2:	4619      	mov	r1, r3
 80038b4:	4854      	ldr	r0, [pc, #336]	; (8003a08 <HAL_ADC_MspInit+0x1c0>)
 80038b6:	f001 ff17 	bl	80056e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80038ba:	4b54      	ldr	r3, [pc, #336]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 80038bc:	4a54      	ldr	r2, [pc, #336]	; (8003a10 <HAL_ADC_MspInit+0x1c8>)
 80038be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80038c0:	4b52      	ldr	r3, [pc, #328]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80038c6:	4b51      	ldr	r3, [pc, #324]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80038cc:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80038d2:	4b4e      	ldr	r3, [pc, #312]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 80038d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038da:	4b4c      	ldr	r3, [pc, #304]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 80038dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80038e2:	4b4a      	ldr	r3, [pc, #296]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 80038e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80038ea:	4b48      	ldr	r3, [pc, #288]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 80038ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80038f2:	4b46      	ldr	r3, [pc, #280]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038f8:	4b44      	ldr	r3, [pc, #272]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80038fe:	4843      	ldr	r0, [pc, #268]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 8003900:	f001 faf0 	bl	8004ee4 <HAL_DMA_Init>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800390a:	f7ff fccd 	bl	80032a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a3e      	ldr	r2, [pc, #248]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
 8003914:	4a3d      	ldr	r2, [pc, #244]	; (8003a0c <HAL_ADC_MspInit+0x1c4>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800391a:	2200      	movs	r2, #0
 800391c:	2100      	movs	r1, #0
 800391e:	2012      	movs	r0, #18
 8003920:	f001 faa9 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003924:	2012      	movs	r0, #18
 8003926:	f001 fac2 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800392a:	e065      	b.n	80039f8 <HAL_ADC_MspInit+0x1b0>
  else if(hadc->Instance==ADC2)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a38      	ldr	r2, [pc, #224]	; (8003a14 <HAL_ADC_MspInit+0x1cc>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d160      	bne.n	80039f8 <HAL_ADC_MspInit+0x1b0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 8003940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003944:	6453      	str	r3, [r2, #68]	; 0x44
 8003946:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a2a      	ldr	r2, [pc, #168]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 800395c:	f043 0304 	orr.w	r3, r3, #4
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <HAL_ADC_MspInit+0x1bc>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800396e:	2308      	movs	r3, #8
 8003970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003972:	2303      	movs	r3, #3
 8003974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397a:	f107 031c 	add.w	r3, r7, #28
 800397e:	4619      	mov	r1, r3
 8003980:	4821      	ldr	r0, [pc, #132]	; (8003a08 <HAL_ADC_MspInit+0x1c0>)
 8003982:	f001 feb1 	bl	80056e8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003986:	4b24      	ldr	r3, [pc, #144]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 8003988:	4a24      	ldr	r2, [pc, #144]	; (8003a1c <HAL_ADC_MspInit+0x1d4>)
 800398a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800398c:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 800398e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003992:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003994:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800399a:	4b1f      	ldr	r3, [pc, #124]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 800399c:	2200      	movs	r2, #0
 800399e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80039a0:	4b1d      	ldr	r3, [pc, #116]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 80039a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039a6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 80039aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039ae:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 80039b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039b6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80039b8:	4b17      	ldr	r3, [pc, #92]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 80039ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039be:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80039c0:	4b15      	ldr	r3, [pc, #84]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039c6:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80039cc:	4812      	ldr	r0, [pc, #72]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 80039ce:	f001 fa89 	bl	8004ee4 <HAL_DMA_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_ADC_MspInit+0x194>
      Error_Handler();
 80039d8:	f7ff fc66 	bl	80032a8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
 80039e2:	4a0d      	ldr	r2, [pc, #52]	; (8003a18 <HAL_ADC_MspInit+0x1d0>)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80039e8:	2200      	movs	r2, #0
 80039ea:	2100      	movs	r1, #0
 80039ec:	2012      	movs	r0, #18
 80039ee:	f001 fa42 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80039f2:	2012      	movs	r0, #18
 80039f4:	f001 fa5b 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 80039f8:	bf00      	nop
 80039fa:	3730      	adds	r7, #48	; 0x30
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40012000 	.word	0x40012000
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40020800 	.word	0x40020800
 8003a0c:	20000308 	.word	0x20000308
 8003a10:	40026410 	.word	0x40026410
 8003a14:	40012100 	.word	0x40012100
 8003a18:	20000368 	.word	0x20000368
 8003a1c:	40026440 	.word	0x40026440

08003a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1c      	ldr	r2, [pc, #112]	; (8003aa0 <HAL_TIM_Base_MspInit+0x80>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d116      	bne.n	8003a60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <HAL_TIM_Base_MspInit+0x84>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	; (8003aa4 <HAL_TIM_Base_MspInit+0x84>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6453      	str	r3, [r2, #68]	; 0x44
 8003a42:	4b18      	ldr	r3, [pc, #96]	; (8003aa4 <HAL_TIM_Base_MspInit+0x84>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	2019      	movs	r0, #25
 8003a54:	f001 fa0f 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003a58:	2019      	movs	r0, #25
 8003a5a:	f001 fa28 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003a5e:	e01a      	b.n	8003a96 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a68:	d115      	bne.n	8003a96 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_TIM_Base_MspInit+0x84>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <HAL_TIM_Base_MspInit+0x84>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <HAL_TIM_Base_MspInit+0x84>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a86:	2200      	movs	r2, #0
 8003a88:	2100      	movs	r1, #0
 8003a8a:	201c      	movs	r0, #28
 8003a8c:	f001 f9f3 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a90:	201c      	movs	r0, #28
 8003a92:	f001 fa0c 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40023800 	.word	0x40023800

08003aa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <HAL_TIM_MspPostInit+0x68>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d11e      	bne.n	8003b08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <HAL_TIM_MspPostInit+0x6c>)
 8003ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad2:	4a10      	ldr	r2, [pc, #64]	; (8003b14 <HAL_TIM_MspPostInit+0x6c>)
 8003ad4:	f043 0310 	orr.w	r3, r3, #16
 8003ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8003ada:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_TIM_MspPostInit+0x6c>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8003ae6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003aea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003af8:	2301      	movs	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	4619      	mov	r1, r3
 8003b02:	4805      	ldr	r0, [pc, #20]	; (8003b18 <HAL_TIM_MspPostInit+0x70>)
 8003b04:	f001 fdf0 	bl	80056e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b08:	bf00      	nop
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40021000 	.word	0x40021000

08003b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b090      	sub	sp, #64	; 0x40
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a4a      	ldr	r2, [pc, #296]	; (8003c64 <HAL_UART_MspInit+0x148>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	f040 80a0 	bne.w	8003c80 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003b40:	2300      	movs	r3, #0
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b44:	4b48      	ldr	r3, [pc, #288]	; (8003c68 <HAL_UART_MspInit+0x14c>)
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	4a47      	ldr	r2, [pc, #284]	; (8003c68 <HAL_UART_MspInit+0x14c>)
 8003b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b50:	4b45      	ldr	r3, [pc, #276]	; (8003c68 <HAL_UART_MspInit+0x14c>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b60:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <HAL_UART_MspInit+0x14c>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	4a40      	ldr	r2, [pc, #256]	; (8003c68 <HAL_UART_MspInit+0x14c>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6c:	4b3e      	ldr	r3, [pc, #248]	; (8003c68 <HAL_UART_MspInit+0x14c>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b84:	2303      	movs	r3, #3
 8003b86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003b88:	2308      	movs	r3, #8
 8003b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b90:	4619      	mov	r1, r3
 8003b92:	4836      	ldr	r0, [pc, #216]	; (8003c6c <HAL_UART_MspInit+0x150>)
 8003b94:	f001 fda8 	bl	80056e8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003b98:	4b35      	ldr	r3, [pc, #212]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003b9a:	4a36      	ldr	r2, [pc, #216]	; (8003c74 <HAL_UART_MspInit+0x158>)
 8003b9c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003b9e:	4b34      	ldr	r3, [pc, #208]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003ba0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ba4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ba6:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003ba8:	2240      	movs	r2, #64	; 0x40
 8003baa:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bac:	4b30      	ldr	r3, [pc, #192]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bb2:	4b2f      	ldr	r3, [pc, #188]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bb8:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bba:	4b2d      	ldr	r3, [pc, #180]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bc0:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003bc6:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003bcc:	4b28      	ldr	r3, [pc, #160]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bd2:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003bd8:	4825      	ldr	r0, [pc, #148]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003bda:	f001 f983 	bl	8004ee4 <HAL_DMA_Init>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003be4:	f7ff fb60 	bl	80032a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a21      	ldr	r2, [pc, #132]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003bec:	635a      	str	r2, [r3, #52]	; 0x34
 8003bee:	4a20      	ldr	r2, [pc, #128]	; (8003c70 <HAL_UART_MspInit+0x154>)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003bf4:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003bf6:	4a21      	ldr	r2, [pc, #132]	; (8003c7c <HAL_UART_MspInit+0x160>)
 8003bf8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003bfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c00:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c0e:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c14:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c16:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c1c:	4b16      	ldr	r3, [pc, #88]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003c22:	4b15      	ldr	r3, [pc, #84]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c28:	4b13      	ldr	r3, [pc, #76]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003c34:	4810      	ldr	r0, [pc, #64]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003c36:	f001 f955 	bl	8004ee4 <HAL_DMA_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8003c40:	f7ff fb32 	bl	80032a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003c48:	639a      	str	r2, [r3, #56]	; 0x38
 8003c4a:	4a0b      	ldr	r2, [pc, #44]	; (8003c78 <HAL_UART_MspInit+0x15c>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2100      	movs	r1, #0
 8003c54:	2034      	movs	r0, #52	; 0x34
 8003c56:	f001 f90e 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003c5a:	2034      	movs	r0, #52	; 0x34
 8003c5c:	f001 f927 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c60:	e202      	b.n	8004068 <HAL_UART_MspInit+0x54c>
 8003c62:	bf00      	nop
 8003c64:	40004c00 	.word	0x40004c00
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	40020000 	.word	0x40020000
 8003c70:	20000568 	.word	0x20000568
 8003c74:	40026070 	.word	0x40026070
 8003c78:	200005c8 	.word	0x200005c8
 8003c7c:	40026040 	.word	0x40026040
  else if(huart->Instance==USART1)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a59      	ldr	r2, [pc, #356]	; (8003dec <HAL_UART_MspInit+0x2d0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	f040 80c0 	bne.w	8003e0c <HAL_UART_MspInit+0x2f0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	623b      	str	r3, [r7, #32]
 8003c90:	4b57      	ldr	r3, [pc, #348]	; (8003df0 <HAL_UART_MspInit+0x2d4>)
 8003c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c94:	4a56      	ldr	r2, [pc, #344]	; (8003df0 <HAL_UART_MspInit+0x2d4>)
 8003c96:	f043 0310 	orr.w	r3, r3, #16
 8003c9a:	6453      	str	r3, [r2, #68]	; 0x44
 8003c9c:	4b54      	ldr	r3, [pc, #336]	; (8003df0 <HAL_UART_MspInit+0x2d4>)
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	f003 0310 	and.w	r3, r3, #16
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <HAL_UART_MspInit+0x2d4>)
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	4a4f      	ldr	r2, [pc, #316]	; (8003df0 <HAL_UART_MspInit+0x2d4>)
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb8:	4b4d      	ldr	r3, [pc, #308]	; (8003df0 <HAL_UART_MspInit+0x2d4>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	4b49      	ldr	r3, [pc, #292]	; (8003df0 <HAL_UART_MspInit+0x2d4>)
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	4a48      	ldr	r2, [pc, #288]	; (8003df0 <HAL_UART_MspInit+0x2d4>)
 8003cce:	f043 0302 	orr.w	r3, r3, #2
 8003cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd4:	4b46      	ldr	r3, [pc, #280]	; (8003df0 <HAL_UART_MspInit+0x2d4>)
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ce0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cf2:	2307      	movs	r3, #7
 8003cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	483d      	ldr	r0, [pc, #244]	; (8003df4 <HAL_UART_MspInit+0x2d8>)
 8003cfe:	f001 fcf3 	bl	80056e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d02:	2340      	movs	r3, #64	; 0x40
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d06:	2302      	movs	r3, #2
 8003d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003d12:	2307      	movs	r3, #7
 8003d14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4836      	ldr	r0, [pc, #216]	; (8003df8 <HAL_UART_MspInit+0x2dc>)
 8003d1e:	f001 fce3 	bl	80056e8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8003d22:	4b36      	ldr	r3, [pc, #216]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d24:	4a36      	ldr	r2, [pc, #216]	; (8003e00 <HAL_UART_MspInit+0x2e4>)
 8003d26:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003d28:	4b34      	ldr	r3, [pc, #208]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d30:	4b32      	ldr	r3, [pc, #200]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d36:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d3c:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d42:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d44:	4b2d      	ldr	r3, [pc, #180]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d4a:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003d50:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d56:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d5c:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003d62:	4826      	ldr	r0, [pc, #152]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d64:	f001 f8be 	bl	8004ee4 <HAL_DMA_Init>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <HAL_UART_MspInit+0x256>
      Error_Handler();
 8003d6e:	f7ff fa9b 	bl	80032a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
 8003d78:	4a20      	ldr	r2, [pc, #128]	; (8003dfc <HAL_UART_MspInit+0x2e0>)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003d7e:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003d80:	4a21      	ldr	r2, [pc, #132]	; (8003e08 <HAL_UART_MspInit+0x2ec>)
 8003d82:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003d84:	4b1f      	ldr	r3, [pc, #124]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003d86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d8a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003d8e:	2240      	movs	r2, #64	; 0x40
 8003d90:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d92:	4b1c      	ldr	r3, [pc, #112]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d98:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003d9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d9e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003da0:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003da6:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003dac:	4b15      	ldr	r3, [pc, #84]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003db8:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003dbe:	4811      	ldr	r0, [pc, #68]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003dc0:	f001 f890 	bl	8004ee4 <HAL_DMA_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_UART_MspInit+0x2b2>
      Error_Handler();
 8003dca:	f7ff fa6d 	bl	80032a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a0c      	ldr	r2, [pc, #48]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003dd2:	635a      	str	r2, [r3, #52]	; 0x34
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <HAL_UART_MspInit+0x2e8>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2100      	movs	r1, #0
 8003dde:	2025      	movs	r0, #37	; 0x25
 8003de0:	f001 f849 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003de4:	2025      	movs	r0, #37	; 0x25
 8003de6:	f001 f862 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 8003dea:	e13d      	b.n	8004068 <HAL_UART_MspInit+0x54c>
 8003dec:	40011000 	.word	0x40011000
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40020000 	.word	0x40020000
 8003df8:	40020400 	.word	0x40020400
 8003dfc:	20000628 	.word	0x20000628
 8003e00:	40026488 	.word	0x40026488
 8003e04:	20000688 	.word	0x20000688
 8003e08:	400264b8 	.word	0x400264b8
  else if(huart->Instance==USART2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a97      	ldr	r2, [pc, #604]	; (8004070 <HAL_UART_MspInit+0x554>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	f040 8091 	bne.w	8003f3a <HAL_UART_MspInit+0x41e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	4b95      	ldr	r3, [pc, #596]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e20:	4a94      	ldr	r2, [pc, #592]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e26:	6413      	str	r3, [r2, #64]	; 0x40
 8003e28:	4b92      	ldr	r3, [pc, #584]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	4b8e      	ldr	r3, [pc, #568]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3c:	4a8d      	ldr	r2, [pc, #564]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003e3e:	f043 0301 	orr.w	r3, r3, #1
 8003e42:	6313      	str	r3, [r2, #48]	; 0x30
 8003e44:	4b8b      	ldr	r3, [pc, #556]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e50:	230c      	movs	r3, #12
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	2302      	movs	r3, #2
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e60:	2307      	movs	r3, #7
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4883      	ldr	r0, [pc, #524]	; (8004078 <HAL_UART_MspInit+0x55c>)
 8003e6c:	f001 fc3c 	bl	80056e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003e70:	4b82      	ldr	r3, [pc, #520]	; (800407c <HAL_UART_MspInit+0x560>)
 8003e72:	4a83      	ldr	r2, [pc, #524]	; (8004080 <HAL_UART_MspInit+0x564>)
 8003e74:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003e76:	4b81      	ldr	r3, [pc, #516]	; (800407c <HAL_UART_MspInit+0x560>)
 8003e78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e7c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e7e:	4b7f      	ldr	r3, [pc, #508]	; (800407c <HAL_UART_MspInit+0x560>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e84:	4b7d      	ldr	r3, [pc, #500]	; (800407c <HAL_UART_MspInit+0x560>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e8a:	4b7c      	ldr	r3, [pc, #496]	; (800407c <HAL_UART_MspInit+0x560>)
 8003e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e90:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e92:	4b7a      	ldr	r3, [pc, #488]	; (800407c <HAL_UART_MspInit+0x560>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e98:	4b78      	ldr	r3, [pc, #480]	; (800407c <HAL_UART_MspInit+0x560>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003e9e:	4b77      	ldr	r3, [pc, #476]	; (800407c <HAL_UART_MspInit+0x560>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003ea4:	4b75      	ldr	r3, [pc, #468]	; (800407c <HAL_UART_MspInit+0x560>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eaa:	4b74      	ldr	r3, [pc, #464]	; (800407c <HAL_UART_MspInit+0x560>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003eb0:	4872      	ldr	r0, [pc, #456]	; (800407c <HAL_UART_MspInit+0x560>)
 8003eb2:	f001 f817 	bl	8004ee4 <HAL_DMA_Init>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_UART_MspInit+0x3a4>
      Error_Handler();
 8003ebc:	f7ff f9f4 	bl	80032a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a6e      	ldr	r2, [pc, #440]	; (800407c <HAL_UART_MspInit+0x560>)
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ec6:	4a6d      	ldr	r2, [pc, #436]	; (800407c <HAL_UART_MspInit+0x560>)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003ecc:	4b6d      	ldr	r3, [pc, #436]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003ece:	4a6e      	ldr	r2, [pc, #440]	; (8004088 <HAL_UART_MspInit+0x56c>)
 8003ed0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003ed2:	4b6c      	ldr	r3, [pc, #432]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003ed4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ed8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003eda:	4b6a      	ldr	r3, [pc, #424]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003edc:	2240      	movs	r2, #64	; 0x40
 8003ede:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ee0:	4b68      	ldr	r3, [pc, #416]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003ee6:	4b67      	ldr	r3, [pc, #412]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eec:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eee:	4b65      	ldr	r3, [pc, #404]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ef4:	4b63      	ldr	r3, [pc, #396]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003efa:	4b62      	ldr	r3, [pc, #392]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f00:	4b60      	ldr	r3, [pc, #384]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f06:	4b5f      	ldr	r3, [pc, #380]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f0c:	485d      	ldr	r0, [pc, #372]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003f0e:	f000 ffe9 	bl	8004ee4 <HAL_DMA_Init>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_UART_MspInit+0x400>
      Error_Handler();
 8003f18:	f7ff f9c6 	bl	80032a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a59      	ldr	r2, [pc, #356]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003f20:	635a      	str	r2, [r3, #52]	; 0x34
 8003f22:	4a58      	ldr	r2, [pc, #352]	; (8004084 <HAL_UART_MspInit+0x568>)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	2026      	movs	r0, #38	; 0x26
 8003f2e:	f000 ffa2 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f32:	2026      	movs	r0, #38	; 0x26
 8003f34:	f000 ffbb 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 8003f38:	e096      	b.n	8004068 <HAL_UART_MspInit+0x54c>
  else if(huart->Instance==USART3)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a53      	ldr	r2, [pc, #332]	; (800408c <HAL_UART_MspInit+0x570>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	f040 8091 	bne.w	8004068 <HAL_UART_MspInit+0x54c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	4a49      	ldr	r2, [pc, #292]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f54:	6413      	str	r3, [r2, #64]	; 0x40
 8003f56:	4b47      	ldr	r3, [pc, #284]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	4a42      	ldr	r2, [pc, #264]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	6313      	str	r3, [r2, #48]	; 0x30
 8003f72:	4b40      	ldr	r3, [pc, #256]	; (8004074 <HAL_UART_MspInit+0x558>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003f7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	2302      	movs	r3, #2
 8003f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f90:	2307      	movs	r3, #7
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f98:	4619      	mov	r1, r3
 8003f9a:	483d      	ldr	r0, [pc, #244]	; (8004090 <HAL_UART_MspInit+0x574>)
 8003f9c:	f001 fba4 	bl	80056e8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003fa0:	4b3c      	ldr	r3, [pc, #240]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003fa2:	4a3d      	ldr	r2, [pc, #244]	; (8004098 <HAL_UART_MspInit+0x57c>)
 8003fa4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003fa6:	4b3b      	ldr	r3, [pc, #236]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003fa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fac:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fae:	4b39      	ldr	r3, [pc, #228]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fb4:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fba:	4b36      	ldr	r3, [pc, #216]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fc0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fc2:	4b34      	ldr	r3, [pc, #208]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fc8:	4b32      	ldr	r3, [pc, #200]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003fce:	4b31      	ldr	r3, [pc, #196]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003fd4:	4b2f      	ldr	r3, [pc, #188]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fda:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003fe0:	482c      	ldr	r0, [pc, #176]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003fe2:	f000 ff7f 	bl	8004ee4 <HAL_DMA_Init>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_UART_MspInit+0x4d4>
      Error_Handler();
 8003fec:	f7ff f95c 	bl	80032a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a28      	ldr	r2, [pc, #160]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ff6:	4a27      	ldr	r2, [pc, #156]	; (8004094 <HAL_UART_MspInit+0x578>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003ffc:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_UART_MspInit+0x580>)
 8003ffe:	4a28      	ldr	r2, [pc, #160]	; (80040a0 <HAL_UART_MspInit+0x584>)
 8004000:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004002:	4b26      	ldr	r3, [pc, #152]	; (800409c <HAL_UART_MspInit+0x580>)
 8004004:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004008:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800400a:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_UART_MspInit+0x580>)
 800400c:	2240      	movs	r2, #64	; 0x40
 800400e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004010:	4b22      	ldr	r3, [pc, #136]	; (800409c <HAL_UART_MspInit+0x580>)
 8004012:	2200      	movs	r2, #0
 8004014:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004016:	4b21      	ldr	r3, [pc, #132]	; (800409c <HAL_UART_MspInit+0x580>)
 8004018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800401c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800401e:	4b1f      	ldr	r3, [pc, #124]	; (800409c <HAL_UART_MspInit+0x580>)
 8004020:	2200      	movs	r2, #0
 8004022:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <HAL_UART_MspInit+0x580>)
 8004026:	2200      	movs	r2, #0
 8004028:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800402a:	4b1c      	ldr	r3, [pc, #112]	; (800409c <HAL_UART_MspInit+0x580>)
 800402c:	2200      	movs	r2, #0
 800402e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004030:	4b1a      	ldr	r3, [pc, #104]	; (800409c <HAL_UART_MspInit+0x580>)
 8004032:	2200      	movs	r2, #0
 8004034:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004036:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_UART_MspInit+0x580>)
 8004038:	2200      	movs	r2, #0
 800403a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800403c:	4817      	ldr	r0, [pc, #92]	; (800409c <HAL_UART_MspInit+0x580>)
 800403e:	f000 ff51 	bl	8004ee4 <HAL_DMA_Init>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_UART_MspInit+0x530>
      Error_Handler();
 8004048:	f7ff f92e 	bl	80032a8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a13      	ldr	r2, [pc, #76]	; (800409c <HAL_UART_MspInit+0x580>)
 8004050:	635a      	str	r2, [r3, #52]	; 0x34
 8004052:	4a12      	ldr	r2, [pc, #72]	; (800409c <HAL_UART_MspInit+0x580>)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004058:	2200      	movs	r2, #0
 800405a:	2100      	movs	r1, #0
 800405c:	2027      	movs	r0, #39	; 0x27
 800405e:	f000 ff0a 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004062:	2027      	movs	r0, #39	; 0x27
 8004064:	f000 ff23 	bl	8004eae <HAL_NVIC_EnableIRQ>
}
 8004068:	bf00      	nop
 800406a:	3740      	adds	r7, #64	; 0x40
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40004400 	.word	0x40004400
 8004074:	40023800 	.word	0x40023800
 8004078:	40020000 	.word	0x40020000
 800407c:	200006e8 	.word	0x200006e8
 8004080:	40026088 	.word	0x40026088
 8004084:	20000748 	.word	0x20000748
 8004088:	400260a0 	.word	0x400260a0
 800408c:	40004800 	.word	0x40004800
 8004090:	40020400 	.word	0x40020400
 8004094:	200007a8 	.word	0x200007a8
 8004098:	40026028 	.word	0x40026028
 800409c:	20000808 	.word	0x20000808
 80040a0:	40026058 	.word	0x40026058

080040a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040a8:	e7fe      	b.n	80040a8 <NMI_Handler+0x4>

080040aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040ae:	e7fe      	b.n	80040ae <HardFault_Handler+0x4>

080040b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040b4:	e7fe      	b.n	80040b4 <MemManage_Handler+0x4>

080040b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ba:	e7fe      	b.n	80040ba <BusFault_Handler+0x4>

080040bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040c0:	e7fe      	b.n	80040c0 <UsageFault_Handler+0x4>

080040c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040f0:	f000 f9d8 	bl	80044a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040f4:	bf00      	nop
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Enc1A_Pin);
 80040fc:	2002      	movs	r0, #2
 80040fe:	f001 fcc1 	bl	8005a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  Encoder1->Counting();
 8004102:	4b03      	ldr	r3, [pc, #12]	; (8004110 <EXTI1_IRQHandler+0x18>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fc ff09 	bl	8000f1e <_ZN7Encoder8CountingEv>
  /* USER CODE END EXTI1_IRQn 1 */
}
 800410c:	bf00      	nop
 800410e:	bd80      	pop	{r7, pc}
 8004110:	200008ac 	.word	0x200008ac

08004114 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(En4B_Pin);
 8004118:	2008      	movs	r0, #8
 800411a:	f001 fcb3 	bl	8005a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  Encoder3->CountingReverse();
 800411e:	4b03      	ldr	r3, [pc, #12]	; (800412c <EXTI3_IRQHandler+0x18>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc ff1e 	bl	8000f64 <_ZN7Encoder15CountingReverseEv>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8004128:	bf00      	nop
 800412a:	bd80      	pop	{r7, pc}
 800412c:	200008b4 	.word	0x200008b4

08004130 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Dir4_Pin);
 8004134:	2010      	movs	r0, #16
 8004136:	f001 fca5 	bl	8005a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  Encoder2->Counting();
 800413a:	4b03      	ldr	r3, [pc, #12]	; (8004148 <EXTI4_IRQHandler+0x18>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc feed 	bl	8000f1e <_ZN7Encoder8CountingEv>
  /* USER CODE END EXTI4_IRQn 1 */
}
 8004144:	bf00      	nop
 8004146:	bd80      	pop	{r7, pc}
 8004148:	200008b0 	.word	0x200008b0

0800414c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004150:	4802      	ldr	r0, [pc, #8]	; (800415c <DMA1_Stream1_IRQHandler+0x10>)
 8004152:	f001 f85f 	bl	8005214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	200007a8 	.word	0x200007a8

08004160 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004164:	4802      	ldr	r0, [pc, #8]	; (8004170 <DMA1_Stream2_IRQHandler+0x10>)
 8004166:	f001 f855 	bl	8005214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800416a:	bf00      	nop
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	200005c8 	.word	0x200005c8

08004174 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004178:	4802      	ldr	r0, [pc, #8]	; (8004184 <DMA1_Stream3_IRQHandler+0x10>)
 800417a:	f001 f84b 	bl	8005214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000808 	.word	0x20000808

08004188 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 800418c:	4802      	ldr	r0, [pc, #8]	; (8004198 <DMA1_Stream4_IRQHandler+0x10>)
 800418e:	f001 f841 	bl	8005214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004192:	bf00      	nop
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000568 	.word	0x20000568

0800419c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80041a0:	4802      	ldr	r0, [pc, #8]	; (80041ac <DMA1_Stream5_IRQHandler+0x10>)
 80041a2:	f001 f837 	bl	8005214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200006e8 	.word	0x200006e8

080041b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80041b4:	4802      	ldr	r0, [pc, #8]	; (80041c0 <DMA1_Stream6_IRQHandler+0x10>)
 80041b6:	f001 f82d 	bl	8005214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000748 	.word	0x20000748

080041c4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80041c8:	4803      	ldr	r0, [pc, #12]	; (80041d8 <ADC_IRQHandler+0x14>)
 80041ca:	f000 f9f2 	bl	80045b2 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80041ce:	4803      	ldr	r0, [pc, #12]	; (80041dc <ADC_IRQHandler+0x18>)
 80041d0:	f000 f9ef 	bl	80045b2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	20000278 	.word	0x20000278
 80041dc:	200002c0 	.word	0x200002c0

080041e0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Mode3_Pin);
 80041e4:	2080      	movs	r0, #128	; 0x80
 80041e6:	f001 fc4d 	bl	8005a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  Encoder4->Counting();
 80041ea:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <EXTI9_5_IRQHandler+0x18>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fc fe95 	bl	8000f1e <_ZN7Encoder8CountingEv>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80041f4:	bf00      	nop
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200008b8 	.word	0x200008b8

080041fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004200:	4802      	ldr	r0, [pc, #8]	; (800420c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004202:	f003 fbc9 	bl	8007998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200003c8 	.word	0x200003c8

08004210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004214:	4802      	ldr	r0, [pc, #8]	; (8004220 <TIM2_IRQHandler+0x10>)
 8004216:	f003 fbbf 	bl	8007998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	20000410 	.word	0x20000410

08004224 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004228:	4802      	ldr	r0, [pc, #8]	; (8004234 <USART1_IRQHandler+0x10>)
 800422a:	f004 fbaf 	bl	800898c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	2000049c 	.word	0x2000049c

08004238 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800423c:	4802      	ldr	r0, [pc, #8]	; (8004248 <USART2_IRQHandler+0x10>)
 800423e:	f004 fba5 	bl	800898c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200004e0 	.word	0x200004e0

0800424c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004250:	4802      	ldr	r0, [pc, #8]	; (800425c <USART3_IRQHandler+0x10>)
 8004252:	f004 fb9b 	bl	800898c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20000524 	.word	0x20000524

08004260 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004264:	4802      	ldr	r0, [pc, #8]	; (8004270 <UART4_IRQHandler+0x10>)
 8004266:	f004 fb91 	bl	800898c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000458 	.word	0x20000458

08004274 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004278:	4802      	ldr	r0, [pc, #8]	; (8004284 <DMA2_Stream0_IRQHandler+0x10>)
 800427a:	f000 ffcb 	bl	8005214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000308 	.word	0x20000308

08004288 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800428c:	4802      	ldr	r0, [pc, #8]	; (8004298 <DMA2_Stream2_IRQHandler+0x10>)
 800428e:	f000 ffc1 	bl	8005214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000368 	.word	0x20000368

0800429c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80042a0:	4802      	ldr	r0, [pc, #8]	; (80042ac <OTG_FS_IRQHandler+0x10>)
 80042a2:	f001 fd62 	bl	8005d6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	20001fe4 	.word	0x20001fe4

080042b0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80042b4:	4802      	ldr	r0, [pc, #8]	; (80042c0 <DMA2_Stream5_IRQHandler+0x10>)
 80042b6:	f000 ffad 	bl	8005214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000628 	.word	0x20000628

080042c4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80042c8:	4802      	ldr	r0, [pc, #8]	; (80042d4 <DMA2_Stream7_IRQHandler+0x10>)
 80042ca:	f000 ffa3 	bl	8005214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000688 	.word	0x20000688

080042d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
	return 1;
 80042dc:	2301      	movs	r3, #1
}
 80042de:	4618      	mov	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <_kill>:

int _kill(int pid, int sig)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042f2:	f00b f8f3 	bl	800f4dc <__errno>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2216      	movs	r2, #22
 80042fa:	601a      	str	r2, [r3, #0]
	return -1;
 80042fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004300:	4618      	mov	r0, r3
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <_exit>:

void _exit (int status)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004310:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ffe7 	bl	80042e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800431a:	e7fe      	b.n	800431a <_exit+0x12>

0800431c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004324:	4a14      	ldr	r2, [pc, #80]	; (8004378 <_sbrk+0x5c>)
 8004326:	4b15      	ldr	r3, [pc, #84]	; (800437c <_sbrk+0x60>)
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004330:	4b13      	ldr	r3, [pc, #76]	; (8004380 <_sbrk+0x64>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d102      	bne.n	800433e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004338:	4b11      	ldr	r3, [pc, #68]	; (8004380 <_sbrk+0x64>)
 800433a:	4a12      	ldr	r2, [pc, #72]	; (8004384 <_sbrk+0x68>)
 800433c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <_sbrk+0x64>)
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4413      	add	r3, r2
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	429a      	cmp	r2, r3
 800434a:	d207      	bcs.n	800435c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800434c:	f00b f8c6 	bl	800f4dc <__errno>
 8004350:	4603      	mov	r3, r0
 8004352:	220c      	movs	r2, #12
 8004354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800435a:	e009      	b.n	8004370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800435c:	4b08      	ldr	r3, [pc, #32]	; (8004380 <_sbrk+0x64>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <_sbrk+0x64>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	4a05      	ldr	r2, [pc, #20]	; (8004380 <_sbrk+0x64>)
 800436c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800436e:	68fb      	ldr	r3, [r7, #12]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	20020000 	.word	0x20020000
 800437c:	00000400 	.word	0x00000400
 8004380:	200008dc 	.word	0x200008dc
 8004384:	20002400 	.word	0x20002400

08004388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <SystemInit+0x20>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	4a05      	ldr	r2, [pc, #20]	; (80043a8 <SystemInit+0x20>)
 8004394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800439c:	bf00      	nop
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	e000ed00 	.word	0xe000ed00

080043ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80043ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043b0:	480d      	ldr	r0, [pc, #52]	; (80043e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043b2:	490e      	ldr	r1, [pc, #56]	; (80043ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043b4:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043b8:	e002      	b.n	80043c0 <LoopCopyDataInit>

080043ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043be:	3304      	adds	r3, #4

080043c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043c4:	d3f9      	bcc.n	80043ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043c6:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043c8:	4c0b      	ldr	r4, [pc, #44]	; (80043f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043cc:	e001      	b.n	80043d2 <LoopFillZerobss>

080043ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043d0:	3204      	adds	r2, #4

080043d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043d4:	d3fb      	bcc.n	80043ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80043d6:	f7ff ffd7 	bl	8004388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043da:	f00b f885 	bl	800f4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043de:	f7fe fa4e 	bl	800287e <main>
  bx  lr    
 80043e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043ec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80043f0:	0800fe5c 	.word	0x0800fe5c
  ldr r2, =_sbss
 80043f4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80043f8:	200023fc 	.word	0x200023fc

080043fc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043fc:	e7fe      	b.n	80043fc <CAN1_RX0_IRQHandler>
	...

08004400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004404:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <HAL_Init+0x40>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a0d      	ldr	r2, [pc, #52]	; (8004440 <HAL_Init+0x40>)
 800440a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800440e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_Init+0x40>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a0a      	ldr	r2, [pc, #40]	; (8004440 <HAL_Init+0x40>)
 8004416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800441a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <HAL_Init+0x40>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a07      	ldr	r2, [pc, #28]	; (8004440 <HAL_Init+0x40>)
 8004422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004428:	2003      	movs	r0, #3
 800442a:	f000 fd19 	bl	8004e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800442e:	2000      	movs	r0, #0
 8004430:	f000 f808 	bl	8004444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004434:	f7ff f9e0 	bl	80037f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40023c00 	.word	0x40023c00

08004444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800444c:	4b12      	ldr	r3, [pc, #72]	; (8004498 <HAL_InitTick+0x54>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4b12      	ldr	r3, [pc, #72]	; (800449c <HAL_InitTick+0x58>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	4619      	mov	r1, r3
 8004456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800445a:	fbb3 f3f1 	udiv	r3, r3, r1
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fd31 	bl	8004eca <HAL_SYSTICK_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e00e      	b.n	8004490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b0f      	cmp	r3, #15
 8004476:	d80a      	bhi.n	800448e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004478:	2200      	movs	r2, #0
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004480:	f000 fcf9 	bl	8004e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004484:	4a06      	ldr	r2, [pc, #24]	; (80044a0 <HAL_InitTick+0x5c>)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	e000      	b.n	8004490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000000 	.word	0x20000000
 800449c:	20000008 	.word	0x20000008
 80044a0:	20000004 	.word	0x20000004

080044a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044a8:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <HAL_IncTick+0x20>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_IncTick+0x24>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4413      	add	r3, r2
 80044b4:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <HAL_IncTick+0x24>)
 80044b6:	6013      	str	r3, [r2, #0]
}
 80044b8:	bf00      	nop
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000008 	.word	0x20000008
 80044c8:	20000b10 	.word	0x20000b10

080044cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return uwTick;
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <HAL_GetTick+0x14>)
 80044d2:	681b      	ldr	r3, [r3, #0]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000b10 	.word	0x20000b10

080044e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044ec:	f7ff ffee 	bl	80044cc <HAL_GetTick>
 80044f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044fc:	d005      	beq.n	800450a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044fe:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <HAL_Delay+0x44>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800450a:	bf00      	nop
 800450c:	f7ff ffde 	bl	80044cc <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	429a      	cmp	r2, r3
 800451a:	d8f7      	bhi.n	800450c <HAL_Delay+0x28>
  {
  }
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000008 	.word	0x20000008

0800452c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e033      	b.n	80045aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff f97c 	bl	8003848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b00      	cmp	r3, #0
 8004568:	d118      	bne.n	800459c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004572:	f023 0302 	bic.w	r3, r3, #2
 8004576:	f043 0202 	orr.w	r2, r3, #2
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa98 	bl	8004ab4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	f043 0201 	orr.w	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	641a      	str	r2, [r3, #64]	; 0x40
 800459a:	e001      	b.n	80045a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	2300      	movs	r3, #0
 80045c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 0320 	and.w	r3, r3, #32
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d049      	beq.n	8004688 <HAL_ADC_IRQHandler+0xd6>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d046      	beq.n	8004688 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	f003 0310 	and.w	r3, r3, #16
 8004602:	2b00      	cmp	r3, #0
 8004604:	d105      	bne.n	8004612 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d12b      	bne.n	8004678 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004624:	2b00      	cmp	r3, #0
 8004626:	d127      	bne.n	8004678 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004632:	2b00      	cmp	r3, #0
 8004634:	d006      	beq.n	8004644 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004640:	2b00      	cmp	r3, #0
 8004642:	d119      	bne.n	8004678 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0220 	bic.w	r2, r2, #32
 8004652:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d105      	bne.n	8004678 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f043 0201 	orr.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f8db 	bl	8004834 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f06f 0212 	mvn.w	r2, #18
 8004686:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b04      	cmp	r3, #4
 8004694:	bf0c      	ite	eq
 8004696:	2301      	moveq	r3, #1
 8004698:	2300      	movne	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a8:	2b80      	cmp	r3, #128	; 0x80
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d057      	beq.n	800476a <HAL_ADC_IRQHandler+0x1b8>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d054      	beq.n	800476a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d105      	bne.n	80046d8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d139      	bne.n	800475a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d006      	beq.n	8004702 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d12b      	bne.n	800475a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800470c:	2b00      	cmp	r3, #0
 800470e:	d124      	bne.n	800475a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800471a:	2b00      	cmp	r3, #0
 800471c:	d11d      	bne.n	800475a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004722:	2b00      	cmp	r3, #0
 8004724:	d119      	bne.n	800475a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004734:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d105      	bne.n	800475a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f043 0201 	orr.w	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 faa6 	bl	8004cac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 020c 	mvn.w	r2, #12
 8004768:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d017      	beq.n	80047cc <HAL_ADC_IRQHandler+0x21a>
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d014      	beq.n	80047cc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d10d      	bne.n	80047cc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f843 	bl	8004848 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f06f 0201 	mvn.w	r2, #1
 80047ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047f0:	bf0c      	ite	eq
 80047f2:	2301      	moveq	r3, #1
 80047f4:	2300      	movne	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d015      	beq.n	800482c <HAL_ADC_IRQHandler+0x27a>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d012      	beq.n	800482c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	f043 0202 	orr.w	r2, r3, #2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f06f 0220 	mvn.w	r2, #32
 800481a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f81d 	bl	800485c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f06f 0220 	mvn.w	r2, #32
 800482a:	601a      	str	r2, [r3, #0]
  }
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_ADC_ConfigChannel+0x1c>
 8004888:	2302      	movs	r3, #2
 800488a:	e105      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x228>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b09      	cmp	r3, #9
 800489a:	d925      	bls.n	80048e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68d9      	ldr	r1, [r3, #12]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	4613      	mov	r3, r2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	4413      	add	r3, r2
 80048b0:	3b1e      	subs	r3, #30
 80048b2:	2207      	movs	r2, #7
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43da      	mvns	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	400a      	ands	r2, r1
 80048c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68d9      	ldr	r1, [r3, #12]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	4618      	mov	r0, r3
 80048d4:	4603      	mov	r3, r0
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4403      	add	r3, r0
 80048da:	3b1e      	subs	r3, #30
 80048dc:	409a      	lsls	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	e022      	b.n	800492e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6919      	ldr	r1, [r3, #16]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	4613      	mov	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	2207      	movs	r2, #7
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43da      	mvns	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	400a      	ands	r2, r1
 800490a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6919      	ldr	r1, [r3, #16]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	4618      	mov	r0, r3
 800491e:	4603      	mov	r3, r0
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	4403      	add	r3, r0
 8004924:	409a      	lsls	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b06      	cmp	r3, #6
 8004934:	d824      	bhi.n	8004980 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	3b05      	subs	r3, #5
 8004948:	221f      	movs	r2, #31
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43da      	mvns	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	400a      	ands	r2, r1
 8004956:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	4618      	mov	r0, r3
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	3b05      	subs	r3, #5
 8004972:	fa00 f203 	lsl.w	r2, r0, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	635a      	str	r2, [r3, #52]	; 0x34
 800497e:	e04c      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2b0c      	cmp	r3, #12
 8004986:	d824      	bhi.n	80049d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	3b23      	subs	r3, #35	; 0x23
 800499a:	221f      	movs	r2, #31
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	43da      	mvns	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	400a      	ands	r2, r1
 80049a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	4618      	mov	r0, r3
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	3b23      	subs	r3, #35	; 0x23
 80049c4:	fa00 f203 	lsl.w	r2, r0, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
 80049d0:	e023      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	3b41      	subs	r3, #65	; 0x41
 80049e4:	221f      	movs	r2, #31
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43da      	mvns	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	400a      	ands	r2, r1
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	4618      	mov	r0, r3
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3b41      	subs	r3, #65	; 0x41
 8004a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a1a:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <HAL_ADC_ConfigChannel+0x234>)
 8004a1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a21      	ldr	r2, [pc, #132]	; (8004aa8 <HAL_ADC_ConfigChannel+0x238>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d109      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x1cc>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b12      	cmp	r3, #18
 8004a2e:	d105      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a19      	ldr	r2, [pc, #100]	; (8004aa8 <HAL_ADC_ConfigChannel+0x238>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d123      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x21e>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b10      	cmp	r3, #16
 8004a4c:	d003      	beq.n	8004a56 <HAL_ADC_ConfigChannel+0x1e6>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b11      	cmp	r3, #17
 8004a54:	d11b      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b10      	cmp	r3, #16
 8004a68:	d111      	bne.n	8004a8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <HAL_ADC_ConfigChannel+0x23c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a10      	ldr	r2, [pc, #64]	; (8004ab0 <HAL_ADC_ConfigChannel+0x240>)
 8004a70:	fba2 2303 	umull	r2, r3, r2, r3
 8004a74:	0c9a      	lsrs	r2, r3, #18
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a80:	e002      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f9      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	40012300 	.word	0x40012300
 8004aa8:	40012000 	.word	0x40012000
 8004aac:	20000000 	.word	0x20000000
 8004ab0:	431bde83 	.word	0x431bde83

08004ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004abc:	4b79      	ldr	r3, [pc, #484]	; (8004ca4 <ADC_Init+0x1f0>)
 8004abe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6859      	ldr	r1, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	021a      	lsls	r2, r3, #8
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6859      	ldr	r1, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6899      	ldr	r1, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b46:	4a58      	ldr	r2, [pc, #352]	; (8004ca8 <ADC_Init+0x1f4>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d022      	beq.n	8004b92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6899      	ldr	r1, [r3, #8]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6899      	ldr	r1, [r3, #8]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	e00f      	b.n	8004bb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004bb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0202 	bic.w	r2, r2, #2
 8004bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6899      	ldr	r1, [r3, #8]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	7e1b      	ldrb	r3, [r3, #24]
 8004bcc:	005a      	lsls	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01b      	beq.n	8004c18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	035a      	lsls	r2, r3, #13
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	e007      	b.n	8004c28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	051a      	lsls	r2, r3, #20
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6899      	ldr	r1, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c6a:	025a      	lsls	r2, r3, #9
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6899      	ldr	r1, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	029a      	lsls	r2, r3, #10
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40012300 	.word	0x40012300
 8004ca8:	0f000001 	.word	0x0f000001

08004cac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <__NVIC_SetPriorityGrouping+0x44>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cdc:	4013      	ands	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cf2:	4a04      	ldr	r2, [pc, #16]	; (8004d04 <__NVIC_SetPriorityGrouping+0x44>)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	60d3      	str	r3, [r2, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	e000ed00 	.word	0xe000ed00

08004d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d0c:	4b04      	ldr	r3, [pc, #16]	; (8004d20 <__NVIC_GetPriorityGrouping+0x18>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	0a1b      	lsrs	r3, r3, #8
 8004d12:	f003 0307 	and.w	r3, r3, #7
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	e000ed00 	.word	0xe000ed00

08004d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	db0b      	blt.n	8004d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	f003 021f 	and.w	r2, r3, #31
 8004d3c:	4907      	ldr	r1, [pc, #28]	; (8004d5c <__NVIC_EnableIRQ+0x38>)
 8004d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	2001      	movs	r0, #1
 8004d46:	fa00 f202 	lsl.w	r2, r0, r2
 8004d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	e000e100 	.word	0xe000e100

08004d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	6039      	str	r1, [r7, #0]
 8004d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	db0a      	blt.n	8004d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	490c      	ldr	r1, [pc, #48]	; (8004dac <__NVIC_SetPriority+0x4c>)
 8004d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7e:	0112      	lsls	r2, r2, #4
 8004d80:	b2d2      	uxtb	r2, r2
 8004d82:	440b      	add	r3, r1
 8004d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d88:	e00a      	b.n	8004da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	4908      	ldr	r1, [pc, #32]	; (8004db0 <__NVIC_SetPriority+0x50>)
 8004d90:	79fb      	ldrb	r3, [r7, #7]
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	3b04      	subs	r3, #4
 8004d98:	0112      	lsls	r2, r2, #4
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	761a      	strb	r2, [r3, #24]
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	e000e100 	.word	0xe000e100
 8004db0:	e000ed00 	.word	0xe000ed00

08004db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	; 0x24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f1c3 0307 	rsb	r3, r3, #7
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	bf28      	it	cs
 8004dd2:	2304      	movcs	r3, #4
 8004dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3304      	adds	r3, #4
 8004dda:	2b06      	cmp	r3, #6
 8004ddc:	d902      	bls.n	8004de4 <NVIC_EncodePriority+0x30>
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	3b03      	subs	r3, #3
 8004de2:	e000      	b.n	8004de6 <NVIC_EncodePriority+0x32>
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43da      	mvns	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	401a      	ands	r2, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	fa01 f303 	lsl.w	r3, r1, r3
 8004e06:	43d9      	mvns	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e0c:	4313      	orrs	r3, r2
         );
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3724      	adds	r7, #36	; 0x24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e2c:	d301      	bcc.n	8004e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e00f      	b.n	8004e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e32:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <SysTick_Config+0x40>)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e3a:	210f      	movs	r1, #15
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e40:	f7ff ff8e 	bl	8004d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <SysTick_Config+0x40>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e4a:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <SysTick_Config+0x40>)
 8004e4c:	2207      	movs	r2, #7
 8004e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	e000e010 	.word	0xe000e010

08004e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff ff29 	bl	8004cc0 <__NVIC_SetPriorityGrouping>
}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b086      	sub	sp, #24
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e88:	f7ff ff3e 	bl	8004d08 <__NVIC_GetPriorityGrouping>
 8004e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	6978      	ldr	r0, [r7, #20]
 8004e94:	f7ff ff8e 	bl	8004db4 <NVIC_EncodePriority>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e9e:	4611      	mov	r1, r2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff ff5d 	bl	8004d60 <__NVIC_SetPriority>
}
 8004ea6:	bf00      	nop
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff ff31 	bl	8004d24 <__NVIC_EnableIRQ>
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7ff ffa2 	bl	8004e1c <SysTick_Config>
 8004ed8:	4603      	mov	r3, r0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004ef0:	f7ff faec 	bl	80044cc <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e099      	b.n	8005034 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f20:	e00f      	b.n	8004f42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f22:	f7ff fad3 	bl	80044cc <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b05      	cmp	r3, #5
 8004f2e:	d908      	bls.n	8004f42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2203      	movs	r2, #3
 8004f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e078      	b.n	8005034 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e8      	bne.n	8004f22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4b38      	ldr	r3, [pc, #224]	; (800503c <HAL_DMA_Init+0x158>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d107      	bne.n	8004fac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f023 0307 	bic.w	r3, r3, #7
 8004fc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d117      	bne.n	8005006 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00e      	beq.n	8005006 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 fb01 	bl	80055f0 <DMA_CheckFifoParam>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d008      	beq.n	8005006 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2240      	movs	r2, #64	; 0x40
 8004ff8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005002:	2301      	movs	r3, #1
 8005004:	e016      	b.n	8005034 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fab8 	bl	8005584 <DMA_CalcBaseAndBitshift>
 8005014:	4603      	mov	r3, r0
 8005016:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501c:	223f      	movs	r2, #63	; 0x3f
 800501e:	409a      	lsls	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	f010803f 	.word	0xf010803f

08005040 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005056:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800505e:	2b01      	cmp	r3, #1
 8005060:	d101      	bne.n	8005066 <HAL_DMA_Start_IT+0x26>
 8005062:	2302      	movs	r3, #2
 8005064:	e040      	b.n	80050e8 <HAL_DMA_Start_IT+0xa8>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2201      	movs	r2, #1
 800506a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b01      	cmp	r3, #1
 8005078:	d12f      	bne.n	80050da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	68b9      	ldr	r1, [r7, #8]
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f000 fa4a 	bl	8005528 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005098:	223f      	movs	r2, #63	; 0x3f
 800509a:	409a      	lsls	r2, r3
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0216 	orr.w	r2, r2, #22
 80050ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d007      	beq.n	80050c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0208 	orr.w	r2, r2, #8
 80050c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0201 	orr.w	r2, r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	e005      	b.n	80050e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050e2:	2302      	movs	r3, #2
 80050e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80050fe:	f7ff f9e5 	bl	80044cc <HAL_GetTick>
 8005102:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d008      	beq.n	8005122 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2280      	movs	r2, #128	; 0x80
 8005114:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e052      	b.n	80051c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0216 	bic.w	r2, r2, #22
 8005130:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005140:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d103      	bne.n	8005152 <HAL_DMA_Abort+0x62>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0208 	bic.w	r2, r2, #8
 8005160:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005172:	e013      	b.n	800519c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005174:	f7ff f9aa 	bl	80044cc <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b05      	cmp	r3, #5
 8005180:	d90c      	bls.n	800519c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2203      	movs	r2, #3
 800518c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e015      	b.n	80051c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e4      	bne.n	8005174 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ae:	223f      	movs	r2, #63	; 0x3f
 80051b0:	409a      	lsls	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d004      	beq.n	80051ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2280      	movs	r2, #128	; 0x80
 80051e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e00c      	b.n	8005208 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2205      	movs	r2, #5
 80051f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0201 	bic.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005220:	4b92      	ldr	r3, [pc, #584]	; (800546c <HAL_DMA_IRQHandler+0x258>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a92      	ldr	r2, [pc, #584]	; (8005470 <HAL_DMA_IRQHandler+0x25c>)
 8005226:	fba2 2303 	umull	r2, r3, r2, r3
 800522a:	0a9b      	lsrs	r3, r3, #10
 800522c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523e:	2208      	movs	r2, #8
 8005240:	409a      	lsls	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01a      	beq.n	8005280 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b00      	cmp	r3, #0
 8005256:	d013      	beq.n	8005280 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0204 	bic.w	r2, r2, #4
 8005266:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526c:	2208      	movs	r2, #8
 800526e:	409a      	lsls	r2, r3
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005278:	f043 0201 	orr.w	r2, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005284:	2201      	movs	r2, #1
 8005286:	409a      	lsls	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d012      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00b      	beq.n	80052b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a2:	2201      	movs	r2, #1
 80052a4:	409a      	lsls	r2, r3
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	f043 0202 	orr.w	r2, r3, #2
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ba:	2204      	movs	r2, #4
 80052bc:	409a      	lsls	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d012      	beq.n	80052ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00b      	beq.n	80052ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d8:	2204      	movs	r2, #4
 80052da:	409a      	lsls	r2, r3
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	f043 0204 	orr.w	r2, r3, #4
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052f0:	2210      	movs	r2, #16
 80052f2:	409a      	lsls	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d043      	beq.n	8005384 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d03c      	beq.n	8005384 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530e:	2210      	movs	r2, #16
 8005310:	409a      	lsls	r2, r3
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d018      	beq.n	8005356 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d108      	bne.n	8005344 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d024      	beq.n	8005384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	4798      	blx	r3
 8005342:	e01f      	b.n	8005384 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01b      	beq.n	8005384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	4798      	blx	r3
 8005354:	e016      	b.n	8005384 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005360:	2b00      	cmp	r3, #0
 8005362:	d107      	bne.n	8005374 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0208 	bic.w	r2, r2, #8
 8005372:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005388:	2220      	movs	r2, #32
 800538a:	409a      	lsls	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4013      	ands	r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 808e 	beq.w	80054b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8086 	beq.w	80054b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053aa:	2220      	movs	r2, #32
 80053ac:	409a      	lsls	r2, r3
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d136      	bne.n	800542c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0216 	bic.w	r2, r2, #22
 80053cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695a      	ldr	r2, [r3, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <HAL_DMA_IRQHandler+0x1da>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0208 	bic.w	r2, r2, #8
 80053fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005402:	223f      	movs	r2, #63	; 0x3f
 8005404:	409a      	lsls	r2, r3
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541e:	2b00      	cmp	r3, #0
 8005420:	d07d      	beq.n	800551e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	4798      	blx	r3
        }
        return;
 800542a:	e078      	b.n	800551e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d01c      	beq.n	8005474 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d108      	bne.n	800545a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544c:	2b00      	cmp	r3, #0
 800544e:	d030      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	4798      	blx	r3
 8005458:	e02b      	b.n	80054b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d027      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
 800546a:	e022      	b.n	80054b2 <HAL_DMA_IRQHandler+0x29e>
 800546c:	20000000 	.word	0x20000000
 8005470:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10f      	bne.n	80054a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0210 	bic.w	r2, r2, #16
 8005490:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d032      	beq.n	8005520 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d022      	beq.n	800550c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2205      	movs	r2, #5
 80054ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	3301      	adds	r3, #1
 80054e2:	60bb      	str	r3, [r7, #8]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d307      	bcc.n	80054fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f2      	bne.n	80054de <HAL_DMA_IRQHandler+0x2ca>
 80054f8:	e000      	b.n	80054fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80054fa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	4798      	blx	r3
 800551c:	e000      	b.n	8005520 <HAL_DMA_IRQHandler+0x30c>
        return;
 800551e:	bf00      	nop
    }
  }
}
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop

08005528 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005544:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b40      	cmp	r3, #64	; 0x40
 8005554:	d108      	bne.n	8005568 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005566:	e007      	b.n	8005578 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	60da      	str	r2, [r3, #12]
}
 8005578:	bf00      	nop
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	b2db      	uxtb	r3, r3
 8005592:	3b10      	subs	r3, #16
 8005594:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <DMA_CalcBaseAndBitshift+0x64>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800559e:	4a13      	ldr	r2, [pc, #76]	; (80055ec <DMA_CalcBaseAndBitshift+0x68>)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d909      	bls.n	80055c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	1d1a      	adds	r2, r3, #4
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	659a      	str	r2, [r3, #88]	; 0x58
 80055c4:	e007      	b.n	80055d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055ce:	f023 0303 	bic.w	r3, r3, #3
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	aaaaaaab 	.word	0xaaaaaaab
 80055ec:	0800f880 	.word	0x0800f880

080055f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005600:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d11f      	bne.n	800564a <DMA_CheckFifoParam+0x5a>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d856      	bhi.n	80056be <DMA_CheckFifoParam+0xce>
 8005610:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <DMA_CheckFifoParam+0x28>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	08005629 	.word	0x08005629
 800561c:	0800563b 	.word	0x0800563b
 8005620:	08005629 	.word	0x08005629
 8005624:	080056bf 	.word	0x080056bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d046      	beq.n	80056c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005638:	e043      	b.n	80056c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005642:	d140      	bne.n	80056c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005648:	e03d      	b.n	80056c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005652:	d121      	bne.n	8005698 <DMA_CheckFifoParam+0xa8>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b03      	cmp	r3, #3
 8005658:	d837      	bhi.n	80056ca <DMA_CheckFifoParam+0xda>
 800565a:	a201      	add	r2, pc, #4	; (adr r2, 8005660 <DMA_CheckFifoParam+0x70>)
 800565c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005660:	08005671 	.word	0x08005671
 8005664:	08005677 	.word	0x08005677
 8005668:	08005671 	.word	0x08005671
 800566c:	08005689 	.word	0x08005689
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
      break;
 8005674:	e030      	b.n	80056d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d025      	beq.n	80056ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005686:	e022      	b.n	80056ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005690:	d11f      	bne.n	80056d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005696:	e01c      	b.n	80056d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d903      	bls.n	80056a6 <DMA_CheckFifoParam+0xb6>
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d003      	beq.n	80056ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056a4:	e018      	b.n	80056d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	73fb      	strb	r3, [r7, #15]
      break;
 80056aa:	e015      	b.n	80056d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00e      	beq.n	80056d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
      break;
 80056bc:	e00b      	b.n	80056d6 <DMA_CheckFifoParam+0xe6>
      break;
 80056be:	bf00      	nop
 80056c0:	e00a      	b.n	80056d8 <DMA_CheckFifoParam+0xe8>
      break;
 80056c2:	bf00      	nop
 80056c4:	e008      	b.n	80056d8 <DMA_CheckFifoParam+0xe8>
      break;
 80056c6:	bf00      	nop
 80056c8:	e006      	b.n	80056d8 <DMA_CheckFifoParam+0xe8>
      break;
 80056ca:	bf00      	nop
 80056cc:	e004      	b.n	80056d8 <DMA_CheckFifoParam+0xe8>
      break;
 80056ce:	bf00      	nop
 80056d0:	e002      	b.n	80056d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80056d2:	bf00      	nop
 80056d4:	e000      	b.n	80056d8 <DMA_CheckFifoParam+0xe8>
      break;
 80056d6:	bf00      	nop
    }
  } 
  
  return status; 
 80056d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop

080056e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b089      	sub	sp, #36	; 0x24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
 8005702:	e16b      	b.n	80059dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005704:	2201      	movs	r2, #1
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4013      	ands	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	429a      	cmp	r2, r3
 800571e:	f040 815a 	bne.w	80059d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d005      	beq.n	800573a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005736:	2b02      	cmp	r3, #2
 8005738:	d130      	bne.n	800579c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	2203      	movs	r2, #3
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43db      	mvns	r3, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4013      	ands	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4313      	orrs	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005770:	2201      	movs	r2, #1
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	f003 0201 	and.w	r2, r3, #1
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d017      	beq.n	80057d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	2203      	movs	r2, #3
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d123      	bne.n	800582c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	08da      	lsrs	r2, r3, #3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3208      	adds	r2, #8
 80057ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	220f      	movs	r2, #15
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	08da      	lsrs	r2, r3, #3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3208      	adds	r2, #8
 8005826:	69b9      	ldr	r1, [r7, #24]
 8005828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	2203      	movs	r2, #3
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	43db      	mvns	r3, r3
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4013      	ands	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 0203 	and.w	r2, r3, #3
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4313      	orrs	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80b4 	beq.w	80059d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	4b60      	ldr	r3, [pc, #384]	; (80059f4 <HAL_GPIO_Init+0x30c>)
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	4a5f      	ldr	r2, [pc, #380]	; (80059f4 <HAL_GPIO_Init+0x30c>)
 8005878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800587c:	6453      	str	r3, [r2, #68]	; 0x44
 800587e:	4b5d      	ldr	r3, [pc, #372]	; (80059f4 <HAL_GPIO_Init+0x30c>)
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800588a:	4a5b      	ldr	r2, [pc, #364]	; (80059f8 <HAL_GPIO_Init+0x310>)
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	089b      	lsrs	r3, r3, #2
 8005890:	3302      	adds	r3, #2
 8005892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005896:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	220f      	movs	r2, #15
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a52      	ldr	r2, [pc, #328]	; (80059fc <HAL_GPIO_Init+0x314>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d02b      	beq.n	800590e <HAL_GPIO_Init+0x226>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a51      	ldr	r2, [pc, #324]	; (8005a00 <HAL_GPIO_Init+0x318>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d025      	beq.n	800590a <HAL_GPIO_Init+0x222>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a50      	ldr	r2, [pc, #320]	; (8005a04 <HAL_GPIO_Init+0x31c>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d01f      	beq.n	8005906 <HAL_GPIO_Init+0x21e>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a4f      	ldr	r2, [pc, #316]	; (8005a08 <HAL_GPIO_Init+0x320>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d019      	beq.n	8005902 <HAL_GPIO_Init+0x21a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a4e      	ldr	r2, [pc, #312]	; (8005a0c <HAL_GPIO_Init+0x324>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d013      	beq.n	80058fe <HAL_GPIO_Init+0x216>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a4d      	ldr	r2, [pc, #308]	; (8005a10 <HAL_GPIO_Init+0x328>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00d      	beq.n	80058fa <HAL_GPIO_Init+0x212>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a4c      	ldr	r2, [pc, #304]	; (8005a14 <HAL_GPIO_Init+0x32c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d007      	beq.n	80058f6 <HAL_GPIO_Init+0x20e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a4b      	ldr	r2, [pc, #300]	; (8005a18 <HAL_GPIO_Init+0x330>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d101      	bne.n	80058f2 <HAL_GPIO_Init+0x20a>
 80058ee:	2307      	movs	r3, #7
 80058f0:	e00e      	b.n	8005910 <HAL_GPIO_Init+0x228>
 80058f2:	2308      	movs	r3, #8
 80058f4:	e00c      	b.n	8005910 <HAL_GPIO_Init+0x228>
 80058f6:	2306      	movs	r3, #6
 80058f8:	e00a      	b.n	8005910 <HAL_GPIO_Init+0x228>
 80058fa:	2305      	movs	r3, #5
 80058fc:	e008      	b.n	8005910 <HAL_GPIO_Init+0x228>
 80058fe:	2304      	movs	r3, #4
 8005900:	e006      	b.n	8005910 <HAL_GPIO_Init+0x228>
 8005902:	2303      	movs	r3, #3
 8005904:	e004      	b.n	8005910 <HAL_GPIO_Init+0x228>
 8005906:	2302      	movs	r3, #2
 8005908:	e002      	b.n	8005910 <HAL_GPIO_Init+0x228>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <HAL_GPIO_Init+0x228>
 800590e:	2300      	movs	r3, #0
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	f002 0203 	and.w	r2, r2, #3
 8005916:	0092      	lsls	r2, r2, #2
 8005918:	4093      	lsls	r3, r2
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005920:	4935      	ldr	r1, [pc, #212]	; (80059f8 <HAL_GPIO_Init+0x310>)
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	089b      	lsrs	r3, r3, #2
 8005926:	3302      	adds	r3, #2
 8005928:	69ba      	ldr	r2, [r7, #24]
 800592a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800592e:	4b3b      	ldr	r3, [pc, #236]	; (8005a1c <HAL_GPIO_Init+0x334>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	43db      	mvns	r3, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4013      	ands	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005952:	4a32      	ldr	r2, [pc, #200]	; (8005a1c <HAL_GPIO_Init+0x334>)
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005958:	4b30      	ldr	r3, [pc, #192]	; (8005a1c <HAL_GPIO_Init+0x334>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	43db      	mvns	r3, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	4013      	ands	r3, r2
 8005966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800597c:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <HAL_GPIO_Init+0x334>)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005982:	4b26      	ldr	r3, [pc, #152]	; (8005a1c <HAL_GPIO_Init+0x334>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059a6:	4a1d      	ldr	r2, [pc, #116]	; (8005a1c <HAL_GPIO_Init+0x334>)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059ac:	4b1b      	ldr	r3, [pc, #108]	; (8005a1c <HAL_GPIO_Init+0x334>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059d0:	4a12      	ldr	r2, [pc, #72]	; (8005a1c <HAL_GPIO_Init+0x334>)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	3301      	adds	r3, #1
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	2b0f      	cmp	r3, #15
 80059e0:	f67f ae90 	bls.w	8005704 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	3724      	adds	r7, #36	; 0x24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40023800 	.word	0x40023800
 80059f8:	40013800 	.word	0x40013800
 80059fc:	40020000 	.word	0x40020000
 8005a00:	40020400 	.word	0x40020400
 8005a04:	40020800 	.word	0x40020800
 8005a08:	40020c00 	.word	0x40020c00
 8005a0c:	40021000 	.word	0x40021000
 8005a10:	40021400 	.word	0x40021400
 8005a14:	40021800 	.word	0x40021800
 8005a18:	40021c00 	.word	0x40021c00
 8005a1c:	40013c00 	.word	0x40013c00

08005a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	887b      	ldrh	r3, [r7, #2]
 8005a32:	4013      	ands	r3, r2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]
 8005a3c:	e001      	b.n	8005a42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	807b      	strh	r3, [r7, #2]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a60:	787b      	ldrb	r3, [r7, #1]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a66:	887a      	ldrh	r2, [r7, #2]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a6c:	e003      	b.n	8005a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a6e:	887b      	ldrh	r3, [r7, #2]
 8005a70:	041a      	lsls	r2, r3, #16
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	619a      	str	r2, [r3, #24]
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
	...

08005a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a8e:	4b08      	ldr	r3, [pc, #32]	; (8005ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a90:	695a      	ldr	r2, [r3, #20]
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	4013      	ands	r3, r2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d006      	beq.n	8005aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a9a:	4a05      	ldr	r2, [pc, #20]	; (8005ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a9c:	88fb      	ldrh	r3, [r7, #6]
 8005a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005aa0:	88fb      	ldrh	r3, [r7, #6]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 f806 	bl	8005ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40013c00 	.word	0x40013c00

08005ab4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005aca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005acc:	b08f      	sub	sp, #60	; 0x3c
 8005ace:	af0a      	add	r7, sp, #40	; 0x28
 8005ad0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e10f      	b.n	8005cfc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d106      	bne.n	8005afc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f007 f948 	bl	800cd8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2203      	movs	r2, #3
 8005b00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f004 f88b 	bl	8009c36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	687e      	ldr	r6, [r7, #4]
 8005b28:	466d      	mov	r5, sp
 8005b2a:	f106 0410 	add.w	r4, r6, #16
 8005b2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b3e:	1d33      	adds	r3, r6, #4
 8005b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b42:	6838      	ldr	r0, [r7, #0]
 8005b44:	f003 ff62 	bl	8009a0c <USB_CoreInit>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d005      	beq.n	8005b5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e0d0      	b.n	8005cfc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f004 f879 	bl	8009c58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b66:	2300      	movs	r3, #0
 8005b68:	73fb      	strb	r3, [r7, #15]
 8005b6a:	e04a      	b.n	8005c02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b6c:	7bfa      	ldrb	r2, [r7, #15]
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	1a9b      	subs	r3, r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	333d      	adds	r3, #61	; 0x3d
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b80:	7bfa      	ldrb	r2, [r7, #15]
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	1a9b      	subs	r3, r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	333c      	adds	r3, #60	; 0x3c
 8005b90:	7bfa      	ldrb	r2, [r7, #15]
 8005b92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005b94:	7bfa      	ldrb	r2, [r7, #15]
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	b298      	uxth	r0, r3
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3342      	adds	r3, #66	; 0x42
 8005ba8:	4602      	mov	r2, r0
 8005baa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bac:	7bfa      	ldrb	r2, [r7, #15]
 8005bae:	6879      	ldr	r1, [r7, #4]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	1a9b      	subs	r3, r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	333f      	adds	r3, #63	; 0x3f
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005bc0:	7bfa      	ldrb	r2, [r7, #15]
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	1a9b      	subs	r3, r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	3344      	adds	r3, #68	; 0x44
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005bd4:	7bfa      	ldrb	r2, [r7, #15]
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	1a9b      	subs	r3, r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	3348      	adds	r3, #72	; 0x48
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005be8:	7bfa      	ldrb	r2, [r7, #15]
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	4613      	mov	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	3350      	adds	r3, #80	; 0x50
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	73fb      	strb	r3, [r7, #15]
 8005c02:	7bfa      	ldrb	r2, [r7, #15]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d3af      	bcc.n	8005b6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]
 8005c10:	e044      	b.n	8005c9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c12:	7bfa      	ldrb	r2, [r7, #15]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005c24:	2200      	movs	r2, #0
 8005c26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c28:	7bfa      	ldrb	r2, [r7, #15]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005c3a:	7bfa      	ldrb	r2, [r7, #15]
 8005c3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c3e:	7bfa      	ldrb	r2, [r7, #15]
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c54:	7bfa      	ldrb	r2, [r7, #15]
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	1a9b      	subs	r3, r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c6a:	7bfa      	ldrb	r2, [r7, #15]
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c80:	7bfa      	ldrb	r2, [r7, #15]
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	1a9b      	subs	r3, r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	440b      	add	r3, r1
 8005c8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	73fb      	strb	r3, [r7, #15]
 8005c9c:	7bfa      	ldrb	r2, [r7, #15]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d3b5      	bcc.n	8005c12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	687e      	ldr	r6, [r7, #4]
 8005cae:	466d      	mov	r5, sp
 8005cb0:	f106 0410 	add.w	r4, r6, #16
 8005cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cc4:	1d33      	adds	r3, r6, #4
 8005cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cc8:	6838      	ldr	r0, [r7, #0]
 8005cca:	f004 f811 	bl	8009cf0 <USB_DevInit>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e00d      	b.n	8005cfc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f005 f88d 	bl	800ae14 <USB_DevDisconnect>

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3714      	adds	r7, #20
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_PCD_Start+0x1c>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e020      	b.n	8005d62 <HAL_PCD_Start+0x5e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d109      	bne.n	8005d44 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d005      	beq.n	8005d44 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f003 ff63 	bl	8009c14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f005 f83d 	bl	800add2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d6a:	b590      	push	{r4, r7, lr}
 8005d6c:	b08d      	sub	sp, #52	; 0x34
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4618      	mov	r0, r3
 8005d82:	f005 f8fb 	bl	800af7c <USB_GetMode>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f040 839d 	bne.w	80064c8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f005 f85f 	bl	800ae56 <USB_ReadInterrupts>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 8393 	beq.w	80064c6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f005 f856 	bl	800ae56 <USB_ReadInterrupts>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d107      	bne.n	8005dc4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695a      	ldr	r2, [r3, #20]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f002 0202 	and.w	r2, r2, #2
 8005dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f005 f844 	bl	800ae56 <USB_ReadInterrupts>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d161      	bne.n	8005e9c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0210 	bic.w	r2, r2, #16
 8005de6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005de8:	6a3b      	ldr	r3, [r7, #32]
 8005dea:	6a1b      	ldr	r3, [r3, #32]
 8005dec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	4413      	add	r3, r2
 8005e04:	3304      	adds	r3, #4
 8005e06:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	0c5b      	lsrs	r3, r3, #17
 8005e0c:	f003 030f 	and.w	r3, r3, #15
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d124      	bne.n	8005e5e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d035      	beq.n	8005e8c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	091b      	lsrs	r3, r3, #4
 8005e28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	461a      	mov	r2, r3
 8005e32:	6a38      	ldr	r0, [r7, #32]
 8005e34:	f004 fe7b 	bl	800ab2e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e44:	441a      	add	r2, r3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	091b      	lsrs	r3, r3, #4
 8005e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e56:	441a      	add	r2, r3
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	619a      	str	r2, [r3, #24]
 8005e5c:	e016      	b.n	8005e8c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	0c5b      	lsrs	r3, r3, #17
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	2b06      	cmp	r3, #6
 8005e68:	d110      	bne.n	8005e8c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e70:	2208      	movs	r2, #8
 8005e72:	4619      	mov	r1, r3
 8005e74:	6a38      	ldr	r0, [r7, #32]
 8005e76:	f004 fe5a 	bl	800ab2e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e86:	441a      	add	r2, r3
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0210 	orr.w	r2, r2, #16
 8005e9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f004 ffd8 	bl	800ae56 <USB_ReadInterrupts>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005eac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005eb0:	d16e      	bne.n	8005f90 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f004 ffde 	bl	800ae7c <USB_ReadDevAllOutEpInterrupt>
 8005ec0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005ec2:	e062      	b.n	8005f8a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d057      	beq.n	8005f7e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f005 f803 	bl	800aee4 <USB_ReadDevOutEPInterrupt>
 8005ede:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	2301      	movs	r3, #1
 8005efa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fdb0 	bl	8006a64 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00c      	beq.n	8005f28 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 feaa 	bl	8006c7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d008      	beq.n	8005f44 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2310      	movs	r3, #16
 8005f42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	2320      	movs	r3, #32
 8005f5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f76:	461a      	mov	r2, r3
 8005f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	3301      	adds	r3, #1
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d199      	bne.n	8005ec4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f004 ff5e 	bl	800ae56 <USB_ReadInterrupts>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fa4:	f040 80c0 	bne.w	8006128 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f004 ff7f 	bl	800aeb0 <USB_ReadDevAllInEpInterrupt>
 8005fb2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005fb8:	e0b2      	b.n	8006120 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 80a7 	beq.w	8006114 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	4611      	mov	r1, r2
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f004 ffa5 	bl	800af20 <USB_ReadDevInEPInterrupt>
 8005fd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d057      	beq.n	8006092 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	2201      	movs	r2, #1
 8005fea:	fa02 f303 	lsl.w	r3, r2, r3
 8005fee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	43db      	mvns	r3, r3
 8005ffc:	69f9      	ldr	r1, [r7, #28]
 8005ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006002:	4013      	ands	r3, r2
 8006004:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	461a      	mov	r2, r3
 8006014:	2301      	movs	r3, #1
 8006016:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d132      	bne.n	8006086 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006024:	4613      	mov	r3, r2
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	3348      	adds	r3, #72	; 0x48
 8006030:	6819      	ldr	r1, [r3, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006036:	4613      	mov	r3, r2
 8006038:	00db      	lsls	r3, r3, #3
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4403      	add	r3, r0
 8006040:	3344      	adds	r3, #68	; 0x44
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4419      	add	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604a:	4613      	mov	r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	1a9b      	subs	r3, r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4403      	add	r3, r0
 8006054:	3348      	adds	r3, #72	; 0x48
 8006056:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	2b00      	cmp	r3, #0
 800605c:	d113      	bne.n	8006086 <HAL_PCD_IRQHandler+0x31c>
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	1a9b      	subs	r3, r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	3350      	adds	r3, #80	; 0x50
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d108      	bne.n	8006086 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6818      	ldr	r0, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800607e:	461a      	mov	r2, r3
 8006080:	2101      	movs	r1, #1
 8006082:	f004 ffad 	bl	800afe0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	b2db      	uxtb	r3, r3
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f006 fefe 	bl	800ce8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800609c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a8:	461a      	mov	r2, r3
 80060aa:	2308      	movs	r3, #8
 80060ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	461a      	mov	r2, r3
 80060c6:	2310      	movs	r3, #16
 80060c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d008      	beq.n	80060e6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e0:	461a      	mov	r2, r3
 80060e2:	2340      	movs	r3, #64	; 0x40
 80060e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d008      	beq.n	8006102 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	461a      	mov	r2, r3
 80060fe:	2302      	movs	r3, #2
 8006100:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800610c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fc1b 	bl	800694a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	3301      	adds	r3, #1
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	085b      	lsrs	r3, r3, #1
 800611e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	2b00      	cmp	r3, #0
 8006124:	f47f af49 	bne.w	8005fba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f004 fe92 	bl	800ae56 <USB_ReadInterrupts>
 8006132:	4603      	mov	r3, r0
 8006134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800613c:	d122      	bne.n	8006184 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800614c:	f023 0301 	bic.w	r3, r3, #1
 8006150:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006158:	2b01      	cmp	r3, #1
 800615a:	d108      	bne.n	800616e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006164:	2100      	movs	r1, #0
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fe26 	bl	8006db8 <HAL_PCDEx_LPM_Callback>
 800616c:	e002      	b.n	8006174 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f006 ff04 	bl	800cf7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695a      	ldr	r2, [r3, #20]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006182:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4618      	mov	r0, r3
 800618a:	f004 fe64 	bl	800ae56 <USB_ReadInterrupts>
 800618e:	4603      	mov	r3, r0
 8006190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006198:	d112      	bne.n	80061c0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d102      	bne.n	80061b0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f006 fec0 	bl	800cf30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695a      	ldr	r2, [r3, #20]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80061be:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f004 fe46 	bl	800ae56 <USB_ReadInterrupts>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d4:	f040 80c7 	bne.w	8006366 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e6:	f023 0301 	bic.w	r3, r3, #1
 80061ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2110      	movs	r1, #16
 80061f2:	4618      	mov	r0, r3
 80061f4:	f003 fee0 	bl	8009fb8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061f8:	2300      	movs	r3, #0
 80061fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061fc:	e056      	b.n	80062ac <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800620a:	461a      	mov	r2, r3
 800620c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006210:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006222:	0151      	lsls	r1, r2, #5
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	440a      	add	r2, r1
 8006228:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800622c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006230:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	4413      	add	r3, r2
 800623a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006242:	0151      	lsls	r1, r2, #5
 8006244:	69fa      	ldr	r2, [r7, #28]
 8006246:	440a      	add	r2, r1
 8006248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800624c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006250:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	4413      	add	r3, r2
 800625a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625e:	461a      	mov	r2, r3
 8006260:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006264:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006268:	015a      	lsls	r2, r3, #5
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	4413      	add	r3, r2
 800626e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006276:	0151      	lsls	r1, r2, #5
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	440a      	add	r2, r1
 800627c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006284:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006296:	0151      	lsls	r1, r2, #5
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	440a      	add	r2, r1
 800629c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80062a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	3301      	adds	r3, #1
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d3a3      	bcc.n	80061fe <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80062c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062e2:	f043 030b 	orr.w	r3, r3, #11
 80062e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062f8:	f043 030b 	orr.w	r3, r3, #11
 80062fc:	6453      	str	r3, [r2, #68]	; 0x44
 80062fe:	e015      	b.n	800632c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800630e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006312:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006316:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006326:	f043 030b 	orr.w	r3, r3, #11
 800632a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800633a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800633e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006350:	461a      	mov	r2, r3
 8006352:	f004 fe45 	bl	800afe0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	695a      	ldr	r2, [r3, #20]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006364:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f004 fd73 	bl	800ae56 <USB_ReadInterrupts>
 8006370:	4603      	mov	r3, r0
 8006372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800637a:	d124      	bne.n	80063c6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f004 fe09 	bl	800af98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f003 fe71 	bl	800a072 <USB_GetDevSpeed>
 8006390:	4603      	mov	r3, r0
 8006392:	461a      	mov	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681c      	ldr	r4, [r3, #0]
 800639c:	f001 f958 	bl	8007650 <HAL_RCC_GetHCLKFreq>
 80063a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	461a      	mov	r2, r3
 80063aa:	4620      	mov	r0, r4
 80063ac:	f003 fb90 	bl	8009ad0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f006 fd94 	bl	800cede <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80063c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f004 fd43 	bl	800ae56 <USB_ReadInterrupts>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d10a      	bne.n	80063f0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f006 fd71 	bl	800cec2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695a      	ldr	r2, [r3, #20]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f002 0208 	and.w	r2, r2, #8
 80063ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f004 fd2e 	bl	800ae56 <USB_ReadInterrupts>
 80063fa:	4603      	mov	r3, r0
 80063fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006404:	d10f      	bne.n	8006426 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006406:	2300      	movs	r3, #0
 8006408:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	b2db      	uxtb	r3, r3
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f006 fdd3 	bl	800cfbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695a      	ldr	r2, [r3, #20]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4618      	mov	r0, r3
 800642c:	f004 fd13 	bl	800ae56 <USB_ReadInterrupts>
 8006430:	4603      	mov	r3, r0
 8006432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800643a:	d10f      	bne.n	800645c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800643c:	2300      	movs	r3, #0
 800643e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	b2db      	uxtb	r3, r3
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f006 fda6 	bl	800cf98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695a      	ldr	r2, [r3, #20]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800645a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f004 fcf8 	bl	800ae56 <USB_ReadInterrupts>
 8006466:	4603      	mov	r3, r0
 8006468:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800646c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006470:	d10a      	bne.n	8006488 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f006 fdb4 	bl	800cfe0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	695a      	ldr	r2, [r3, #20]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4618      	mov	r0, r3
 800648e:	f004 fce2 	bl	800ae56 <USB_ReadInterrupts>
 8006492:	4603      	mov	r3, r0
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b04      	cmp	r3, #4
 800649a:	d115      	bne.n	80064c8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f006 fda4 	bl	800cffc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6859      	ldr	r1, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	605a      	str	r2, [r3, #4]
 80064c4:	e000      	b.n	80064c8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80064c6:	bf00      	nop
    }
  }
}
 80064c8:	3734      	adds	r7, #52	; 0x34
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd90      	pop	{r4, r7, pc}

080064ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	460b      	mov	r3, r1
 80064d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_PCD_SetAddress+0x1a>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e013      	b.n	8006510 <HAL_PCD_SetAddress+0x42>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	78fa      	ldrb	r2, [r7, #3]
 80064f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	78fa      	ldrb	r2, [r7, #3]
 80064fe:	4611      	mov	r1, r2
 8006500:	4618      	mov	r0, r3
 8006502:	f004 fc40 	bl	800ad86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4603      	mov	r3, r0
 8006528:	70fb      	strb	r3, [r7, #3]
 800652a:	460b      	mov	r3, r1
 800652c:	803b      	strh	r3, [r7, #0]
 800652e:	4613      	mov	r3, r2
 8006530:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800653a:	2b00      	cmp	r3, #0
 800653c:	da0f      	bge.n	800655e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800653e:	78fb      	ldrb	r3, [r7, #3]
 8006540:	f003 020f 	and.w	r2, r3, #15
 8006544:	4613      	mov	r3, r2
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	1a9b      	subs	r3, r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	3338      	adds	r3, #56	; 0x38
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	4413      	add	r3, r2
 8006552:	3304      	adds	r3, #4
 8006554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2201      	movs	r2, #1
 800655a:	705a      	strb	r2, [r3, #1]
 800655c:	e00f      	b.n	800657e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800655e:	78fb      	ldrb	r3, [r7, #3]
 8006560:	f003 020f 	and.w	r2, r3, #15
 8006564:	4613      	mov	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	1a9b      	subs	r3, r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	4413      	add	r3, r2
 8006574:	3304      	adds	r3, #4
 8006576:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	b2da      	uxtb	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800658a:	883a      	ldrh	r2, [r7, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	78ba      	ldrb	r2, [r7, #2]
 8006594:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	785b      	ldrb	r3, [r3, #1]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80065a8:	78bb      	ldrb	r3, [r7, #2]
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d102      	bne.n	80065b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_PCD_EP_Open+0xaa>
 80065be:	2302      	movs	r3, #2
 80065c0:	e00e      	b.n	80065e0 <HAL_PCD_EP_Open+0xc8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68f9      	ldr	r1, [r7, #12]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f003 fd73 	bl	800a0bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80065de:	7afb      	ldrb	r3, [r7, #11]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	da0f      	bge.n	800661c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	f003 020f 	and.w	r2, r3, #15
 8006602:	4613      	mov	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	3338      	adds	r3, #56	; 0x38
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	4413      	add	r3, r2
 8006610:	3304      	adds	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	705a      	strb	r2, [r3, #1]
 800661a:	e00f      	b.n	800663c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	f003 020f 	and.w	r2, r3, #15
 8006622:	4613      	mov	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	1a9b      	subs	r3, r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	4413      	add	r3, r2
 8006632:	3304      	adds	r3, #4
 8006634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800663c:	78fb      	ldrb	r3, [r7, #3]
 800663e:	f003 030f 	and.w	r3, r3, #15
 8006642:	b2da      	uxtb	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800664e:	2b01      	cmp	r3, #1
 8006650:	d101      	bne.n	8006656 <HAL_PCD_EP_Close+0x6e>
 8006652:	2302      	movs	r3, #2
 8006654:	e00e      	b.n	8006674 <HAL_PCD_EP_Close+0x8c>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	4618      	mov	r0, r3
 8006666:	f003 fdb1 	bl	800a1cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	607a      	str	r2, [r7, #4]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	460b      	mov	r3, r1
 800668a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800668c:	7afb      	ldrb	r3, [r7, #11]
 800668e:	f003 020f 	and.w	r2, r3, #15
 8006692:	4613      	mov	r3, r2
 8006694:	00db      	lsls	r3, r3, #3
 8006696:	1a9b      	subs	r3, r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	4413      	add	r3, r2
 80066a2:	3304      	adds	r3, #4
 80066a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2200      	movs	r2, #0
 80066b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2200      	movs	r2, #0
 80066bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066be:	7afb      	ldrb	r3, [r7, #11]
 80066c0:	f003 030f 	and.w	r3, r3, #15
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d102      	bne.n	80066d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80066d8:	7afb      	ldrb	r3, [r7, #11]
 80066da:	f003 030f 	and.w	r3, r3, #15
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6818      	ldr	r0, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	461a      	mov	r2, r3
 80066ee:	6979      	ldr	r1, [r7, #20]
 80066f0:	f004 f88c 	bl	800a80c <USB_EP0StartXfer>
 80066f4:	e008      	b.n	8006708 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	6979      	ldr	r1, [r7, #20]
 8006704:	f003 fe3e 	bl	800a384 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	f003 020f 	and.w	r2, r3, #15
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	440b      	add	r3, r1
 8006730:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006734:	681b      	ldr	r3, [r3, #0]
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b086      	sub	sp, #24
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	607a      	str	r2, [r7, #4]
 800674c:	603b      	str	r3, [r7, #0]
 800674e:	460b      	mov	r3, r1
 8006750:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006752:	7afb      	ldrb	r3, [r7, #11]
 8006754:	f003 020f 	and.w	r2, r3, #15
 8006758:	4613      	mov	r3, r2
 800675a:	00db      	lsls	r3, r3, #3
 800675c:	1a9b      	subs	r3, r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	3338      	adds	r3, #56	; 0x38
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4413      	add	r3, r2
 8006766:	3304      	adds	r3, #4
 8006768:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	2200      	movs	r2, #0
 800677a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2201      	movs	r2, #1
 8006780:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006782:	7afb      	ldrb	r3, [r7, #11]
 8006784:	f003 030f 	and.w	r3, r3, #15
 8006788:	b2da      	uxtb	r2, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d102      	bne.n	800679c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6818      	ldr	r0, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	461a      	mov	r2, r3
 80067b2:	6979      	ldr	r1, [r7, #20]
 80067b4:	f004 f82a 	bl	800a80c <USB_EP0StartXfer>
 80067b8:	e008      	b.n	80067cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6818      	ldr	r0, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	461a      	mov	r2, r3
 80067c6:	6979      	ldr	r1, [r7, #20]
 80067c8:	f003 fddc 	bl	800a384 <USB_EPStartXfer>
  }

  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3718      	adds	r7, #24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80067e2:	78fb      	ldrb	r3, [r7, #3]
 80067e4:	f003 020f 	and.w	r2, r3, #15
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d901      	bls.n	80067f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e050      	b.n	8006896 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80067f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	da0f      	bge.n	800681c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067fc:	78fb      	ldrb	r3, [r7, #3]
 80067fe:	f003 020f 	and.w	r2, r3, #15
 8006802:	4613      	mov	r3, r2
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	3338      	adds	r3, #56	; 0x38
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	4413      	add	r3, r2
 8006810:	3304      	adds	r3, #4
 8006812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	705a      	strb	r2, [r3, #1]
 800681a:	e00d      	b.n	8006838 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800681c:	78fa      	ldrb	r2, [r7, #3]
 800681e:	4613      	mov	r3, r2
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	3304      	adds	r3, #4
 8006830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2201      	movs	r2, #1
 800683c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800683e:	78fb      	ldrb	r3, [r7, #3]
 8006840:	f003 030f 	and.w	r3, r3, #15
 8006844:	b2da      	uxtb	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006850:	2b01      	cmp	r3, #1
 8006852:	d101      	bne.n	8006858 <HAL_PCD_EP_SetStall+0x82>
 8006854:	2302      	movs	r3, #2
 8006856:	e01e      	b.n	8006896 <HAL_PCD_EP_SetStall+0xc0>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68f9      	ldr	r1, [r7, #12]
 8006866:	4618      	mov	r0, r3
 8006868:	f004 f9b9 	bl	800abde <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10a      	bne.n	800688c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6818      	ldr	r0, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	b2d9      	uxtb	r1, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006886:	461a      	mov	r2, r3
 8006888:	f004 fbaa 	bl	800afe0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	f003 020f 	and.w	r2, r3, #15
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d901      	bls.n	80068bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e042      	b.n	8006942 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	da0f      	bge.n	80068e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068c4:	78fb      	ldrb	r3, [r7, #3]
 80068c6:	f003 020f 	and.w	r2, r3, #15
 80068ca:	4613      	mov	r3, r2
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	3338      	adds	r3, #56	; 0x38
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	4413      	add	r3, r2
 80068d8:	3304      	adds	r3, #4
 80068da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2201      	movs	r2, #1
 80068e0:	705a      	strb	r2, [r3, #1]
 80068e2:	e00f      	b.n	8006904 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80068e4:	78fb      	ldrb	r3, [r7, #3]
 80068e6:	f003 020f 	and.w	r2, r3, #15
 80068ea:	4613      	mov	r3, r2
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	4413      	add	r3, r2
 80068fa:	3304      	adds	r3, #4
 80068fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	b2da      	uxtb	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_PCD_EP_ClrStall+0x86>
 8006920:	2302      	movs	r3, #2
 8006922:	e00e      	b.n	8006942 <HAL_PCD_EP_ClrStall+0xa4>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68f9      	ldr	r1, [r7, #12]
 8006932:	4618      	mov	r0, r3
 8006934:	f004 f9c1 	bl	800acba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}

0800694a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800694a:	b580      	push	{r7, lr}
 800694c:	b08a      	sub	sp, #40	; 0x28
 800694e:	af02      	add	r7, sp, #8
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	4613      	mov	r3, r2
 8006962:	00db      	lsls	r3, r3, #3
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	3338      	adds	r3, #56	; 0x38
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	4413      	add	r3, r2
 800696e:	3304      	adds	r3, #4
 8006970:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	699a      	ldr	r2, [r3, #24]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	429a      	cmp	r2, r3
 800697c:	d901      	bls.n	8006982 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e06c      	b.n	8006a5c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	695a      	ldr	r2, [r3, #20]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	429a      	cmp	r2, r3
 8006996:	d902      	bls.n	800699e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3303      	adds	r3, #3
 80069a2:	089b      	lsrs	r3, r3, #2
 80069a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80069a6:	e02b      	b.n	8006a00 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	695a      	ldr	r2, [r3, #20]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	69fa      	ldr	r2, [r7, #28]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d902      	bls.n	80069c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	3303      	adds	r3, #3
 80069c8:	089b      	lsrs	r3, r3, #2
 80069ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	68d9      	ldr	r1, [r3, #12]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	4603      	mov	r3, r0
 80069e2:	6978      	ldr	r0, [r7, #20]
 80069e4:	f004 f865 	bl	800aab2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	441a      	add	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	699a      	ldr	r2, [r3, #24]
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	441a      	add	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	015a      	lsls	r2, r3, #5
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d809      	bhi.n	8006a2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d203      	bcs.n	8006a2a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1be      	bne.n	80069a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d811      	bhi.n	8006a5a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a42:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	6939      	ldr	r1, [r7, #16]
 8006a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a56:	4013      	ands	r3, r2
 8006a58:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3720      	adds	r7, #32
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	333c      	adds	r3, #60	; 0x3c
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	691b      	ldr	r3, [r3, #16]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	f040 80a0 	bne.w	8006bdc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d015      	beq.n	8006ad2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4a72      	ldr	r2, [pc, #456]	; (8006c74 <PCD_EP_OutXfrComplete_int+0x210>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	f240 80dd 	bls.w	8006c6a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 80d7 	beq.w	8006c6a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac8:	461a      	mov	r2, r3
 8006aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ace:	6093      	str	r3, [r2, #8]
 8006ad0:	e0cb      	b.n	8006c6a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d009      	beq.n	8006af0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae8:	461a      	mov	r2, r3
 8006aea:	2320      	movs	r3, #32
 8006aec:	6093      	str	r3, [r2, #8]
 8006aee:	e0bc      	b.n	8006c6a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f040 80b7 	bne.w	8006c6a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4a5d      	ldr	r2, [pc, #372]	; (8006c74 <PCD_EP_OutXfrComplete_int+0x210>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d90f      	bls.n	8006b24 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b20:	6093      	str	r3, [r2, #8]
 8006b22:	e0a2      	b.n	8006c6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	1a9b      	subs	r3, r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	440b      	add	r3, r1
 8006b32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b36:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	0159      	lsls	r1, r3, #5
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	440b      	add	r3, r1
 8006b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006b4a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	4613      	mov	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	1a9b      	subs	r3, r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4403      	add	r3, r0
 8006b5a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006b5e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006b60:	6879      	ldr	r1, [r7, #4]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	4613      	mov	r3, r2
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	1a9b      	subs	r3, r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	440b      	add	r3, r1
 8006b6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b72:	6819      	ldr	r1, [r3, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	1a9b      	subs	r3, r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4403      	add	r3, r0
 8006b82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4419      	add	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	00db      	lsls	r3, r3, #3
 8006b92:	1a9b      	subs	r3, r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4403      	add	r3, r0
 8006b98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b9c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d114      	bne.n	8006bce <PCD_EP_OutXfrComplete_int+0x16a>
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	1a9b      	subs	r3, r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d108      	bne.n	8006bce <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	2101      	movs	r1, #1
 8006bca:	f004 fa09 	bl	800afe0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f006 f93f 	bl	800ce58 <HAL_PCD_DataOutStageCallback>
 8006bda:	e046      	b.n	8006c6a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4a26      	ldr	r2, [pc, #152]	; (8006c78 <PCD_EP_OutXfrComplete_int+0x214>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d124      	bne.n	8006c2e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c00:	6093      	str	r3, [r2, #8]
 8006c02:	e032      	b.n	8006c6a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d008      	beq.n	8006c20 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2320      	movs	r3, #32
 8006c1e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f006 f916 	bl	800ce58 <HAL_PCD_DataOutStageCallback>
 8006c2c:	e01d      	b.n	8006c6a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d114      	bne.n	8006c5e <PCD_EP_OutXfrComplete_int+0x1fa>
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	00db      	lsls	r3, r3, #3
 8006c3c:	1a9b      	subs	r3, r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	440b      	add	r3, r1
 8006c42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d108      	bne.n	8006c5e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6818      	ldr	r0, [r3, #0]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c56:	461a      	mov	r2, r3
 8006c58:	2100      	movs	r1, #0
 8006c5a:	f004 f9c1 	bl	800afe0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f006 f8f7 	bl	800ce58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3718      	adds	r7, #24
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	4f54300a 	.word	0x4f54300a
 8006c78:	4f54310a 	.word	0x4f54310a

08006c7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	333c      	adds	r3, #60	; 0x3c
 8006c94:	3304      	adds	r3, #4
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4a15      	ldr	r2, [pc, #84]	; (8006d04 <PCD_EP_OutSetupPacket_int+0x88>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d90e      	bls.n	8006cd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc8:	461a      	mov	r2, r3
 8006cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f006 f8af 	bl	800ce34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4a0a      	ldr	r2, [pc, #40]	; (8006d04 <PCD_EP_OutSetupPacket_int+0x88>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d90c      	bls.n	8006cf8 <PCD_EP_OutSetupPacket_int+0x7c>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d108      	bne.n	8006cf8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6818      	ldr	r0, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	f004 f974 	bl	800afe0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	4f54300a 	.word	0x4f54300a

08006d08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	460b      	mov	r3, r1
 8006d12:	70fb      	strb	r3, [r7, #3]
 8006d14:	4613      	mov	r3, r2
 8006d16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d107      	bne.n	8006d36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d26:	883b      	ldrh	r3, [r7, #0]
 8006d28:	0419      	lsls	r1, r3, #16
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	629a      	str	r2, [r3, #40]	; 0x28
 8006d34:	e028      	b.n	8006d88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3c:	0c1b      	lsrs	r3, r3, #16
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	4413      	add	r3, r2
 8006d42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d44:	2300      	movs	r3, #0
 8006d46:	73fb      	strb	r3, [r7, #15]
 8006d48:	e00d      	b.n	8006d66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	3340      	adds	r3, #64	; 0x40
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	0c1b      	lsrs	r3, r3, #16
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	3301      	adds	r3, #1
 8006d64:	73fb      	strb	r3, [r7, #15]
 8006d66:	7bfa      	ldrb	r2, [r7, #15]
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d3ec      	bcc.n	8006d4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006d70:	883b      	ldrh	r3, [r7, #0]
 8006d72:	0418      	lsls	r0, r3, #16
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6819      	ldr	r1, [r3, #0]
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	4302      	orrs	r2, r0
 8006d80:	3340      	adds	r3, #64	; 0x40
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	887a      	ldrh	r2, [r7, #2]
 8006da8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e264      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d075      	beq.n	8006eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dee:	4ba3      	ldr	r3, [pc, #652]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 030c 	and.w	r3, r3, #12
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d00c      	beq.n	8006e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dfa:	4ba0      	ldr	r3, [pc, #640]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e02:	2b08      	cmp	r3, #8
 8006e04:	d112      	bne.n	8006e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e06:	4b9d      	ldr	r3, [pc, #628]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e12:	d10b      	bne.n	8006e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e14:	4b99      	ldr	r3, [pc, #612]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d05b      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x108>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d157      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e23f      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e34:	d106      	bne.n	8006e44 <HAL_RCC_OscConfig+0x74>
 8006e36:	4b91      	ldr	r3, [pc, #580]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a90      	ldr	r2, [pc, #576]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	e01d      	b.n	8006e80 <HAL_RCC_OscConfig+0xb0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e4c:	d10c      	bne.n	8006e68 <HAL_RCC_OscConfig+0x98>
 8006e4e:	4b8b      	ldr	r3, [pc, #556]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a8a      	ldr	r2, [pc, #552]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	4b88      	ldr	r3, [pc, #544]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a87      	ldr	r2, [pc, #540]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e64:	6013      	str	r3, [r2, #0]
 8006e66:	e00b      	b.n	8006e80 <HAL_RCC_OscConfig+0xb0>
 8006e68:	4b84      	ldr	r3, [pc, #528]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a83      	ldr	r2, [pc, #524]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e72:	6013      	str	r3, [r2, #0]
 8006e74:	4b81      	ldr	r3, [pc, #516]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a80      	ldr	r2, [pc, #512]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d013      	beq.n	8006eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e88:	f7fd fb20 	bl	80044cc <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e90:	f7fd fb1c 	bl	80044cc <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b64      	cmp	r3, #100	; 0x64
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e204      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ea2:	4b76      	ldr	r3, [pc, #472]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0f0      	beq.n	8006e90 <HAL_RCC_OscConfig+0xc0>
 8006eae:	e014      	b.n	8006eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb0:	f7fd fb0c 	bl	80044cc <HAL_GetTick>
 8006eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006eb8:	f7fd fb08 	bl	80044cc <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b64      	cmp	r3, #100	; 0x64
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e1f0      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eca:	4b6c      	ldr	r3, [pc, #432]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1f0      	bne.n	8006eb8 <HAL_RCC_OscConfig+0xe8>
 8006ed6:	e000      	b.n	8006eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d063      	beq.n	8006fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ee6:	4b65      	ldr	r3, [pc, #404]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f003 030c 	and.w	r3, r3, #12
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00b      	beq.n	8006f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ef2:	4b62      	ldr	r3, [pc, #392]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	d11c      	bne.n	8006f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006efe:	4b5f      	ldr	r3, [pc, #380]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d116      	bne.n	8006f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f0a:	4b5c      	ldr	r3, [pc, #368]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d005      	beq.n	8006f22 <HAL_RCC_OscConfig+0x152>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d001      	beq.n	8006f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e1c4      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f22:	4b56      	ldr	r3, [pc, #344]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	4952      	ldr	r1, [pc, #328]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f36:	e03a      	b.n	8006fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d020      	beq.n	8006f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f40:	4b4f      	ldr	r3, [pc, #316]	; (8007080 <HAL_RCC_OscConfig+0x2b0>)
 8006f42:	2201      	movs	r2, #1
 8006f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f46:	f7fd fac1 	bl	80044cc <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f4e:	f7fd fabd 	bl	80044cc <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e1a5      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f60:	4b46      	ldr	r3, [pc, #280]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0302 	and.w	r3, r3, #2
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0f0      	beq.n	8006f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f6c:	4b43      	ldr	r3, [pc, #268]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	4940      	ldr	r1, [pc, #256]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	600b      	str	r3, [r1, #0]
 8006f80:	e015      	b.n	8006fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f82:	4b3f      	ldr	r3, [pc, #252]	; (8007080 <HAL_RCC_OscConfig+0x2b0>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f88:	f7fd faa0 	bl	80044cc <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f90:	f7fd fa9c 	bl	80044cc <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e184      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fa2:	4b36      	ldr	r3, [pc, #216]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1f0      	bne.n	8006f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d030      	beq.n	800701c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d016      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fc2:	4b30      	ldr	r3, [pc, #192]	; (8007084 <HAL_RCC_OscConfig+0x2b4>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc8:	f7fd fa80 	bl	80044cc <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fce:	e008      	b.n	8006fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fd0:	f7fd fa7c 	bl	80044cc <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e164      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fe2:	4b26      	ldr	r3, [pc, #152]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8006fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0f0      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x200>
 8006fee:	e015      	b.n	800701c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ff0:	4b24      	ldr	r3, [pc, #144]	; (8007084 <HAL_RCC_OscConfig+0x2b4>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ff6:	f7fd fa69 	bl	80044cc <HAL_GetTick>
 8006ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ffc:	e008      	b.n	8007010 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ffe:	f7fd fa65 	bl	80044cc <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e14d      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007010:	4b1a      	ldr	r3, [pc, #104]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8007012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1f0      	bne.n	8006ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 80a0 	beq.w	800716a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800702a:	2300      	movs	r3, #0
 800702c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10f      	bne.n	800705a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800703a:	2300      	movs	r3, #0
 800703c:	60bb      	str	r3, [r7, #8]
 800703e:	4b0f      	ldr	r3, [pc, #60]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	4a0e      	ldr	r2, [pc, #56]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 8007044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007048:	6413      	str	r3, [r2, #64]	; 0x40
 800704a:	4b0c      	ldr	r3, [pc, #48]	; (800707c <HAL_RCC_OscConfig+0x2ac>)
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007052:	60bb      	str	r3, [r7, #8]
 8007054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800705a:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <HAL_RCC_OscConfig+0x2b8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007062:	2b00      	cmp	r3, #0
 8007064:	d121      	bne.n	80070aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007066:	4b08      	ldr	r3, [pc, #32]	; (8007088 <HAL_RCC_OscConfig+0x2b8>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a07      	ldr	r2, [pc, #28]	; (8007088 <HAL_RCC_OscConfig+0x2b8>)
 800706c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007072:	f7fd fa2b 	bl	80044cc <HAL_GetTick>
 8007076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007078:	e011      	b.n	800709e <HAL_RCC_OscConfig+0x2ce>
 800707a:	bf00      	nop
 800707c:	40023800 	.word	0x40023800
 8007080:	42470000 	.word	0x42470000
 8007084:	42470e80 	.word	0x42470e80
 8007088:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800708c:	f7fd fa1e 	bl	80044cc <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e106      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800709e:	4b85      	ldr	r3, [pc, #532]	; (80072b4 <HAL_RCC_OscConfig+0x4e4>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f0      	beq.n	800708c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d106      	bne.n	80070c0 <HAL_RCC_OscConfig+0x2f0>
 80070b2:	4b81      	ldr	r3, [pc, #516]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b6:	4a80      	ldr	r2, [pc, #512]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070b8:	f043 0301 	orr.w	r3, r3, #1
 80070bc:	6713      	str	r3, [r2, #112]	; 0x70
 80070be:	e01c      	b.n	80070fa <HAL_RCC_OscConfig+0x32a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	2b05      	cmp	r3, #5
 80070c6:	d10c      	bne.n	80070e2 <HAL_RCC_OscConfig+0x312>
 80070c8:	4b7b      	ldr	r3, [pc, #492]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070cc:	4a7a      	ldr	r2, [pc, #488]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070ce:	f043 0304 	orr.w	r3, r3, #4
 80070d2:	6713      	str	r3, [r2, #112]	; 0x70
 80070d4:	4b78      	ldr	r3, [pc, #480]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d8:	4a77      	ldr	r2, [pc, #476]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	6713      	str	r3, [r2, #112]	; 0x70
 80070e0:	e00b      	b.n	80070fa <HAL_RCC_OscConfig+0x32a>
 80070e2:	4b75      	ldr	r3, [pc, #468]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	4a74      	ldr	r2, [pc, #464]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070e8:	f023 0301 	bic.w	r3, r3, #1
 80070ec:	6713      	str	r3, [r2, #112]	; 0x70
 80070ee:	4b72      	ldr	r3, [pc, #456]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f2:	4a71      	ldr	r2, [pc, #452]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80070f4:	f023 0304 	bic.w	r3, r3, #4
 80070f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d015      	beq.n	800712e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007102:	f7fd f9e3 	bl	80044cc <HAL_GetTick>
 8007106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007108:	e00a      	b.n	8007120 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800710a:	f7fd f9df 	bl	80044cc <HAL_GetTick>
 800710e:	4602      	mov	r2, r0
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	f241 3288 	movw	r2, #5000	; 0x1388
 8007118:	4293      	cmp	r3, r2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e0c5      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007120:	4b65      	ldr	r3, [pc, #404]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	2b00      	cmp	r3, #0
 800712a:	d0ee      	beq.n	800710a <HAL_RCC_OscConfig+0x33a>
 800712c:	e014      	b.n	8007158 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800712e:	f7fd f9cd 	bl	80044cc <HAL_GetTick>
 8007132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007134:	e00a      	b.n	800714c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007136:	f7fd f9c9 	bl	80044cc <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	f241 3288 	movw	r2, #5000	; 0x1388
 8007144:	4293      	cmp	r3, r2
 8007146:	d901      	bls.n	800714c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e0af      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800714c:	4b5a      	ldr	r3, [pc, #360]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 800714e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007150:	f003 0302 	and.w	r3, r3, #2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1ee      	bne.n	8007136 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d105      	bne.n	800716a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800715e:	4b56      	ldr	r3, [pc, #344]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	4a55      	ldr	r2, [pc, #340]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007168:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 809b 	beq.w	80072aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007174:	4b50      	ldr	r3, [pc, #320]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 030c 	and.w	r3, r3, #12
 800717c:	2b08      	cmp	r3, #8
 800717e:	d05c      	beq.n	800723a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d141      	bne.n	800720c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007188:	4b4c      	ldr	r3, [pc, #304]	; (80072bc <HAL_RCC_OscConfig+0x4ec>)
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800718e:	f7fd f99d 	bl	80044cc <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007196:	f7fd f999 	bl	80044cc <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e081      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071a8:	4b43      	ldr	r3, [pc, #268]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f0      	bne.n	8007196 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	431a      	orrs	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	019b      	lsls	r3, r3, #6
 80071c4:	431a      	orrs	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	085b      	lsrs	r3, r3, #1
 80071cc:	3b01      	subs	r3, #1
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	431a      	orrs	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d6:	061b      	lsls	r3, r3, #24
 80071d8:	4937      	ldr	r1, [pc, #220]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 80071da:	4313      	orrs	r3, r2
 80071dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071de:	4b37      	ldr	r3, [pc, #220]	; (80072bc <HAL_RCC_OscConfig+0x4ec>)
 80071e0:	2201      	movs	r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e4:	f7fd f972 	bl	80044cc <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ea:	e008      	b.n	80071fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ec:	f7fd f96e 	bl	80044cc <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e056      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071fe:	4b2e      	ldr	r3, [pc, #184]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0f0      	beq.n	80071ec <HAL_RCC_OscConfig+0x41c>
 800720a:	e04e      	b.n	80072aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800720c:	4b2b      	ldr	r3, [pc, #172]	; (80072bc <HAL_RCC_OscConfig+0x4ec>)
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007212:	f7fd f95b 	bl	80044cc <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800721a:	f7fd f957 	bl	80044cc <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e03f      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800722c:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1f0      	bne.n	800721a <HAL_RCC_OscConfig+0x44a>
 8007238:	e037      	b.n	80072aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d101      	bne.n	8007246 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e032      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <HAL_RCC_OscConfig+0x4e8>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	699b      	ldr	r3, [r3, #24]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d028      	beq.n	80072a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800725e:	429a      	cmp	r2, r3
 8007260:	d121      	bne.n	80072a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800726c:	429a      	cmp	r2, r3
 800726e:	d11a      	bne.n	80072a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007276:	4013      	ands	r3, r2
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800727c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800727e:	4293      	cmp	r3, r2
 8007280:	d111      	bne.n	80072a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	3b01      	subs	r3, #1
 8007290:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007292:	429a      	cmp	r2, r3
 8007294:	d107      	bne.n	80072a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d001      	beq.n	80072aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e000      	b.n	80072ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40007000 	.word	0x40007000
 80072b8:	40023800 	.word	0x40023800
 80072bc:	42470060 	.word	0x42470060

080072c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e0cc      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072d4:	4b68      	ldr	r3, [pc, #416]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d90c      	bls.n	80072fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072e2:	4b65      	ldr	r3, [pc, #404]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ea:	4b63      	ldr	r3, [pc, #396]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d001      	beq.n	80072fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0b8      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d020      	beq.n	800734a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d005      	beq.n	8007320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007314:	4b59      	ldr	r3, [pc, #356]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	4a58      	ldr	r2, [pc, #352]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 800731a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800731e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0308 	and.w	r3, r3, #8
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800732c:	4b53      	ldr	r3, [pc, #332]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	4a52      	ldr	r2, [pc, #328]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007338:	4b50      	ldr	r3, [pc, #320]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	494d      	ldr	r1, [pc, #308]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007346:	4313      	orrs	r3, r2
 8007348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d044      	beq.n	80073e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d107      	bne.n	800736e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800735e:	4b47      	ldr	r3, [pc, #284]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d119      	bne.n	800739e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e07f      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b02      	cmp	r3, #2
 8007374:	d003      	beq.n	800737e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800737a:	2b03      	cmp	r3, #3
 800737c:	d107      	bne.n	800738e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800737e:	4b3f      	ldr	r3, [pc, #252]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d109      	bne.n	800739e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e06f      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800738e:	4b3b      	ldr	r3, [pc, #236]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e067      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800739e:	4b37      	ldr	r3, [pc, #220]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f023 0203 	bic.w	r2, r3, #3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	4934      	ldr	r1, [pc, #208]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073b0:	f7fd f88c 	bl	80044cc <HAL_GetTick>
 80073b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073b6:	e00a      	b.n	80073ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073b8:	f7fd f888 	bl	80044cc <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d901      	bls.n	80073ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e04f      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ce:	4b2b      	ldr	r3, [pc, #172]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f003 020c 	and.w	r2, r3, #12
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	429a      	cmp	r2, r3
 80073de:	d1eb      	bne.n	80073b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073e0:	4b25      	ldr	r3, [pc, #148]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0307 	and.w	r3, r3, #7
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d20c      	bcs.n	8007408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ee:	4b22      	ldr	r3, [pc, #136]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f6:	4b20      	ldr	r3, [pc, #128]	; (8007478 <HAL_RCC_ClockConfig+0x1b8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d001      	beq.n	8007408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e032      	b.n	800746e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d008      	beq.n	8007426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007414:	4b19      	ldr	r3, [pc, #100]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	4916      	ldr	r1, [pc, #88]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007422:	4313      	orrs	r3, r2
 8007424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0308 	and.w	r3, r3, #8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d009      	beq.n	8007446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007432:	4b12      	ldr	r3, [pc, #72]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	490e      	ldr	r1, [pc, #56]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 8007442:	4313      	orrs	r3, r2
 8007444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007446:	f000 f821 	bl	800748c <HAL_RCC_GetSysClockFreq>
 800744a:	4602      	mov	r2, r0
 800744c:	4b0b      	ldr	r3, [pc, #44]	; (800747c <HAL_RCC_ClockConfig+0x1bc>)
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	091b      	lsrs	r3, r3, #4
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	490a      	ldr	r1, [pc, #40]	; (8007480 <HAL_RCC_ClockConfig+0x1c0>)
 8007458:	5ccb      	ldrb	r3, [r1, r3]
 800745a:	fa22 f303 	lsr.w	r3, r2, r3
 800745e:	4a09      	ldr	r2, [pc, #36]	; (8007484 <HAL_RCC_ClockConfig+0x1c4>)
 8007460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007462:	4b09      	ldr	r3, [pc, #36]	; (8007488 <HAL_RCC_ClockConfig+0x1c8>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4618      	mov	r0, r3
 8007468:	f7fc ffec 	bl	8004444 <HAL_InitTick>

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40023c00 	.word	0x40023c00
 800747c:	40023800 	.word	0x40023800
 8007480:	0800f868 	.word	0x0800f868
 8007484:	20000000 	.word	0x20000000
 8007488:	20000004 	.word	0x20000004

0800748c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800748c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007494:	2300      	movs	r3, #0
 8007496:	607b      	str	r3, [r7, #4]
 8007498:	2300      	movs	r3, #0
 800749a:	60fb      	str	r3, [r7, #12]
 800749c:	2300      	movs	r3, #0
 800749e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074a4:	4b67      	ldr	r3, [pc, #412]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f003 030c 	and.w	r3, r3, #12
 80074ac:	2b08      	cmp	r3, #8
 80074ae:	d00d      	beq.n	80074cc <HAL_RCC_GetSysClockFreq+0x40>
 80074b0:	2b08      	cmp	r3, #8
 80074b2:	f200 80bd 	bhi.w	8007630 <HAL_RCC_GetSysClockFreq+0x1a4>
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_RCC_GetSysClockFreq+0x34>
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d003      	beq.n	80074c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80074be:	e0b7      	b.n	8007630 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074c0:	4b61      	ldr	r3, [pc, #388]	; (8007648 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80074c2:	60bb      	str	r3, [r7, #8]
       break;
 80074c4:	e0b7      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074c6:	4b61      	ldr	r3, [pc, #388]	; (800764c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80074c8:	60bb      	str	r3, [r7, #8]
      break;
 80074ca:	e0b4      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074cc:	4b5d      	ldr	r3, [pc, #372]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074d6:	4b5b      	ldr	r3, [pc, #364]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d04d      	beq.n	800757e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074e2:	4b58      	ldr	r3, [pc, #352]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	099b      	lsrs	r3, r3, #6
 80074e8:	461a      	mov	r2, r3
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80074f2:	f04f 0100 	mov.w	r1, #0
 80074f6:	ea02 0800 	and.w	r8, r2, r0
 80074fa:	ea03 0901 	and.w	r9, r3, r1
 80074fe:	4640      	mov	r0, r8
 8007500:	4649      	mov	r1, r9
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	f04f 0300 	mov.w	r3, #0
 800750a:	014b      	lsls	r3, r1, #5
 800750c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007510:	0142      	lsls	r2, r0, #5
 8007512:	4610      	mov	r0, r2
 8007514:	4619      	mov	r1, r3
 8007516:	ebb0 0008 	subs.w	r0, r0, r8
 800751a:	eb61 0109 	sbc.w	r1, r1, r9
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	018b      	lsls	r3, r1, #6
 8007528:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800752c:	0182      	lsls	r2, r0, #6
 800752e:	1a12      	subs	r2, r2, r0
 8007530:	eb63 0301 	sbc.w	r3, r3, r1
 8007534:	f04f 0000 	mov.w	r0, #0
 8007538:	f04f 0100 	mov.w	r1, #0
 800753c:	00d9      	lsls	r1, r3, #3
 800753e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007542:	00d0      	lsls	r0, r2, #3
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	eb12 0208 	adds.w	r2, r2, r8
 800754c:	eb43 0309 	adc.w	r3, r3, r9
 8007550:	f04f 0000 	mov.w	r0, #0
 8007554:	f04f 0100 	mov.w	r1, #0
 8007558:	0259      	lsls	r1, r3, #9
 800755a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800755e:	0250      	lsls	r0, r2, #9
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	4610      	mov	r0, r2
 8007566:	4619      	mov	r1, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	461a      	mov	r2, r3
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	f7f9 fb0e 	bl	8000b90 <__aeabi_uldivmod>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	4613      	mov	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	e04a      	b.n	8007614 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800757e:	4b31      	ldr	r3, [pc, #196]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	099b      	lsrs	r3, r3, #6
 8007584:	461a      	mov	r2, r3
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800758e:	f04f 0100 	mov.w	r1, #0
 8007592:	ea02 0400 	and.w	r4, r2, r0
 8007596:	ea03 0501 	and.w	r5, r3, r1
 800759a:	4620      	mov	r0, r4
 800759c:	4629      	mov	r1, r5
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	014b      	lsls	r3, r1, #5
 80075a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80075ac:	0142      	lsls	r2, r0, #5
 80075ae:	4610      	mov	r0, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	1b00      	subs	r0, r0, r4
 80075b4:	eb61 0105 	sbc.w	r1, r1, r5
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	f04f 0300 	mov.w	r3, #0
 80075c0:	018b      	lsls	r3, r1, #6
 80075c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80075c6:	0182      	lsls	r2, r0, #6
 80075c8:	1a12      	subs	r2, r2, r0
 80075ca:	eb63 0301 	sbc.w	r3, r3, r1
 80075ce:	f04f 0000 	mov.w	r0, #0
 80075d2:	f04f 0100 	mov.w	r1, #0
 80075d6:	00d9      	lsls	r1, r3, #3
 80075d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80075dc:	00d0      	lsls	r0, r2, #3
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	1912      	adds	r2, r2, r4
 80075e4:	eb45 0303 	adc.w	r3, r5, r3
 80075e8:	f04f 0000 	mov.w	r0, #0
 80075ec:	f04f 0100 	mov.w	r1, #0
 80075f0:	0299      	lsls	r1, r3, #10
 80075f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80075f6:	0290      	lsls	r0, r2, #10
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4610      	mov	r0, r2
 80075fe:	4619      	mov	r1, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	461a      	mov	r2, r3
 8007604:	f04f 0300 	mov.w	r3, #0
 8007608:	f7f9 fac2 	bl	8000b90 <__aeabi_uldivmod>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4613      	mov	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007614:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	0c1b      	lsrs	r3, r3, #16
 800761a:	f003 0303 	and.w	r3, r3, #3
 800761e:	3301      	adds	r3, #1
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	fbb2 f3f3 	udiv	r3, r2, r3
 800762c:	60bb      	str	r3, [r7, #8]
      break;
 800762e:	e002      	b.n	8007636 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007632:	60bb      	str	r3, [r7, #8]
      break;
 8007634:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007636:	68bb      	ldr	r3, [r7, #8]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007642:	bf00      	nop
 8007644:	40023800 	.word	0x40023800
 8007648:	00f42400 	.word	0x00f42400
 800764c:	007a1200 	.word	0x007a1200

08007650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007654:	4b03      	ldr	r3, [pc, #12]	; (8007664 <HAL_RCC_GetHCLKFreq+0x14>)
 8007656:	681b      	ldr	r3, [r3, #0]
}
 8007658:	4618      	mov	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20000000 	.word	0x20000000

08007668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800766c:	f7ff fff0 	bl	8007650 <HAL_RCC_GetHCLKFreq>
 8007670:	4602      	mov	r2, r0
 8007672:	4b05      	ldr	r3, [pc, #20]	; (8007688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	0a9b      	lsrs	r3, r3, #10
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	4903      	ldr	r1, [pc, #12]	; (800768c <HAL_RCC_GetPCLK1Freq+0x24>)
 800767e:	5ccb      	ldrb	r3, [r1, r3]
 8007680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007684:	4618      	mov	r0, r3
 8007686:	bd80      	pop	{r7, pc}
 8007688:	40023800 	.word	0x40023800
 800768c:	0800f878 	.word	0x0800f878

08007690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007694:	f7ff ffdc 	bl	8007650 <HAL_RCC_GetHCLKFreq>
 8007698:	4602      	mov	r2, r0
 800769a:	4b05      	ldr	r3, [pc, #20]	; (80076b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	0b5b      	lsrs	r3, r3, #13
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	4903      	ldr	r1, [pc, #12]	; (80076b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076a6:	5ccb      	ldrb	r3, [r1, r3]
 80076a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40023800 	.word	0x40023800
 80076b4:	0800f878 	.word	0x0800f878

080076b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e041      	b.n	800774e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d106      	bne.n	80076e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f7fc f99e 	bl	8003a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	3304      	adds	r3, #4
 80076f4:	4619      	mov	r1, r3
 80076f6:	4610      	mov	r0, r2
 80076f8:	f000 fc12 	bl	8007f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d101      	bne.n	8007768 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e041      	b.n	80077ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800776e:	b2db      	uxtb	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d106      	bne.n	8007782 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f839 	bl	80077f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2202      	movs	r2, #2
 8007786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3304      	adds	r3, #4
 8007792:	4619      	mov	r1, r3
 8007794:	4610      	mov	r0, r2
 8007796:	f000 fbc3 	bl	8007f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d109      	bne.n	800782c <HAL_TIM_PWM_Start+0x24>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800781e:	b2db      	uxtb	r3, r3
 8007820:	2b01      	cmp	r3, #1
 8007822:	bf14      	ite	ne
 8007824:	2301      	movne	r3, #1
 8007826:	2300      	moveq	r3, #0
 8007828:	b2db      	uxtb	r3, r3
 800782a:	e022      	b.n	8007872 <HAL_TIM_PWM_Start+0x6a>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b04      	cmp	r3, #4
 8007830:	d109      	bne.n	8007846 <HAL_TIM_PWM_Start+0x3e>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b01      	cmp	r3, #1
 800783c:	bf14      	ite	ne
 800783e:	2301      	movne	r3, #1
 8007840:	2300      	moveq	r3, #0
 8007842:	b2db      	uxtb	r3, r3
 8007844:	e015      	b.n	8007872 <HAL_TIM_PWM_Start+0x6a>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b08      	cmp	r3, #8
 800784a:	d109      	bne.n	8007860 <HAL_TIM_PWM_Start+0x58>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	bf14      	ite	ne
 8007858:	2301      	movne	r3, #1
 800785a:	2300      	moveq	r3, #0
 800785c:	b2db      	uxtb	r3, r3
 800785e:	e008      	b.n	8007872 <HAL_TIM_PWM_Start+0x6a>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007866:	b2db      	uxtb	r3, r3
 8007868:	2b01      	cmp	r3, #1
 800786a:	bf14      	ite	ne
 800786c:	2301      	movne	r3, #1
 800786e:	2300      	moveq	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e07c      	b.n	8007974 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d104      	bne.n	800788a <HAL_TIM_PWM_Start+0x82>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007888:	e013      	b.n	80078b2 <HAL_TIM_PWM_Start+0xaa>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b04      	cmp	r3, #4
 800788e:	d104      	bne.n	800789a <HAL_TIM_PWM_Start+0x92>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007898:	e00b      	b.n	80078b2 <HAL_TIM_PWM_Start+0xaa>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b08      	cmp	r3, #8
 800789e:	d104      	bne.n	80078aa <HAL_TIM_PWM_Start+0xa2>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078a8:	e003      	b.n	80078b2 <HAL_TIM_PWM_Start+0xaa>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2202      	movs	r2, #2
 80078ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2201      	movs	r2, #1
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 fe1a 	bl	80084f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a2d      	ldr	r2, [pc, #180]	; (800797c <HAL_TIM_PWM_Start+0x174>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_TIM_PWM_Start+0xcc>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a2c      	ldr	r2, [pc, #176]	; (8007980 <HAL_TIM_PWM_Start+0x178>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d101      	bne.n	80078d8 <HAL_TIM_PWM_Start+0xd0>
 80078d4:	2301      	movs	r3, #1
 80078d6:	e000      	b.n	80078da <HAL_TIM_PWM_Start+0xd2>
 80078d8:	2300      	movs	r3, #0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d007      	beq.n	80078ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a22      	ldr	r2, [pc, #136]	; (800797c <HAL_TIM_PWM_Start+0x174>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d022      	beq.n	800793e <HAL_TIM_PWM_Start+0x136>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007900:	d01d      	beq.n	800793e <HAL_TIM_PWM_Start+0x136>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a1f      	ldr	r2, [pc, #124]	; (8007984 <HAL_TIM_PWM_Start+0x17c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d018      	beq.n	800793e <HAL_TIM_PWM_Start+0x136>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a1d      	ldr	r2, [pc, #116]	; (8007988 <HAL_TIM_PWM_Start+0x180>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d013      	beq.n	800793e <HAL_TIM_PWM_Start+0x136>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a1c      	ldr	r2, [pc, #112]	; (800798c <HAL_TIM_PWM_Start+0x184>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d00e      	beq.n	800793e <HAL_TIM_PWM_Start+0x136>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a16      	ldr	r2, [pc, #88]	; (8007980 <HAL_TIM_PWM_Start+0x178>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d009      	beq.n	800793e <HAL_TIM_PWM_Start+0x136>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a18      	ldr	r2, [pc, #96]	; (8007990 <HAL_TIM_PWM_Start+0x188>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d004      	beq.n	800793e <HAL_TIM_PWM_Start+0x136>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a16      	ldr	r2, [pc, #88]	; (8007994 <HAL_TIM_PWM_Start+0x18c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d111      	bne.n	8007962 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b06      	cmp	r3, #6
 800794e:	d010      	beq.n	8007972 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0201 	orr.w	r2, r2, #1
 800795e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007960:	e007      	b.n	8007972 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0201 	orr.w	r2, r2, #1
 8007970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	40010000 	.word	0x40010000
 8007980:	40010400 	.word	0x40010400
 8007984:	40000400 	.word	0x40000400
 8007988:	40000800 	.word	0x40000800
 800798c:	40000c00 	.word	0x40000c00
 8007990:	40014000 	.word	0x40014000
 8007994:	40001800 	.word	0x40001800

08007998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d122      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d11b      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0202 	mvn.w	r2, #2
 80079c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fa81 	bl	8007ee2 <HAL_TIM_IC_CaptureCallback>
 80079e0:	e005      	b.n	80079ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa73 	bl	8007ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa84 	bl	8007ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d122      	bne.n	8007a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d11b      	bne.n	8007a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0204 	mvn.w	r2, #4
 8007a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa57 	bl	8007ee2 <HAL_TIM_IC_CaptureCallback>
 8007a34:	e005      	b.n	8007a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fa49 	bl	8007ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 fa5a 	bl	8007ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f003 0308 	and.w	r3, r3, #8
 8007a52:	2b08      	cmp	r3, #8
 8007a54:	d122      	bne.n	8007a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d11b      	bne.n	8007a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f06f 0208 	mvn.w	r2, #8
 8007a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2204      	movs	r2, #4
 8007a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fa2d 	bl	8007ee2 <HAL_TIM_IC_CaptureCallback>
 8007a88:	e005      	b.n	8007a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fa1f 	bl	8007ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fa30 	bl	8007ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f003 0310 	and.w	r3, r3, #16
 8007aa6:	2b10      	cmp	r3, #16
 8007aa8:	d122      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	2b10      	cmp	r3, #16
 8007ab6:	d11b      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f06f 0210 	mvn.w	r2, #16
 8007ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2208      	movs	r2, #8
 8007ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fa03 	bl	8007ee2 <HAL_TIM_IC_CaptureCallback>
 8007adc:	e005      	b.n	8007aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f9f5 	bl	8007ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fa06 	bl	8007ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d10e      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d107      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f06f 0201 	mvn.w	r2, #1
 8007b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f9cf 	bl	8007eba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b26:	2b80      	cmp	r3, #128	; 0x80
 8007b28:	d10e      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b34:	2b80      	cmp	r3, #128	; 0x80
 8007b36:	d107      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fdd4 	bl	80086f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b52:	2b40      	cmp	r3, #64	; 0x40
 8007b54:	d10e      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b60:	2b40      	cmp	r3, #64	; 0x40
 8007b62:	d107      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f9cb 	bl	8007f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0320 	and.w	r3, r3, #32
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d10e      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d107      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0220 	mvn.w	r2, #32
 8007b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fd9e 	bl	80086dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e0ae      	b.n	8007d24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b0c      	cmp	r3, #12
 8007bd2:	f200 809f 	bhi.w	8007d14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bd6:	a201      	add	r2, pc, #4	; (adr r2, 8007bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bdc:	08007c11 	.word	0x08007c11
 8007be0:	08007d15 	.word	0x08007d15
 8007be4:	08007d15 	.word	0x08007d15
 8007be8:	08007d15 	.word	0x08007d15
 8007bec:	08007c51 	.word	0x08007c51
 8007bf0:	08007d15 	.word	0x08007d15
 8007bf4:	08007d15 	.word	0x08007d15
 8007bf8:	08007d15 	.word	0x08007d15
 8007bfc:	08007c93 	.word	0x08007c93
 8007c00:	08007d15 	.word	0x08007d15
 8007c04:	08007d15 	.word	0x08007d15
 8007c08:	08007d15 	.word	0x08007d15
 8007c0c:	08007cd3 	.word	0x08007cd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 fa22 	bl	8008060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0208 	orr.w	r2, r2, #8
 8007c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699a      	ldr	r2, [r3, #24]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0204 	bic.w	r2, r2, #4
 8007c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6999      	ldr	r1, [r3, #24]
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	691a      	ldr	r2, [r3, #16]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	619a      	str	r2, [r3, #24]
      break;
 8007c4e:	e064      	b.n	8007d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 fa72 	bl	8008140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6999      	ldr	r1, [r3, #24]
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	021a      	lsls	r2, r3, #8
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	619a      	str	r2, [r3, #24]
      break;
 8007c90:	e043      	b.n	8007d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fac7 	bl	800822c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f042 0208 	orr.w	r2, r2, #8
 8007cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69da      	ldr	r2, [r3, #28]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0204 	bic.w	r2, r2, #4
 8007cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	69d9      	ldr	r1, [r3, #28]
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	691a      	ldr	r2, [r3, #16]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	61da      	str	r2, [r3, #28]
      break;
 8007cd0:	e023      	b.n	8007d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68b9      	ldr	r1, [r7, #8]
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 fb1b 	bl	8008314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69da      	ldr	r2, [r3, #28]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69da      	ldr	r2, [r3, #28]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69d9      	ldr	r1, [r3, #28]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	021a      	lsls	r2, r3, #8
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	61da      	str	r2, [r3, #28]
      break;
 8007d12:	e002      	b.n	8007d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	75fb      	strb	r3, [r7, #23]
      break;
 8007d18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3718      	adds	r7, #24
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d101      	bne.n	8007d48 <HAL_TIM_ConfigClockSource+0x1c>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e0b4      	b.n	8007eb2 <HAL_TIM_ConfigClockSource+0x186>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2202      	movs	r2, #2
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d80:	d03e      	beq.n	8007e00 <HAL_TIM_ConfigClockSource+0xd4>
 8007d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d86:	f200 8087 	bhi.w	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8e:	f000 8086 	beq.w	8007e9e <HAL_TIM_ConfigClockSource+0x172>
 8007d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d96:	d87f      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007d98:	2b70      	cmp	r3, #112	; 0x70
 8007d9a:	d01a      	beq.n	8007dd2 <HAL_TIM_ConfigClockSource+0xa6>
 8007d9c:	2b70      	cmp	r3, #112	; 0x70
 8007d9e:	d87b      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007da0:	2b60      	cmp	r3, #96	; 0x60
 8007da2:	d050      	beq.n	8007e46 <HAL_TIM_ConfigClockSource+0x11a>
 8007da4:	2b60      	cmp	r3, #96	; 0x60
 8007da6:	d877      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007da8:	2b50      	cmp	r3, #80	; 0x50
 8007daa:	d03c      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0xfa>
 8007dac:	2b50      	cmp	r3, #80	; 0x50
 8007dae:	d873      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007db0:	2b40      	cmp	r3, #64	; 0x40
 8007db2:	d058      	beq.n	8007e66 <HAL_TIM_ConfigClockSource+0x13a>
 8007db4:	2b40      	cmp	r3, #64	; 0x40
 8007db6:	d86f      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007db8:	2b30      	cmp	r3, #48	; 0x30
 8007dba:	d064      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x15a>
 8007dbc:	2b30      	cmp	r3, #48	; 0x30
 8007dbe:	d86b      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc0:	2b20      	cmp	r3, #32
 8007dc2:	d060      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x15a>
 8007dc4:	2b20      	cmp	r3, #32
 8007dc6:	d867      	bhi.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d05c      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x15a>
 8007dcc:	2b10      	cmp	r3, #16
 8007dce:	d05a      	beq.n	8007e86 <HAL_TIM_ConfigClockSource+0x15a>
 8007dd0:	e062      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6899      	ldr	r1, [r3, #8]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f000 fb67 	bl	80084b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	609a      	str	r2, [r3, #8]
      break;
 8007dfe:	e04f      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	6899      	ldr	r1, [r3, #8]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	f000 fb50 	bl	80084b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689a      	ldr	r2, [r3, #8]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e22:	609a      	str	r2, [r3, #8]
      break;
 8007e24:	e03c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6818      	ldr	r0, [r3, #0]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	6859      	ldr	r1, [r3, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f000 fac4 	bl	80083c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2150      	movs	r1, #80	; 0x50
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f000 fb1d 	bl	800847e <TIM_ITRx_SetConfig>
      break;
 8007e44:	e02c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6818      	ldr	r0, [r3, #0]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	6859      	ldr	r1, [r3, #4]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f000 fae3 	bl	800841e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2160      	movs	r1, #96	; 0x60
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 fb0d 	bl	800847e <TIM_ITRx_SetConfig>
      break;
 8007e64:	e01c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6859      	ldr	r1, [r3, #4]
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	461a      	mov	r2, r3
 8007e74:	f000 faa4 	bl	80083c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2140      	movs	r1, #64	; 0x40
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fafd 	bl	800847e <TIM_ITRx_SetConfig>
      break;
 8007e84:	e00c      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	4610      	mov	r0, r2
 8007e92:	f000 faf4 	bl	800847e <TIM_ITRx_SetConfig>
      break;
 8007e96:	e003      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e9c:	e000      	b.n	8007ea0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ec2:	bf00      	nop
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
	...

08007f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a40      	ldr	r2, [pc, #256]	; (8008034 <TIM_Base_SetConfig+0x114>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d013      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3e:	d00f      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a3d      	ldr	r2, [pc, #244]	; (8008038 <TIM_Base_SetConfig+0x118>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d00b      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a3c      	ldr	r2, [pc, #240]	; (800803c <TIM_Base_SetConfig+0x11c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d007      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a3b      	ldr	r2, [pc, #236]	; (8008040 <TIM_Base_SetConfig+0x120>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d003      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a3a      	ldr	r2, [pc, #232]	; (8008044 <TIM_Base_SetConfig+0x124>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d108      	bne.n	8007f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a2f      	ldr	r2, [pc, #188]	; (8008034 <TIM_Base_SetConfig+0x114>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d02b      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f80:	d027      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a2c      	ldr	r2, [pc, #176]	; (8008038 <TIM_Base_SetConfig+0x118>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d023      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a2b      	ldr	r2, [pc, #172]	; (800803c <TIM_Base_SetConfig+0x11c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d01f      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a2a      	ldr	r2, [pc, #168]	; (8008040 <TIM_Base_SetConfig+0x120>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d01b      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a29      	ldr	r2, [pc, #164]	; (8008044 <TIM_Base_SetConfig+0x124>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d017      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a28      	ldr	r2, [pc, #160]	; (8008048 <TIM_Base_SetConfig+0x128>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d013      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a27      	ldr	r2, [pc, #156]	; (800804c <TIM_Base_SetConfig+0x12c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00f      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a26      	ldr	r2, [pc, #152]	; (8008050 <TIM_Base_SetConfig+0x130>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00b      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a25      	ldr	r2, [pc, #148]	; (8008054 <TIM_Base_SetConfig+0x134>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d007      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a24      	ldr	r2, [pc, #144]	; (8008058 <TIM_Base_SetConfig+0x138>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d003      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a23      	ldr	r2, [pc, #140]	; (800805c <TIM_Base_SetConfig+0x13c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d108      	bne.n	8007fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a0a      	ldr	r2, [pc, #40]	; (8008034 <TIM_Base_SetConfig+0x114>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_Base_SetConfig+0xf8>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a0c      	ldr	r2, [pc, #48]	; (8008044 <TIM_Base_SetConfig+0x124>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d103      	bne.n	8008020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	615a      	str	r2, [r3, #20]
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40010000 	.word	0x40010000
 8008038:	40000400 	.word	0x40000400
 800803c:	40000800 	.word	0x40000800
 8008040:	40000c00 	.word	0x40000c00
 8008044:	40010400 	.word	0x40010400
 8008048:	40014000 	.word	0x40014000
 800804c:	40014400 	.word	0x40014400
 8008050:	40014800 	.word	0x40014800
 8008054:	40001800 	.word	0x40001800
 8008058:	40001c00 	.word	0x40001c00
 800805c:	40002000 	.word	0x40002000

08008060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	f023 0201 	bic.w	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0303 	bic.w	r3, r3, #3
 8008096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f023 0302 	bic.w	r3, r3, #2
 80080a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a20      	ldr	r2, [pc, #128]	; (8008138 <TIM_OC1_SetConfig+0xd8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d003      	beq.n	80080c4 <TIM_OC1_SetConfig+0x64>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a1f      	ldr	r2, [pc, #124]	; (800813c <TIM_OC1_SetConfig+0xdc>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d10c      	bne.n	80080de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f023 0308 	bic.w	r3, r3, #8
 80080ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f023 0304 	bic.w	r3, r3, #4
 80080dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a15      	ldr	r2, [pc, #84]	; (8008138 <TIM_OC1_SetConfig+0xd8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d003      	beq.n	80080ee <TIM_OC1_SetConfig+0x8e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a14      	ldr	r2, [pc, #80]	; (800813c <TIM_OC1_SetConfig+0xdc>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d111      	bne.n	8008112 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	621a      	str	r2, [r3, #32]
}
 800812c:	bf00      	nop
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	40010000 	.word	0x40010000
 800813c:	40010400 	.word	0x40010400

08008140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	f023 0210 	bic.w	r2, r3, #16
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800816e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f023 0320 	bic.w	r3, r3, #32
 800818a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	4313      	orrs	r3, r2
 8008196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a22      	ldr	r2, [pc, #136]	; (8008224 <TIM_OC2_SetConfig+0xe4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_OC2_SetConfig+0x68>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a21      	ldr	r2, [pc, #132]	; (8008228 <TIM_OC2_SetConfig+0xe8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d10d      	bne.n	80081c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a17      	ldr	r2, [pc, #92]	; (8008224 <TIM_OC2_SetConfig+0xe4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d003      	beq.n	80081d4 <TIM_OC2_SetConfig+0x94>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a16      	ldr	r2, [pc, #88]	; (8008228 <TIM_OC2_SetConfig+0xe8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d113      	bne.n	80081fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	621a      	str	r2, [r3, #32]
}
 8008216:	bf00      	nop
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40010000 	.word	0x40010000
 8008228:	40010400 	.word	0x40010400

0800822c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800825a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0303 	bic.w	r3, r3, #3
 8008262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a21      	ldr	r2, [pc, #132]	; (800830c <TIM_OC3_SetConfig+0xe0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_OC3_SetConfig+0x66>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a20      	ldr	r2, [pc, #128]	; (8008310 <TIM_OC3_SetConfig+0xe4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d10d      	bne.n	80082ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a16      	ldr	r2, [pc, #88]	; (800830c <TIM_OC3_SetConfig+0xe0>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d003      	beq.n	80082be <TIM_OC3_SetConfig+0x92>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a15      	ldr	r2, [pc, #84]	; (8008310 <TIM_OC3_SetConfig+0xe4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d113      	bne.n	80082e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	011b      	lsls	r3, r3, #4
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	621a      	str	r2, [r3, #32]
}
 8008300:	bf00      	nop
 8008302:	371c      	adds	r7, #28
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	40010000 	.word	0x40010000
 8008310:	40010400 	.word	0x40010400

08008314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800834a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4313      	orrs	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800835e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	031b      	lsls	r3, r3, #12
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	4313      	orrs	r3, r2
 800836a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a12      	ldr	r2, [pc, #72]	; (80083b8 <TIM_OC4_SetConfig+0xa4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_OC4_SetConfig+0x68>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a11      	ldr	r2, [pc, #68]	; (80083bc <TIM_OC4_SetConfig+0xa8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d109      	bne.n	8008390 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	019b      	lsls	r3, r3, #6
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	621a      	str	r2, [r3, #32]
}
 80083aa:	bf00      	nop
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	40010000 	.word	0x40010000
 80083bc:	40010400 	.word	0x40010400

080083c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	f023 0201 	bic.w	r2, r3, #1
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f023 030a 	bic.w	r3, r3, #10
 80083fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4313      	orrs	r3, r2
 8008404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	697a      	ldr	r2, [r7, #20]
 8008410:	621a      	str	r2, [r3, #32]
}
 8008412:	bf00      	nop
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800841e:	b480      	push	{r7}
 8008420:	b087      	sub	sp, #28
 8008422:	af00      	add	r7, sp, #0
 8008424:	60f8      	str	r0, [r7, #12]
 8008426:	60b9      	str	r1, [r7, #8]
 8008428:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	f023 0210 	bic.w	r2, r3, #16
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6a1b      	ldr	r3, [r3, #32]
 8008440:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	031b      	lsls	r3, r3, #12
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	4313      	orrs	r3, r2
 8008452:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800845a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	621a      	str	r2, [r3, #32]
}
 8008472:	bf00      	nop
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800847e:	b480      	push	{r7}
 8008480:	b085      	sub	sp, #20
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008494:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4313      	orrs	r3, r2
 800849c:	f043 0307 	orr.w	r3, r3, #7
 80084a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	609a      	str	r2, [r3, #8]
}
 80084a8:	bf00      	nop
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
 80084c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	021a      	lsls	r2, r3, #8
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	431a      	orrs	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4313      	orrs	r3, r2
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	609a      	str	r2, [r3, #8]
}
 80084e8:	bf00      	nop
 80084ea:	371c      	adds	r7, #28
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	f003 031f 	and.w	r3, r3, #31
 8008506:	2201      	movs	r2, #1
 8008508:	fa02 f303 	lsl.w	r3, r2, r3
 800850c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a1a      	ldr	r2, [r3, #32]
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	43db      	mvns	r3, r3
 8008516:	401a      	ands	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a1a      	ldr	r2, [r3, #32]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	6879      	ldr	r1, [r7, #4]
 8008528:	fa01 f303 	lsl.w	r3, r1, r3
 800852c:	431a      	orrs	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008550:	2b01      	cmp	r3, #1
 8008552:	d101      	bne.n	8008558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008554:	2302      	movs	r3, #2
 8008556:	e05a      	b.n	800860e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800857e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a21      	ldr	r2, [pc, #132]	; (800861c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d022      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a4:	d01d      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a1d      	ldr	r2, [pc, #116]	; (8008620 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d018      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a1b      	ldr	r2, [pc, #108]	; (8008624 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d013      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a1a      	ldr	r2, [pc, #104]	; (8008628 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00e      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a18      	ldr	r2, [pc, #96]	; (800862c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d009      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a17      	ldr	r2, [pc, #92]	; (8008630 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d004      	beq.n	80085e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a15      	ldr	r2, [pc, #84]	; (8008634 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d10c      	bne.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40010000 	.word	0x40010000
 8008620:	40000400 	.word	0x40000400
 8008624:	40000800 	.word	0x40000800
 8008628:	40000c00 	.word	0x40000c00
 800862c:	40010400 	.word	0x40010400
 8008630:	40014000 	.word	0x40014000
 8008634:	40001800 	.word	0x40001800

08008638 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008650:	2302      	movs	r3, #2
 8008652:	e03d      	b.n	80086d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	4313      	orrs	r3, r2
 8008676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	4313      	orrs	r3, r2
 8008684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4313      	orrs	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	4313      	orrs	r3, r2
 80086a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086e4:	bf00      	nop
 80086e6:	370c      	adds	r7, #12
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e03f      	b.n	8008796 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d106      	bne.n	8008730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7fb f9f6 	bl	8003b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2224      	movs	r2, #36	; 0x24
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 ff97 	bl	800967c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800875c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	695a      	ldr	r2, [r3, #20]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800876c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800877c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2220      	movs	r2, #32
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2220      	movs	r2, #32
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b08a      	sub	sp, #40	; 0x28
 80087a2:	af02      	add	r7, sp, #8
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	603b      	str	r3, [r7, #0]
 80087aa:	4613      	mov	r3, r2
 80087ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	d17c      	bne.n	80088b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <HAL_UART_Transmit+0x2c>
 80087c4:	88fb      	ldrh	r3, [r7, #6]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e075      	b.n	80088ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_UART_Transmit+0x3e>
 80087d8:	2302      	movs	r3, #2
 80087da:	e06e      	b.n	80088ba <HAL_UART_Transmit+0x11c>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2201      	movs	r2, #1
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2221      	movs	r2, #33	; 0x21
 80087ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087f2:	f7fb fe6b 	bl	80044cc <HAL_GetTick>
 80087f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	88fa      	ldrh	r2, [r7, #6]
 80087fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	88fa      	ldrh	r2, [r7, #6]
 8008802:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800880c:	d108      	bne.n	8008820 <HAL_UART_Transmit+0x82>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d104      	bne.n	8008820 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	61bb      	str	r3, [r7, #24]
 800881e:	e003      	b.n	8008828 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008824:	2300      	movs	r3, #0
 8008826:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008830:	e02a      	b.n	8008888 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2200      	movs	r2, #0
 800883a:	2180      	movs	r1, #128	; 0x80
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 fc53 	bl	80090e8 <UART_WaitOnFlagUntilTimeout>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e036      	b.n	80088ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10b      	bne.n	800886a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	881b      	ldrh	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008860:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	3302      	adds	r3, #2
 8008866:	61bb      	str	r3, [r7, #24]
 8008868:	e007      	b.n	800887a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	781a      	ldrb	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	3301      	adds	r3, #1
 8008878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800887e:	b29b      	uxth	r3, r3
 8008880:	3b01      	subs	r3, #1
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1cf      	bne.n	8008832 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2200      	movs	r2, #0
 800889a:	2140      	movs	r1, #64	; 0x40
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 fc23 	bl	80090e8 <UART_WaitOnFlagUntilTimeout>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e006      	b.n	80088ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	e000      	b.n	80088ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80088b8:	2302      	movs	r3, #2
  }
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3720      	adds	r7, #32
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b08c      	sub	sp, #48	; 0x30
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60f8      	str	r0, [r7, #12]
 80088ca:	60b9      	str	r1, [r7, #8]
 80088cc:	4613      	mov	r3, r2
 80088ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b20      	cmp	r3, #32
 80088da:	d152      	bne.n	8008982 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e04b      	b.n	8008984 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d101      	bne.n	80088fa <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80088f6:	2302      	movs	r3, #2
 80088f8:	e044      	b.n	8008984 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008908:	88fb      	ldrh	r3, [r7, #6]
 800890a:	461a      	mov	r2, r3
 800890c:	68b9      	ldr	r1, [r7, #8]
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 fc58 	bl	80091c4 <UART_Start_Receive_DMA>
 8008914:	4603      	mov	r3, r0
 8008916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800891a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800891e:	2b00      	cmp	r3, #0
 8008920:	d12c      	bne.n	800897c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008926:	2b01      	cmp	r3, #1
 8008928:	d125      	bne.n	8008976 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800892a:	2300      	movs	r3, #0
 800892c:	613b      	str	r3, [r7, #16]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	330c      	adds	r3, #12
 8008946:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	e853 3f00 	ldrex	r3, [r3]
 800894e:	617b      	str	r3, [r7, #20]
   return(result);
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f043 0310 	orr.w	r3, r3, #16
 8008956:	62bb      	str	r3, [r7, #40]	; 0x28
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	330c      	adds	r3, #12
 800895e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008960:	627a      	str	r2, [r7, #36]	; 0x24
 8008962:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6a39      	ldr	r1, [r7, #32]
 8008966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008968:	e841 2300 	strex	r3, r2, [r1]
 800896c:	61fb      	str	r3, [r7, #28]
   return(result);
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e5      	bne.n	8008940 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008974:	e002      	b.n	800897c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800897c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008980:	e000      	b.n	8008984 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008982:	2302      	movs	r3, #2
  }
}
 8008984:	4618      	mov	r0, r3
 8008986:	3730      	adds	r7, #48	; 0x30
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b0ba      	sub	sp, #232	; 0xe8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80089be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80089ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10f      	bne.n	80089f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089d6:	f003 0320 	and.w	r3, r3, #32
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d009      	beq.n	80089f2 <HAL_UART_IRQHandler+0x66>
 80089de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fd8b 	bl	8009506 <UART_Receive_IT>
      return;
 80089f0:	e256      	b.n	8008ea0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80089f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 80de 	beq.w	8008bb8 <HAL_UART_IRQHandler+0x22c>
 80089fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d106      	bne.n	8008a16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f000 80d1 	beq.w	8008bb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a1a:	f003 0301 	and.w	r3, r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00b      	beq.n	8008a3a <HAL_UART_IRQHandler+0xae>
 8008a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d005      	beq.n	8008a3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	f043 0201 	orr.w	r2, r3, #1
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3e:	f003 0304 	and.w	r3, r3, #4
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00b      	beq.n	8008a5e <HAL_UART_IRQHandler+0xd2>
 8008a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d005      	beq.n	8008a5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a56:	f043 0202 	orr.w	r2, r3, #2
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00b      	beq.n	8008a82 <HAL_UART_IRQHandler+0xf6>
 8008a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d005      	beq.n	8008a82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7a:	f043 0204 	orr.w	r2, r3, #4
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a86:	f003 0308 	and.w	r3, r3, #8
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d011      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x126>
 8008a8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a92:	f003 0320 	and.w	r3, r3, #32
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d105      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d005      	beq.n	8008ab2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	f043 0208 	orr.w	r2, r3, #8
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f000 81ed 	beq.w	8008e96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac0:	f003 0320 	and.w	r3, r3, #32
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d008      	beq.n	8008ada <HAL_UART_IRQHandler+0x14e>
 8008ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fd16 	bl	8009506 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae4:	2b40      	cmp	r3, #64	; 0x40
 8008ae6:	bf0c      	ite	eq
 8008ae8:	2301      	moveq	r3, #1
 8008aea:	2300      	movne	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d103      	bne.n	8008b06 <HAL_UART_IRQHandler+0x17a>
 8008afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d04f      	beq.n	8008ba6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fc1e 	bl	8009348 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	695b      	ldr	r3, [r3, #20]
 8008b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b16:	2b40      	cmp	r3, #64	; 0x40
 8008b18:	d141      	bne.n	8008b9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	3314      	adds	r3, #20
 8008b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3314      	adds	r3, #20
 8008b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008b46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008b52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1d9      	bne.n	8008b1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d013      	beq.n	8008b96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b72:	4a7d      	ldr	r2, [pc, #500]	; (8008d68 <HAL_UART_IRQHandler+0x3dc>)
 8008b74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fc fb28 	bl	80051d0 <HAL_DMA_Abort_IT>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d016      	beq.n	8008bb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b94:	e00e      	b.n	8008bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f9a4 	bl	8008ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b9c:	e00a      	b.n	8008bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f9a0 	bl	8008ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ba4:	e006      	b.n	8008bb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 f99c 	bl	8008ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008bb2:	e170      	b.n	8008e96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bb4:	bf00      	nop
    return;
 8008bb6:	e16e      	b.n	8008e96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	f040 814a 	bne.w	8008e56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc6:	f003 0310 	and.w	r3, r3, #16
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 8143 	beq.w	8008e56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bd4:	f003 0310 	and.w	r3, r3, #16
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 813c 	beq.w	8008e56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bde:	2300      	movs	r3, #0
 8008be0:	60bb      	str	r3, [r7, #8]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	60bb      	str	r3, [r7, #8]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	60bb      	str	r3, [r7, #8]
 8008bf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bfe:	2b40      	cmp	r3, #64	; 0x40
 8008c00:	f040 80b4 	bne.w	8008d6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 8140 	beq.w	8008e9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c22:	429a      	cmp	r2, r3
 8008c24:	f080 8139 	bcs.w	8008e9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008c2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c34:	69db      	ldr	r3, [r3, #28]
 8008c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c3a:	f000 8088 	beq.w	8008d4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	330c      	adds	r3, #12
 8008c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008c54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	330c      	adds	r3, #12
 8008c66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008c6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c7a:	e841 2300 	strex	r3, r2, [r1]
 8008c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1d9      	bne.n	8008c3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3314      	adds	r3, #20
 8008c90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c94:	e853 3f00 	ldrex	r3, [r3]
 8008c98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c9c:	f023 0301 	bic.w	r3, r3, #1
 8008ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	3314      	adds	r3, #20
 8008caa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008cae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008cb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e1      	bne.n	8008c8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3314      	adds	r3, #20
 8008ccc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	3314      	adds	r3, #20
 8008ce6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008cea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008cec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008cf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e3      	bne.n	8008cc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2220      	movs	r2, #32
 8008d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	330c      	adds	r3, #12
 8008d12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d16:	e853 3f00 	ldrex	r3, [r3]
 8008d1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d1e:	f023 0310 	bic.w	r3, r3, #16
 8008d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	330c      	adds	r3, #12
 8008d2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008d30:	65ba      	str	r2, [r7, #88]	; 0x58
 8008d32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d38:	e841 2300 	strex	r3, r2, [r1]
 8008d3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1e3      	bne.n	8008d0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fc f9d1 	bl	80050f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7fa fbe4 	bl	800352c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d64:	e099      	b.n	8008e9a <HAL_UART_IRQHandler+0x50e>
 8008d66:	bf00      	nop
 8008d68:	0800940f 	.word	0x0800940f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 808b 	beq.w	8008e9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008d88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 8086 	beq.w	8008e9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	330c      	adds	r3, #12
 8008d98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008da8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	330c      	adds	r3, #12
 8008db2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008db6:	647a      	str	r2, [r7, #68]	; 0x44
 8008db8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e3      	bne.n	8008d92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3314      	adds	r3, #20
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	e853 3f00 	ldrex	r3, [r3]
 8008dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	f023 0301 	bic.w	r3, r3, #1
 8008de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3314      	adds	r3, #20
 8008dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008dee:	633a      	str	r2, [r7, #48]	; 0x30
 8008df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df6:	e841 2300 	strex	r3, r2, [r1]
 8008dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e3      	bne.n	8008dca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	330c      	adds	r3, #12
 8008e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	e853 3f00 	ldrex	r3, [r3]
 8008e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0310 	bic.w	r3, r3, #16
 8008e26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	330c      	adds	r3, #12
 8008e30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008e34:	61fa      	str	r2, [r7, #28]
 8008e36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e38:	69b9      	ldr	r1, [r7, #24]
 8008e3a:	69fa      	ldr	r2, [r7, #28]
 8008e3c:	e841 2300 	strex	r3, r2, [r1]
 8008e40:	617b      	str	r3, [r7, #20]
   return(result);
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1e3      	bne.n	8008e10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7fa fb6c 	bl	800352c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e54:	e023      	b.n	8008e9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d009      	beq.n	8008e76 <HAL_UART_IRQHandler+0x4ea>
 8008e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 fae1 	bl	8009436 <UART_Transmit_IT>
    return;
 8008e74:	e014      	b.n	8008ea0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00e      	beq.n	8008ea0 <HAL_UART_IRQHandler+0x514>
 8008e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d008      	beq.n	8008ea0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 fb21 	bl	80094d6 <UART_EndTransmit_IT>
    return;
 8008e94:	e004      	b.n	8008ea0 <HAL_UART_IRQHandler+0x514>
    return;
 8008e96:	bf00      	nop
 8008e98:	e002      	b.n	8008ea0 <HAL_UART_IRQHandler+0x514>
      return;
 8008e9a:	bf00      	nop
 8008e9c:	e000      	b.n	8008ea0 <HAL_UART_IRQHandler+0x514>
      return;
 8008e9e:	bf00      	nop
  }
}
 8008ea0:	37e8      	adds	r7, #232	; 0xe8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop

08008ea8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ec4:	bf00      	nop
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b09c      	sub	sp, #112	; 0x70
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f04:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d172      	bne.n	8008ffa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f16:	2200      	movs	r2, #0
 8008f18:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	330c      	adds	r3, #12
 8008f20:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f24:	e853 3f00 	ldrex	r3, [r3]
 8008f28:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f30:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	330c      	adds	r3, #12
 8008f38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f3a:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f3c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e5      	bne.n	8008f1a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3314      	adds	r3, #20
 8008f54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f58:	e853 3f00 	ldrex	r3, [r3]
 8008f5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f60:	f023 0301 	bic.w	r3, r3, #1
 8008f64:	667b      	str	r3, [r7, #100]	; 0x64
 8008f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3314      	adds	r3, #20
 8008f6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008f6e:	647a      	str	r2, [r7, #68]	; 0x44
 8008f70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f76:	e841 2300 	strex	r3, r2, [r1]
 8008f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1e5      	bne.n	8008f4e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3314      	adds	r3, #20
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	623b      	str	r3, [r7, #32]
   return(result);
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f98:	663b      	str	r3, [r7, #96]	; 0x60
 8008f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3314      	adds	r3, #20
 8008fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008fa2:	633a      	str	r2, [r7, #48]	; 0x30
 8008fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e5      	bne.n	8008f82 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fb8:	2220      	movs	r2, #32
 8008fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d119      	bne.n	8008ffa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	330c      	adds	r3, #12
 8008fcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	e853 3f00 	ldrex	r3, [r3]
 8008fd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f023 0310 	bic.w	r3, r3, #16
 8008fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	330c      	adds	r3, #12
 8008fe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fe6:	61fa      	str	r2, [r7, #28]
 8008fe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	69b9      	ldr	r1, [r7, #24]
 8008fec:	69fa      	ldr	r2, [r7, #28]
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e5      	bne.n	8008fc6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d106      	bne.n	8009010 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009004:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009006:	4619      	mov	r1, r3
 8009008:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800900a:	f7fa fa8f 	bl	800352c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800900e:	e002      	b.n	8009016 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009010:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009012:	f7ff ff53 	bl	8008ebc <HAL_UART_RxCpltCallback>
}
 8009016:	bf00      	nop
 8009018:	3770      	adds	r7, #112	; 0x70
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}

0800901e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800901e:	b580      	push	{r7, lr}
 8009020:	b084      	sub	sp, #16
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009030:	2b01      	cmp	r3, #1
 8009032:	d108      	bne.n	8009046 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009038:	085b      	lsrs	r3, r3, #1
 800903a:	b29b      	uxth	r3, r3
 800903c:	4619      	mov	r1, r3
 800903e:	68f8      	ldr	r0, [r7, #12]
 8009040:	f7fa fa74 	bl	800352c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009044:	e002      	b.n	800904c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009046:	68f8      	ldr	r0, [r7, #12]
 8009048:	f7ff ff42 	bl	8008ed0 <HAL_UART_RxHalfCpltCallback>
}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800905c:	2300      	movs	r3, #0
 800905e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009064:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009070:	2b80      	cmp	r3, #128	; 0x80
 8009072:	bf0c      	ite	eq
 8009074:	2301      	moveq	r3, #1
 8009076:	2300      	movne	r3, #0
 8009078:	b2db      	uxtb	r3, r3
 800907a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009082:	b2db      	uxtb	r3, r3
 8009084:	2b21      	cmp	r3, #33	; 0x21
 8009086:	d108      	bne.n	800909a <UART_DMAError+0x46>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d005      	beq.n	800909a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	2200      	movs	r2, #0
 8009092:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009094:	68b8      	ldr	r0, [r7, #8]
 8009096:	f000 f92f 	bl	80092f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a4:	2b40      	cmp	r3, #64	; 0x40
 80090a6:	bf0c      	ite	eq
 80090a8:	2301      	moveq	r3, #1
 80090aa:	2300      	movne	r3, #0
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b22      	cmp	r3, #34	; 0x22
 80090ba:	d108      	bne.n	80090ce <UART_DMAError+0x7a>
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d005      	beq.n	80090ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	2200      	movs	r2, #0
 80090c6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80090c8:	68b8      	ldr	r0, [r7, #8]
 80090ca:	f000 f93d 	bl	8009348 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d2:	f043 0210 	orr.w	r2, r3, #16
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090da:	68b8      	ldr	r0, [r7, #8]
 80090dc:	f7ff ff02 	bl	8008ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090e0:	bf00      	nop
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b090      	sub	sp, #64	; 0x40
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	603b      	str	r3, [r7, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090f8:	e050      	b.n	800919c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009100:	d04c      	beq.n	800919c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009104:	2b00      	cmp	r3, #0
 8009106:	d007      	beq.n	8009118 <UART_WaitOnFlagUntilTimeout+0x30>
 8009108:	f7fb f9e0 	bl	80044cc <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009114:	429a      	cmp	r2, r3
 8009116:	d241      	bcs.n	800919c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	330c      	adds	r3, #12
 800911e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	e853 3f00 	ldrex	r3, [r3]
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800912e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	330c      	adds	r3, #12
 8009136:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009138:	637a      	str	r2, [r7, #52]	; 0x34
 800913a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800913e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009140:	e841 2300 	strex	r3, r2, [r1]
 8009144:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009148:	2b00      	cmp	r3, #0
 800914a:	d1e5      	bne.n	8009118 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3314      	adds	r3, #20
 8009152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	613b      	str	r3, [r7, #16]
   return(result);
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f023 0301 	bic.w	r3, r3, #1
 8009162:	63bb      	str	r3, [r7, #56]	; 0x38
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	3314      	adds	r3, #20
 800916a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800916c:	623a      	str	r2, [r7, #32]
 800916e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	69f9      	ldr	r1, [r7, #28]
 8009172:	6a3a      	ldr	r2, [r7, #32]
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	61bb      	str	r3, [r7, #24]
   return(result);
 800917a:	69bb      	ldr	r3, [r7, #24]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e5      	bne.n	800914c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2220      	movs	r2, #32
 8009184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2220      	movs	r2, #32
 800918c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e00f      	b.n	80091bc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	4013      	ands	r3, r2
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	bf0c      	ite	eq
 80091ac:	2301      	moveq	r3, #1
 80091ae:	2300      	movne	r3, #0
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	461a      	mov	r2, r3
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d09f      	beq.n	80090fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3740      	adds	r7, #64	; 0x40
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b098      	sub	sp, #96	; 0x60
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	4613      	mov	r3, r2
 80091d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	88fa      	ldrh	r2, [r7, #6]
 80091dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2222      	movs	r2, #34	; 0x22
 80091e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	4a3e      	ldr	r2, [pc, #248]	; (80092ec <UART_Start_Receive_DMA+0x128>)
 80091f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f8:	4a3d      	ldr	r2, [pc, #244]	; (80092f0 <UART_Start_Receive_DMA+0x12c>)
 80091fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009200:	4a3c      	ldr	r2, [pc, #240]	; (80092f4 <UART_Start_Receive_DMA+0x130>)
 8009202:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009208:	2200      	movs	r2, #0
 800920a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800920c:	f107 0308 	add.w	r3, r7, #8
 8009210:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3304      	adds	r3, #4
 800921c:	4619      	mov	r1, r3
 800921e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	88fb      	ldrh	r3, [r7, #6]
 8009224:	f7fb ff0c 	bl	8005040 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009228:	2300      	movs	r3, #0
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	613b      	str	r3, [r7, #16]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	613b      	str	r3, [r7, #16]
 800923c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2200      	movs	r2, #0
 8009242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	330c      	adds	r3, #12
 800924c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009250:	e853 3f00 	ldrex	r3, [r3]
 8009254:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800925c:	65bb      	str	r3, [r7, #88]	; 0x58
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	330c      	adds	r3, #12
 8009264:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009266:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009268:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800926c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e5      	bne.n	8009246 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3314      	adds	r3, #20
 8009280:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	f043 0301 	orr.w	r3, r3, #1
 8009290:	657b      	str	r3, [r7, #84]	; 0x54
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3314      	adds	r3, #20
 8009298:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800929a:	63ba      	str	r2, [r7, #56]	; 0x38
 800929c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e5      	bne.n	800927a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3314      	adds	r3, #20
 80092b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	617b      	str	r3, [r7, #20]
   return(result);
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c4:	653b      	str	r3, [r7, #80]	; 0x50
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3314      	adds	r3, #20
 80092cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092ce:	627a      	str	r2, [r7, #36]	; 0x24
 80092d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d2:	6a39      	ldr	r1, [r7, #32]
 80092d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d6:	e841 2300 	strex	r3, r2, [r1]
 80092da:	61fb      	str	r3, [r7, #28]
   return(result);
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1e5      	bne.n	80092ae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3760      	adds	r7, #96	; 0x60
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	08008ef9 	.word	0x08008ef9
 80092f0:	0800901f 	.word	0x0800901f
 80092f4:	08009055 	.word	0x08009055

080092f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b089      	sub	sp, #36	; 0x24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	330c      	adds	r3, #12
 8009306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009316:	61fb      	str	r3, [r7, #28]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	330c      	adds	r3, #12
 800931e:	69fa      	ldr	r2, [r7, #28]
 8009320:	61ba      	str	r2, [r7, #24]
 8009322:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6979      	ldr	r1, [r7, #20]
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	613b      	str	r3, [r7, #16]
   return(result);
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e5      	bne.n	8009300 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2220      	movs	r2, #32
 8009338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800933c:	bf00      	nop
 800933e:	3724      	adds	r7, #36	; 0x24
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009348:	b480      	push	{r7}
 800934a:	b095      	sub	sp, #84	; 0x54
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	330c      	adds	r3, #12
 8009356:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935a:	e853 3f00 	ldrex	r3, [r3]
 800935e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	330c      	adds	r3, #12
 800936e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009370:	643a      	str	r2, [r7, #64]	; 0x40
 8009372:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009374:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009376:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009378:	e841 2300 	strex	r3, r2, [r1]
 800937c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800937e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e5      	bne.n	8009350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3314      	adds	r3, #20
 800938a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	61fb      	str	r3, [r7, #28]
   return(result);
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	f023 0301 	bic.w	r3, r3, #1
 800939a:	64bb      	str	r3, [r7, #72]	; 0x48
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3314      	adds	r3, #20
 80093a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e5      	bne.n	8009384 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d119      	bne.n	80093f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	330c      	adds	r3, #12
 80093c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	f023 0310 	bic.w	r3, r3, #16
 80093d6:	647b      	str	r3, [r7, #68]	; 0x44
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	330c      	adds	r3, #12
 80093de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093e0:	61ba      	str	r2, [r7, #24]
 80093e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	6979      	ldr	r1, [r7, #20]
 80093e6:	69ba      	ldr	r2, [r7, #24]
 80093e8:	e841 2300 	strex	r3, r2, [r1]
 80093ec:	613b      	str	r3, [r7, #16]
   return(result);
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1e5      	bne.n	80093c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2220      	movs	r2, #32
 80093f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009402:	bf00      	nop
 8009404:	3754      	adds	r7, #84	; 0x54
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009428:	68f8      	ldr	r0, [r7, #12]
 800942a:	f7ff fd5b 	bl	8008ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009436:	b480      	push	{r7}
 8009438:	b085      	sub	sp, #20
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b21      	cmp	r3, #33	; 0x21
 8009448:	d13e      	bne.n	80094c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009452:	d114      	bne.n	800947e <UART_Transmit_IT+0x48>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d110      	bne.n	800947e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	881b      	ldrh	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009470:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	1c9a      	adds	r2, r3, #2
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	621a      	str	r2, [r3, #32]
 800947c:	e008      	b.n	8009490 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	1c59      	adds	r1, r3, #1
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	6211      	str	r1, [r2, #32]
 8009488:	781a      	ldrb	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009494:	b29b      	uxth	r3, r3
 8009496:	3b01      	subs	r3, #1
 8009498:	b29b      	uxth	r3, r3
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	4619      	mov	r1, r3
 800949e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10f      	bne.n	80094c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68da      	ldr	r2, [r3, #12]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	e000      	b.n	80094ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80094c8:	2302      	movs	r3, #2
  }
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr

080094d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68da      	ldr	r2, [r3, #12]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f7ff fcd6 	bl	8008ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3708      	adds	r7, #8
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b08c      	sub	sp, #48	; 0x30
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009514:	b2db      	uxtb	r3, r3
 8009516:	2b22      	cmp	r3, #34	; 0x22
 8009518:	f040 80ab 	bne.w	8009672 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009524:	d117      	bne.n	8009556 <UART_Receive_IT+0x50>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d113      	bne.n	8009556 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800952e:	2300      	movs	r3, #0
 8009530:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009536:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	b29b      	uxth	r3, r3
 8009540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009544:	b29a      	uxth	r2, r3
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954e:	1c9a      	adds	r2, r3, #2
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	629a      	str	r2, [r3, #40]	; 0x28
 8009554:	e026      	b.n	80095a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800955c:	2300      	movs	r3, #0
 800955e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009568:	d007      	beq.n	800957a <UART_Receive_IT+0x74>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10a      	bne.n	8009588 <UART_Receive_IT+0x82>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d106      	bne.n	8009588 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	b2da      	uxtb	r2, r3
 8009582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	e008      	b.n	800959a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009594:	b2da      	uxtb	r2, r3
 8009596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009598:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	3b01      	subs	r3, #1
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	4619      	mov	r1, r3
 80095b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d15a      	bne.n	800966e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0220 	bic.w	r2, r2, #32
 80095c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	695a      	ldr	r2, [r3, #20]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f022 0201 	bic.w	r2, r2, #1
 80095e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2220      	movs	r2, #32
 80095ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d135      	bne.n	8009664 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	330c      	adds	r3, #12
 8009604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	613b      	str	r3, [r7, #16]
   return(result);
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	f023 0310 	bic.w	r3, r3, #16
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	330c      	adds	r3, #12
 800961c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800961e:	623a      	str	r2, [r7, #32]
 8009620:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	69f9      	ldr	r1, [r7, #28]
 8009624:	6a3a      	ldr	r2, [r7, #32]
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	61bb      	str	r3, [r7, #24]
   return(result);
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e5      	bne.n	80095fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 0310 	and.w	r3, r3, #16
 800963c:	2b10      	cmp	r3, #16
 800963e:	d10a      	bne.n	8009656 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009640:	2300      	movs	r3, #0
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60fb      	str	r3, [r7, #12]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7f9 ff65 	bl	800352c <HAL_UARTEx_RxEventCallback>
 8009662:	e002      	b.n	800966a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff fc29 	bl	8008ebc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	e002      	b.n	8009674 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800966e:	2300      	movs	r3, #0
 8009670:	e000      	b.n	8009674 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009672:	2302      	movs	r3, #2
  }
}
 8009674:	4618      	mov	r0, r3
 8009676:	3730      	adds	r7, #48	; 0x30
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800967c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009680:	b09f      	sub	sp, #124	; 0x7c
 8009682:	af00      	add	r7, sp, #0
 8009684:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009692:	68d9      	ldr	r1, [r3, #12]
 8009694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	ea40 0301 	orr.w	r3, r0, r1
 800969c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800969e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096a0:	689a      	ldr	r2, [r3, #8]
 80096a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	431a      	orrs	r2, r3
 80096a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	431a      	orrs	r2, r3
 80096ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80096b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80096c0:	f021 010c 	bic.w	r1, r1, #12
 80096c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096ca:	430b      	orrs	r3, r1
 80096cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80096d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096da:	6999      	ldr	r1, [r3, #24]
 80096dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	ea40 0301 	orr.w	r3, r0, r1
 80096e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	4bc5      	ldr	r3, [pc, #788]	; (8009a00 <UART_SetConfig+0x384>)
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d004      	beq.n	80096fa <UART_SetConfig+0x7e>
 80096f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	4bc3      	ldr	r3, [pc, #780]	; (8009a04 <UART_SetConfig+0x388>)
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d103      	bne.n	8009702 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096fa:	f7fd ffc9 	bl	8007690 <HAL_RCC_GetPCLK2Freq>
 80096fe:	6778      	str	r0, [r7, #116]	; 0x74
 8009700:	e002      	b.n	8009708 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009702:	f7fd ffb1 	bl	8007668 <HAL_RCC_GetPCLK1Freq>
 8009706:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009710:	f040 80b6 	bne.w	8009880 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009716:	461c      	mov	r4, r3
 8009718:	f04f 0500 	mov.w	r5, #0
 800971c:	4622      	mov	r2, r4
 800971e:	462b      	mov	r3, r5
 8009720:	1891      	adds	r1, r2, r2
 8009722:	6439      	str	r1, [r7, #64]	; 0x40
 8009724:	415b      	adcs	r3, r3
 8009726:	647b      	str	r3, [r7, #68]	; 0x44
 8009728:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800972c:	1912      	adds	r2, r2, r4
 800972e:	eb45 0303 	adc.w	r3, r5, r3
 8009732:	f04f 0000 	mov.w	r0, #0
 8009736:	f04f 0100 	mov.w	r1, #0
 800973a:	00d9      	lsls	r1, r3, #3
 800973c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009740:	00d0      	lsls	r0, r2, #3
 8009742:	4602      	mov	r2, r0
 8009744:	460b      	mov	r3, r1
 8009746:	1911      	adds	r1, r2, r4
 8009748:	6639      	str	r1, [r7, #96]	; 0x60
 800974a:	416b      	adcs	r3, r5
 800974c:	667b      	str	r3, [r7, #100]	; 0x64
 800974e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	461a      	mov	r2, r3
 8009754:	f04f 0300 	mov.w	r3, #0
 8009758:	1891      	adds	r1, r2, r2
 800975a:	63b9      	str	r1, [r7, #56]	; 0x38
 800975c:	415b      	adcs	r3, r3
 800975e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009764:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009768:	f7f7 fa12 	bl	8000b90 <__aeabi_uldivmod>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	4ba5      	ldr	r3, [pc, #660]	; (8009a08 <UART_SetConfig+0x38c>)
 8009772:	fba3 2302 	umull	r2, r3, r3, r2
 8009776:	095b      	lsrs	r3, r3, #5
 8009778:	011e      	lsls	r6, r3, #4
 800977a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800977c:	461c      	mov	r4, r3
 800977e:	f04f 0500 	mov.w	r5, #0
 8009782:	4622      	mov	r2, r4
 8009784:	462b      	mov	r3, r5
 8009786:	1891      	adds	r1, r2, r2
 8009788:	6339      	str	r1, [r7, #48]	; 0x30
 800978a:	415b      	adcs	r3, r3
 800978c:	637b      	str	r3, [r7, #52]	; 0x34
 800978e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009792:	1912      	adds	r2, r2, r4
 8009794:	eb45 0303 	adc.w	r3, r5, r3
 8009798:	f04f 0000 	mov.w	r0, #0
 800979c:	f04f 0100 	mov.w	r1, #0
 80097a0:	00d9      	lsls	r1, r3, #3
 80097a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80097a6:	00d0      	lsls	r0, r2, #3
 80097a8:	4602      	mov	r2, r0
 80097aa:	460b      	mov	r3, r1
 80097ac:	1911      	adds	r1, r2, r4
 80097ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80097b0:	416b      	adcs	r3, r5
 80097b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	461a      	mov	r2, r3
 80097ba:	f04f 0300 	mov.w	r3, #0
 80097be:	1891      	adds	r1, r2, r2
 80097c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80097c2:	415b      	adcs	r3, r3
 80097c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80097ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80097ce:	f7f7 f9df 	bl	8000b90 <__aeabi_uldivmod>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4b8c      	ldr	r3, [pc, #560]	; (8009a08 <UART_SetConfig+0x38c>)
 80097d8:	fba3 1302 	umull	r1, r3, r3, r2
 80097dc:	095b      	lsrs	r3, r3, #5
 80097de:	2164      	movs	r1, #100	; 0x64
 80097e0:	fb01 f303 	mul.w	r3, r1, r3
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	00db      	lsls	r3, r3, #3
 80097e8:	3332      	adds	r3, #50	; 0x32
 80097ea:	4a87      	ldr	r2, [pc, #540]	; (8009a08 <UART_SetConfig+0x38c>)
 80097ec:	fba2 2303 	umull	r2, r3, r2, r3
 80097f0:	095b      	lsrs	r3, r3, #5
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097f8:	441e      	add	r6, r3
 80097fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097fc:	4618      	mov	r0, r3
 80097fe:	f04f 0100 	mov.w	r1, #0
 8009802:	4602      	mov	r2, r0
 8009804:	460b      	mov	r3, r1
 8009806:	1894      	adds	r4, r2, r2
 8009808:	623c      	str	r4, [r7, #32]
 800980a:	415b      	adcs	r3, r3
 800980c:	627b      	str	r3, [r7, #36]	; 0x24
 800980e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009812:	1812      	adds	r2, r2, r0
 8009814:	eb41 0303 	adc.w	r3, r1, r3
 8009818:	f04f 0400 	mov.w	r4, #0
 800981c:	f04f 0500 	mov.w	r5, #0
 8009820:	00dd      	lsls	r5, r3, #3
 8009822:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009826:	00d4      	lsls	r4, r2, #3
 8009828:	4622      	mov	r2, r4
 800982a:	462b      	mov	r3, r5
 800982c:	1814      	adds	r4, r2, r0
 800982e:	653c      	str	r4, [r7, #80]	; 0x50
 8009830:	414b      	adcs	r3, r1
 8009832:	657b      	str	r3, [r7, #84]	; 0x54
 8009834:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	461a      	mov	r2, r3
 800983a:	f04f 0300 	mov.w	r3, #0
 800983e:	1891      	adds	r1, r2, r2
 8009840:	61b9      	str	r1, [r7, #24]
 8009842:	415b      	adcs	r3, r3
 8009844:	61fb      	str	r3, [r7, #28]
 8009846:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800984a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800984e:	f7f7 f99f 	bl	8000b90 <__aeabi_uldivmod>
 8009852:	4602      	mov	r2, r0
 8009854:	460b      	mov	r3, r1
 8009856:	4b6c      	ldr	r3, [pc, #432]	; (8009a08 <UART_SetConfig+0x38c>)
 8009858:	fba3 1302 	umull	r1, r3, r3, r2
 800985c:	095b      	lsrs	r3, r3, #5
 800985e:	2164      	movs	r1, #100	; 0x64
 8009860:	fb01 f303 	mul.w	r3, r1, r3
 8009864:	1ad3      	subs	r3, r2, r3
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	3332      	adds	r3, #50	; 0x32
 800986a:	4a67      	ldr	r2, [pc, #412]	; (8009a08 <UART_SetConfig+0x38c>)
 800986c:	fba2 2303 	umull	r2, r3, r2, r3
 8009870:	095b      	lsrs	r3, r3, #5
 8009872:	f003 0207 	and.w	r2, r3, #7
 8009876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4432      	add	r2, r6
 800987c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800987e:	e0b9      	b.n	80099f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009882:	461c      	mov	r4, r3
 8009884:	f04f 0500 	mov.w	r5, #0
 8009888:	4622      	mov	r2, r4
 800988a:	462b      	mov	r3, r5
 800988c:	1891      	adds	r1, r2, r2
 800988e:	6139      	str	r1, [r7, #16]
 8009890:	415b      	adcs	r3, r3
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009898:	1912      	adds	r2, r2, r4
 800989a:	eb45 0303 	adc.w	r3, r5, r3
 800989e:	f04f 0000 	mov.w	r0, #0
 80098a2:	f04f 0100 	mov.w	r1, #0
 80098a6:	00d9      	lsls	r1, r3, #3
 80098a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80098ac:	00d0      	lsls	r0, r2, #3
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	eb12 0804 	adds.w	r8, r2, r4
 80098b6:	eb43 0905 	adc.w	r9, r3, r5
 80098ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	4618      	mov	r0, r3
 80098c0:	f04f 0100 	mov.w	r1, #0
 80098c4:	f04f 0200 	mov.w	r2, #0
 80098c8:	f04f 0300 	mov.w	r3, #0
 80098cc:	008b      	lsls	r3, r1, #2
 80098ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80098d2:	0082      	lsls	r2, r0, #2
 80098d4:	4640      	mov	r0, r8
 80098d6:	4649      	mov	r1, r9
 80098d8:	f7f7 f95a 	bl	8000b90 <__aeabi_uldivmod>
 80098dc:	4602      	mov	r2, r0
 80098de:	460b      	mov	r3, r1
 80098e0:	4b49      	ldr	r3, [pc, #292]	; (8009a08 <UART_SetConfig+0x38c>)
 80098e2:	fba3 2302 	umull	r2, r3, r3, r2
 80098e6:	095b      	lsrs	r3, r3, #5
 80098e8:	011e      	lsls	r6, r3, #4
 80098ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098ec:	4618      	mov	r0, r3
 80098ee:	f04f 0100 	mov.w	r1, #0
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	1894      	adds	r4, r2, r2
 80098f8:	60bc      	str	r4, [r7, #8]
 80098fa:	415b      	adcs	r3, r3
 80098fc:	60fb      	str	r3, [r7, #12]
 80098fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009902:	1812      	adds	r2, r2, r0
 8009904:	eb41 0303 	adc.w	r3, r1, r3
 8009908:	f04f 0400 	mov.w	r4, #0
 800990c:	f04f 0500 	mov.w	r5, #0
 8009910:	00dd      	lsls	r5, r3, #3
 8009912:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009916:	00d4      	lsls	r4, r2, #3
 8009918:	4622      	mov	r2, r4
 800991a:	462b      	mov	r3, r5
 800991c:	1814      	adds	r4, r2, r0
 800991e:	64bc      	str	r4, [r7, #72]	; 0x48
 8009920:	414b      	adcs	r3, r1
 8009922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	4618      	mov	r0, r3
 800992a:	f04f 0100 	mov.w	r1, #0
 800992e:	f04f 0200 	mov.w	r2, #0
 8009932:	f04f 0300 	mov.w	r3, #0
 8009936:	008b      	lsls	r3, r1, #2
 8009938:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800993c:	0082      	lsls	r2, r0, #2
 800993e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009942:	f7f7 f925 	bl	8000b90 <__aeabi_uldivmod>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4b2f      	ldr	r3, [pc, #188]	; (8009a08 <UART_SetConfig+0x38c>)
 800994c:	fba3 1302 	umull	r1, r3, r3, r2
 8009950:	095b      	lsrs	r3, r3, #5
 8009952:	2164      	movs	r1, #100	; 0x64
 8009954:	fb01 f303 	mul.w	r3, r1, r3
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	011b      	lsls	r3, r3, #4
 800995c:	3332      	adds	r3, #50	; 0x32
 800995e:	4a2a      	ldr	r2, [pc, #168]	; (8009a08 <UART_SetConfig+0x38c>)
 8009960:	fba2 2303 	umull	r2, r3, r2, r3
 8009964:	095b      	lsrs	r3, r3, #5
 8009966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800996a:	441e      	add	r6, r3
 800996c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800996e:	4618      	mov	r0, r3
 8009970:	f04f 0100 	mov.w	r1, #0
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	1894      	adds	r4, r2, r2
 800997a:	603c      	str	r4, [r7, #0]
 800997c:	415b      	adcs	r3, r3
 800997e:	607b      	str	r3, [r7, #4]
 8009980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009984:	1812      	adds	r2, r2, r0
 8009986:	eb41 0303 	adc.w	r3, r1, r3
 800998a:	f04f 0400 	mov.w	r4, #0
 800998e:	f04f 0500 	mov.w	r5, #0
 8009992:	00dd      	lsls	r5, r3, #3
 8009994:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009998:	00d4      	lsls	r4, r2, #3
 800999a:	4622      	mov	r2, r4
 800999c:	462b      	mov	r3, r5
 800999e:	eb12 0a00 	adds.w	sl, r2, r0
 80099a2:	eb43 0b01 	adc.w	fp, r3, r1
 80099a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f04f 0100 	mov.w	r1, #0
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	f04f 0300 	mov.w	r3, #0
 80099b8:	008b      	lsls	r3, r1, #2
 80099ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80099be:	0082      	lsls	r2, r0, #2
 80099c0:	4650      	mov	r0, sl
 80099c2:	4659      	mov	r1, fp
 80099c4:	f7f7 f8e4 	bl	8000b90 <__aeabi_uldivmod>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4b0e      	ldr	r3, [pc, #56]	; (8009a08 <UART_SetConfig+0x38c>)
 80099ce:	fba3 1302 	umull	r1, r3, r3, r2
 80099d2:	095b      	lsrs	r3, r3, #5
 80099d4:	2164      	movs	r1, #100	; 0x64
 80099d6:	fb01 f303 	mul.w	r3, r1, r3
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	011b      	lsls	r3, r3, #4
 80099de:	3332      	adds	r3, #50	; 0x32
 80099e0:	4a09      	ldr	r2, [pc, #36]	; (8009a08 <UART_SetConfig+0x38c>)
 80099e2:	fba2 2303 	umull	r2, r3, r2, r3
 80099e6:	095b      	lsrs	r3, r3, #5
 80099e8:	f003 020f 	and.w	r2, r3, #15
 80099ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4432      	add	r2, r6
 80099f2:	609a      	str	r2, [r3, #8]
}
 80099f4:	bf00      	nop
 80099f6:	377c      	adds	r7, #124	; 0x7c
 80099f8:	46bd      	mov	sp, r7
 80099fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fe:	bf00      	nop
 8009a00:	40011000 	.word	0x40011000
 8009a04:	40011400 	.word	0x40011400
 8009a08:	51eb851f 	.word	0x51eb851f

08009a0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b084      	sub	sp, #16
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
 8009a16:	f107 001c 	add.w	r0, r7, #28
 8009a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d122      	bne.n	8009a6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d105      	bne.n	8009a5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 fb1c 	bl	800b09c <USB_CoreReset>
 8009a64:	4603      	mov	r3, r0
 8009a66:	73fb      	strb	r3, [r7, #15]
 8009a68:	e01a      	b.n	8009aa0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f001 fb10 	bl	800b09c <USB_CoreReset>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009a80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d106      	bne.n	8009a94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	639a      	str	r2, [r3, #56]	; 0x38
 8009a92:	e005      	b.n	8009aa0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d10b      	bne.n	8009abe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f043 0206 	orr.w	r2, r3, #6
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	f043 0220 	orr.w	r2, r3, #32
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009aca:	b004      	add	sp, #16
 8009acc:	4770      	bx	lr
	...

08009ad0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b087      	sub	sp, #28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	4613      	mov	r3, r2
 8009adc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009ade:	79fb      	ldrb	r3, [r7, #7]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d165      	bne.n	8009bb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	4a41      	ldr	r2, [pc, #260]	; (8009bec <USB_SetTurnaroundTime+0x11c>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d906      	bls.n	8009afa <USB_SetTurnaroundTime+0x2a>
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4a40      	ldr	r2, [pc, #256]	; (8009bf0 <USB_SetTurnaroundTime+0x120>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d202      	bcs.n	8009afa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009af4:	230f      	movs	r3, #15
 8009af6:	617b      	str	r3, [r7, #20]
 8009af8:	e062      	b.n	8009bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	4a3c      	ldr	r2, [pc, #240]	; (8009bf0 <USB_SetTurnaroundTime+0x120>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d306      	bcc.n	8009b10 <USB_SetTurnaroundTime+0x40>
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	4a3b      	ldr	r2, [pc, #236]	; (8009bf4 <USB_SetTurnaroundTime+0x124>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d202      	bcs.n	8009b10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009b0a:	230e      	movs	r3, #14
 8009b0c:	617b      	str	r3, [r7, #20]
 8009b0e:	e057      	b.n	8009bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4a38      	ldr	r2, [pc, #224]	; (8009bf4 <USB_SetTurnaroundTime+0x124>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d306      	bcc.n	8009b26 <USB_SetTurnaroundTime+0x56>
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	4a37      	ldr	r2, [pc, #220]	; (8009bf8 <USB_SetTurnaroundTime+0x128>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d202      	bcs.n	8009b26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009b20:	230d      	movs	r3, #13
 8009b22:	617b      	str	r3, [r7, #20]
 8009b24:	e04c      	b.n	8009bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	4a33      	ldr	r2, [pc, #204]	; (8009bf8 <USB_SetTurnaroundTime+0x128>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d306      	bcc.n	8009b3c <USB_SetTurnaroundTime+0x6c>
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	4a32      	ldr	r2, [pc, #200]	; (8009bfc <USB_SetTurnaroundTime+0x12c>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d802      	bhi.n	8009b3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009b36:	230c      	movs	r3, #12
 8009b38:	617b      	str	r3, [r7, #20]
 8009b3a:	e041      	b.n	8009bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	4a2f      	ldr	r2, [pc, #188]	; (8009bfc <USB_SetTurnaroundTime+0x12c>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d906      	bls.n	8009b52 <USB_SetTurnaroundTime+0x82>
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	4a2e      	ldr	r2, [pc, #184]	; (8009c00 <USB_SetTurnaroundTime+0x130>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d802      	bhi.n	8009b52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009b4c:	230b      	movs	r3, #11
 8009b4e:	617b      	str	r3, [r7, #20]
 8009b50:	e036      	b.n	8009bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	4a2a      	ldr	r2, [pc, #168]	; (8009c00 <USB_SetTurnaroundTime+0x130>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d906      	bls.n	8009b68 <USB_SetTurnaroundTime+0x98>
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	4a29      	ldr	r2, [pc, #164]	; (8009c04 <USB_SetTurnaroundTime+0x134>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d802      	bhi.n	8009b68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009b62:	230a      	movs	r3, #10
 8009b64:	617b      	str	r3, [r7, #20]
 8009b66:	e02b      	b.n	8009bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	4a26      	ldr	r2, [pc, #152]	; (8009c04 <USB_SetTurnaroundTime+0x134>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d906      	bls.n	8009b7e <USB_SetTurnaroundTime+0xae>
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	4a25      	ldr	r2, [pc, #148]	; (8009c08 <USB_SetTurnaroundTime+0x138>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d202      	bcs.n	8009b7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009b78:	2309      	movs	r3, #9
 8009b7a:	617b      	str	r3, [r7, #20]
 8009b7c:	e020      	b.n	8009bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	4a21      	ldr	r2, [pc, #132]	; (8009c08 <USB_SetTurnaroundTime+0x138>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d306      	bcc.n	8009b94 <USB_SetTurnaroundTime+0xc4>
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	4a20      	ldr	r2, [pc, #128]	; (8009c0c <USB_SetTurnaroundTime+0x13c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d802      	bhi.n	8009b94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009b8e:	2308      	movs	r3, #8
 8009b90:	617b      	str	r3, [r7, #20]
 8009b92:	e015      	b.n	8009bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	4a1d      	ldr	r2, [pc, #116]	; (8009c0c <USB_SetTurnaroundTime+0x13c>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d906      	bls.n	8009baa <USB_SetTurnaroundTime+0xda>
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	4a1c      	ldr	r2, [pc, #112]	; (8009c10 <USB_SetTurnaroundTime+0x140>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d202      	bcs.n	8009baa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009ba4:	2307      	movs	r3, #7
 8009ba6:	617b      	str	r3, [r7, #20]
 8009ba8:	e00a      	b.n	8009bc0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009baa:	2306      	movs	r3, #6
 8009bac:	617b      	str	r3, [r7, #20]
 8009bae:	e007      	b.n	8009bc0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009bb0:	79fb      	ldrb	r3, [r7, #7]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d102      	bne.n	8009bbc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009bb6:	2309      	movs	r3, #9
 8009bb8:	617b      	str	r3, [r7, #20]
 8009bba:	e001      	b.n	8009bc0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009bbc:	2309      	movs	r3, #9
 8009bbe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	68da      	ldr	r2, [r3, #12]
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	029b      	lsls	r3, r3, #10
 8009bd4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	371c      	adds	r7, #28
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	00d8acbf 	.word	0x00d8acbf
 8009bf0:	00e4e1c0 	.word	0x00e4e1c0
 8009bf4:	00f42400 	.word	0x00f42400
 8009bf8:	01067380 	.word	0x01067380
 8009bfc:	011a499f 	.word	0x011a499f
 8009c00:	01312cff 	.word	0x01312cff
 8009c04:	014ca43f 	.word	0x014ca43f
 8009c08:	016e3600 	.word	0x016e3600
 8009c0c:	01a6ab1f 	.word	0x01a6ab1f
 8009c10:	01e84800 	.word	0x01e84800

08009c14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	f043 0201 	orr.w	r2, r3, #1
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c28:	2300      	movs	r3, #0
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b083      	sub	sp, #12
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f023 0201 	bic.w	r2, r3, #1
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c4a:	2300      	movs	r3, #0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c64:	2300      	movs	r3, #0
 8009c66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009c74:	78fb      	ldrb	r3, [r7, #3]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d115      	bne.n	8009ca6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c86:	2001      	movs	r0, #1
 8009c88:	f7fa fc2c 	bl	80044e4 <HAL_Delay>
      ms++;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f001 f972 	bl	800af7c <USB_GetMode>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d01e      	beq.n	8009cdc <USB_SetCurrentMode+0x84>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b31      	cmp	r3, #49	; 0x31
 8009ca2:	d9f0      	bls.n	8009c86 <USB_SetCurrentMode+0x2e>
 8009ca4:	e01a      	b.n	8009cdc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ca6:	78fb      	ldrb	r3, [r7, #3]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d115      	bne.n	8009cd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009cb8:	2001      	movs	r0, #1
 8009cba:	f7fa fc13 	bl	80044e4 <HAL_Delay>
      ms++;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f001 f959 	bl	800af7c <USB_GetMode>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d005      	beq.n	8009cdc <USB_SetCurrentMode+0x84>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2b31      	cmp	r3, #49	; 0x31
 8009cd4:	d9f0      	bls.n	8009cb8 <USB_SetCurrentMode+0x60>
 8009cd6:	e001      	b.n	8009cdc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e005      	b.n	8009ce8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2b32      	cmp	r3, #50	; 0x32
 8009ce0:	d101      	bne.n	8009ce6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e000      	b.n	8009ce8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b086      	sub	sp, #24
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d02:	2300      	movs	r3, #0
 8009d04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	613b      	str	r3, [r7, #16]
 8009d0e:	e009      	b.n	8009d24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	3340      	adds	r3, #64	; 0x40
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	3301      	adds	r3, #1
 8009d22:	613b      	str	r3, [r7, #16]
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	2b0e      	cmp	r3, #14
 8009d28:	d9f2      	bls.n	8009d10 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d11c      	bne.n	8009d6a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d3e:	f043 0302 	orr.w	r3, r3, #2
 8009d42:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d48:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d54:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d60:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	639a      	str	r2, [r3, #56]	; 0x38
 8009d68:	e00b      	b.n	8009d82 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d88:	461a      	mov	r2, r3
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d94:	4619      	mov	r1, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	680b      	ldr	r3, [r1, #0]
 8009da0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d10c      	bne.n	8009dc2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d104      	bne.n	8009db8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009dae:	2100      	movs	r1, #0
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f945 	bl	800a040 <USB_SetDevSpeed>
 8009db6:	e008      	b.n	8009dca <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009db8:	2101      	movs	r1, #1
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f940 	bl	800a040 <USB_SetDevSpeed>
 8009dc0:	e003      	b.n	8009dca <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009dc2:	2103      	movs	r1, #3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f93b 	bl	800a040 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009dca:	2110      	movs	r1, #16
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f8f3 	bl	8009fb8 <USB_FlushTxFifo>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d001      	beq.n	8009ddc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f000 f90f 	bl	800a000 <USB_FlushRxFifo>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009de8:	2301      	movs	r3, #1
 8009dea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009df2:	461a      	mov	r2, r3
 8009df4:	2300      	movs	r3, #0
 8009df6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dfe:	461a      	mov	r2, r3
 8009e00:	2300      	movs	r3, #0
 8009e02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e10:	2300      	movs	r3, #0
 8009e12:	613b      	str	r3, [r7, #16]
 8009e14:	e043      	b.n	8009e9e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e2c:	d118      	bne.n	8009e60 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10a      	bne.n	8009e4a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	015a      	lsls	r2, r3, #5
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e40:	461a      	mov	r2, r3
 8009e42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e46:	6013      	str	r3, [r2, #0]
 8009e48:	e013      	b.n	8009e72 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	015a      	lsls	r2, r3, #5
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e56:	461a      	mov	r2, r3
 8009e58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	e008      	b.n	8009e72 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	2300      	movs	r3, #0
 8009e70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e7e:	461a      	mov	r2, r3
 8009e80:	2300      	movs	r3, #0
 8009e82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	015a      	lsls	r2, r3, #5
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e90:	461a      	mov	r2, r3
 8009e92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	613b      	str	r3, [r7, #16]
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	693a      	ldr	r2, [r7, #16]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d3b7      	bcc.n	8009e16 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	613b      	str	r3, [r7, #16]
 8009eaa:	e043      	b.n	8009f34 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	015a      	lsls	r2, r3, #5
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ec2:	d118      	bne.n	8009ef6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10a      	bne.n	8009ee0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	015a      	lsls	r2, r3, #5
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009edc:	6013      	str	r3, [r2, #0]
 8009ede:	e013      	b.n	8009f08 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eec:	461a      	mov	r2, r3
 8009eee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ef2:	6013      	str	r3, [r2, #0]
 8009ef4:	e008      	b.n	8009f08 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f02:	461a      	mov	r2, r3
 8009f04:	2300      	movs	r3, #0
 8009f06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	015a      	lsls	r2, r3, #5
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	4413      	add	r3, r2
 8009f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f14:	461a      	mov	r2, r3
 8009f16:	2300      	movs	r3, #0
 8009f18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	015a      	lsls	r2, r3, #5
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4413      	add	r3, r2
 8009f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f26:	461a      	mov	r2, r3
 8009f28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	3301      	adds	r3, #1
 8009f32:	613b      	str	r3, [r7, #16]
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d3b7      	bcc.n	8009eac <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009f5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d105      	bne.n	8009f70 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	f043 0210 	orr.w	r2, r3, #16
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	699a      	ldr	r2, [r3, #24]
 8009f74:	4b0f      	ldr	r3, [pc, #60]	; (8009fb4 <USB_DevInit+0x2c4>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d005      	beq.n	8009f8e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	699b      	ldr	r3, [r3, #24]
 8009f86:	f043 0208 	orr.w	r2, r3, #8
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d107      	bne.n	8009fa4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f9c:	f043 0304 	orr.w	r3, r3, #4
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fb0:	b004      	add	sp, #16
 8009fb2:	4770      	bx	lr
 8009fb4:	803c3800 	.word	0x803c3800

08009fb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	019b      	lsls	r3, r3, #6
 8009fca:	f043 0220 	orr.w	r2, r3, #32
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	60fb      	str	r3, [r7, #12]
 8009fd8:	4a08      	ldr	r2, [pc, #32]	; (8009ffc <USB_FlushTxFifo+0x44>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d901      	bls.n	8009fe2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e006      	b.n	8009ff0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	f003 0320 	and.w	r3, r3, #32
 8009fea:	2b20      	cmp	r3, #32
 8009fec:	d0f1      	beq.n	8009fd2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	00030d40 	.word	0x00030d40

0800a000 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2210      	movs	r2, #16
 800a010:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	3301      	adds	r3, #1
 800a016:	60fb      	str	r3, [r7, #12]
 800a018:	4a08      	ldr	r2, [pc, #32]	; (800a03c <USB_FlushRxFifo+0x3c>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d901      	bls.n	800a022 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800a01e:	2303      	movs	r3, #3
 800a020:	e006      	b.n	800a030 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	f003 0310 	and.w	r3, r3, #16
 800a02a:	2b10      	cmp	r3, #16
 800a02c:	d0f1      	beq.n	800a012 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	00030d40 	.word	0x00030d40

0800a040 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	460b      	mov	r3, r1
 800a04a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	78fb      	ldrb	r3, [r7, #3]
 800a05a:	68f9      	ldr	r1, [r7, #12]
 800a05c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a060:	4313      	orrs	r3, r2
 800a062:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a072:	b480      	push	{r7}
 800a074:	b087      	sub	sp, #28
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	f003 0306 	and.w	r3, r3, #6
 800a08a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d102      	bne.n	800a098 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a092:	2300      	movs	r3, #0
 800a094:	75fb      	strb	r3, [r7, #23]
 800a096:	e00a      	b.n	800a0ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d002      	beq.n	800a0a4 <USB_GetDevSpeed+0x32>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b06      	cmp	r3, #6
 800a0a2:	d102      	bne.n	800a0aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	75fb      	strb	r3, [r7, #23]
 800a0a8:	e001      	b.n	800a0ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a0aa:	230f      	movs	r3, #15
 800a0ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	371c      	adds	r7, #28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	785b      	ldrb	r3, [r3, #1]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d13a      	bne.n	800a14e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0de:	69da      	ldr	r2, [r3, #28]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	f003 030f 	and.w	r3, r3, #15
 800a0e8:	2101      	movs	r1, #1
 800a0ea:	fa01 f303 	lsl.w	r3, r1, r3
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	68f9      	ldr	r1, [r7, #12]
 800a0f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	015a      	lsls	r2, r3, #5
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	4413      	add	r3, r2
 800a102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d155      	bne.n	800a1bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	4413      	add	r3, r2
 800a118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	78db      	ldrb	r3, [r3, #3]
 800a12a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a12c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	059b      	lsls	r3, r3, #22
 800a132:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a134:	4313      	orrs	r3, r2
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	0151      	lsls	r1, r2, #5
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	440a      	add	r2, r1
 800a13e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a14a:	6013      	str	r3, [r2, #0]
 800a14c:	e036      	b.n	800a1bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a154:	69da      	ldr	r2, [r3, #28]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	f003 030f 	and.w	r3, r3, #15
 800a15e:	2101      	movs	r1, #1
 800a160:	fa01 f303 	lsl.w	r3, r1, r3
 800a164:	041b      	lsls	r3, r3, #16
 800a166:	68f9      	ldr	r1, [r7, #12]
 800a168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a16c:	4313      	orrs	r3, r2
 800a16e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	015a      	lsls	r2, r3, #5
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	4413      	add	r3, r2
 800a178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d11a      	bne.n	800a1bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	015a      	lsls	r2, r3, #5
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	4413      	add	r3, r2
 800a18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	78db      	ldrb	r3, [r3, #3]
 800a1a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a1a2:	430b      	orrs	r3, r1
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	0151      	lsls	r1, r2, #5
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	440a      	add	r2, r1
 800a1ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
	...

0800a1cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	781b      	ldrb	r3, [r3, #0]
 800a1de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	785b      	ldrb	r3, [r3, #1]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d161      	bne.n	800a2ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1fe:	d11f      	bne.n	800a240 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	0151      	lsls	r1, r2, #5
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	440a      	add	r2, r1
 800a216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a21a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a21e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	015a      	lsls	r2, r3, #5
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	4413      	add	r3, r2
 800a228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	0151      	lsls	r1, r2, #5
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	440a      	add	r2, r1
 800a236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a23a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a23e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	f003 030f 	and.w	r3, r3, #15
 800a250:	2101      	movs	r1, #1
 800a252:	fa01 f303 	lsl.w	r3, r1, r3
 800a256:	b29b      	uxth	r3, r3
 800a258:	43db      	mvns	r3, r3
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a260:	4013      	ands	r3, r2
 800a262:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a26a:	69da      	ldr	r2, [r3, #28]
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	f003 030f 	and.w	r3, r3, #15
 800a274:	2101      	movs	r1, #1
 800a276:	fa01 f303 	lsl.w	r3, r1, r3
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	43db      	mvns	r3, r3
 800a27e:	68f9      	ldr	r1, [r7, #12]
 800a280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a284:	4013      	ands	r3, r2
 800a286:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	0159      	lsls	r1, r3, #5
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	440b      	add	r3, r1
 800a29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	4b35      	ldr	r3, [pc, #212]	; (800a37c <USB_DeactivateEndpoint+0x1b0>)
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	600b      	str	r3, [r1, #0]
 800a2aa:	e060      	b.n	800a36e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	015a      	lsls	r2, r3, #5
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2c2:	d11f      	bne.n	800a304 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	0151      	lsls	r1, r2, #5
 800a2d6:	68fa      	ldr	r2, [r7, #12]
 800a2d8:	440a      	add	r2, r1
 800a2da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a2e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	015a      	lsls	r2, r3, #5
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	4413      	add	r3, r2
 800a2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	0151      	lsls	r1, r2, #5
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	440a      	add	r2, r1
 800a2fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a302:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a30a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	f003 030f 	and.w	r3, r3, #15
 800a314:	2101      	movs	r1, #1
 800a316:	fa01 f303 	lsl.w	r3, r1, r3
 800a31a:	041b      	lsls	r3, r3, #16
 800a31c:	43db      	mvns	r3, r3
 800a31e:	68f9      	ldr	r1, [r7, #12]
 800a320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a324:	4013      	ands	r3, r2
 800a326:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a32e:	69da      	ldr	r2, [r3, #28]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	f003 030f 	and.w	r3, r3, #15
 800a338:	2101      	movs	r1, #1
 800a33a:	fa01 f303 	lsl.w	r3, r1, r3
 800a33e:	041b      	lsls	r3, r3, #16
 800a340:	43db      	mvns	r3, r3
 800a342:	68f9      	ldr	r1, [r7, #12]
 800a344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a348:	4013      	ands	r3, r2
 800a34a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	015a      	lsls	r2, r3, #5
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	4413      	add	r3, r2
 800a354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	0159      	lsls	r1, r3, #5
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	440b      	add	r3, r1
 800a362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a366:	4619      	mov	r1, r3
 800a368:	4b05      	ldr	r3, [pc, #20]	; (800a380 <USB_DeactivateEndpoint+0x1b4>)
 800a36a:	4013      	ands	r3, r2
 800a36c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	ec337800 	.word	0xec337800
 800a380:	eff37800 	.word	0xeff37800

0800a384 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b08a      	sub	sp, #40	; 0x28
 800a388:	af02      	add	r7, sp, #8
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	4613      	mov	r3, r2
 800a390:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	785b      	ldrb	r3, [r3, #1]
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	f040 815c 	bne.w	800a65e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	695b      	ldr	r3, [r3, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d132      	bne.n	800a414 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	015a      	lsls	r2, r3, #5
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	69ba      	ldr	r2, [r7, #24]
 800a3be:	0151      	lsls	r1, r2, #5
 800a3c0:	69fa      	ldr	r2, [r7, #28]
 800a3c2:	440a      	add	r2, r1
 800a3c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	015a      	lsls	r2, r3, #5
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	4413      	add	r3, r2
 800a3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	69ba      	ldr	r2, [r7, #24]
 800a3e2:	0151      	lsls	r1, r2, #5
 800a3e4:	69fa      	ldr	r2, [r7, #28]
 800a3e6:	440a      	add	r2, r1
 800a3e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a3f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	015a      	lsls	r2, r3, #5
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	69ba      	ldr	r2, [r7, #24]
 800a402:	0151      	lsls	r1, r2, #5
 800a404:	69fa      	ldr	r2, [r7, #28]
 800a406:	440a      	add	r2, r1
 800a408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a40c:	0cdb      	lsrs	r3, r3, #19
 800a40e:	04db      	lsls	r3, r3, #19
 800a410:	6113      	str	r3, [r2, #16]
 800a412:	e074      	b.n	800a4fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	015a      	lsls	r2, r3, #5
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	4413      	add	r3, r2
 800a41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	69ba      	ldr	r2, [r7, #24]
 800a424:	0151      	lsls	r1, r2, #5
 800a426:	69fa      	ldr	r2, [r7, #28]
 800a428:	440a      	add	r2, r1
 800a42a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a42e:	0cdb      	lsrs	r3, r3, #19
 800a430:	04db      	lsls	r3, r3, #19
 800a432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a434:	69bb      	ldr	r3, [r7, #24]
 800a436:	015a      	lsls	r2, r3, #5
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	4413      	add	r3, r2
 800a43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	69ba      	ldr	r2, [r7, #24]
 800a444:	0151      	lsls	r1, r2, #5
 800a446:	69fa      	ldr	r2, [r7, #28]
 800a448:	440a      	add	r2, r1
 800a44a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a44e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a452:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a464:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	6959      	ldr	r1, [r3, #20]
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	440b      	add	r3, r1
 800a470:	1e59      	subs	r1, r3, #1
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	fbb1 f3f3 	udiv	r3, r1, r3
 800a47a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a47c:	4b9d      	ldr	r3, [pc, #628]	; (800a6f4 <USB_EPStartXfer+0x370>)
 800a47e:	400b      	ands	r3, r1
 800a480:	69b9      	ldr	r1, [r7, #24]
 800a482:	0148      	lsls	r0, r1, #5
 800a484:	69f9      	ldr	r1, [r7, #28]
 800a486:	4401      	add	r1, r0
 800a488:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a48c:	4313      	orrs	r3, r2
 800a48e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	4413      	add	r3, r2
 800a498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a49c:	691a      	ldr	r2, [r3, #16]
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4a6:	69b9      	ldr	r1, [r7, #24]
 800a4a8:	0148      	lsls	r0, r1, #5
 800a4aa:	69f9      	ldr	r1, [r7, #28]
 800a4ac:	4401      	add	r1, r0
 800a4ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	78db      	ldrb	r3, [r3, #3]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d11f      	bne.n	800a4fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ca:	691b      	ldr	r3, [r3, #16]
 800a4cc:	69ba      	ldr	r2, [r7, #24]
 800a4ce:	0151      	lsls	r1, r2, #5
 800a4d0:	69fa      	ldr	r2, [r7, #28]
 800a4d2:	440a      	add	r2, r1
 800a4d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a4dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	015a      	lsls	r2, r3, #5
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	69ba      	ldr	r2, [r7, #24]
 800a4ee:	0151      	lsls	r1, r2, #5
 800a4f0:	69fa      	ldr	r2, [r7, #28]
 800a4f2:	440a      	add	r2, r1
 800a4f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a4fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a4fe:	79fb      	ldrb	r3, [r7, #7]
 800a500:	2b01      	cmp	r3, #1
 800a502:	d14b      	bne.n	800a59c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d009      	beq.n	800a520 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	015a      	lsls	r2, r3, #5
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	4413      	add	r3, r2
 800a514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a518:	461a      	mov	r2, r3
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	78db      	ldrb	r3, [r3, #3]
 800a524:	2b01      	cmp	r3, #1
 800a526:	d128      	bne.n	800a57a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a52e:	689b      	ldr	r3, [r3, #8]
 800a530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a534:	2b00      	cmp	r3, #0
 800a536:	d110      	bne.n	800a55a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69ba      	ldr	r2, [r7, #24]
 800a548:	0151      	lsls	r1, r2, #5
 800a54a:	69fa      	ldr	r2, [r7, #28]
 800a54c:	440a      	add	r2, r1
 800a54e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a552:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a556:	6013      	str	r3, [r2, #0]
 800a558:	e00f      	b.n	800a57a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	4413      	add	r3, r2
 800a562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	69ba      	ldr	r2, [r7, #24]
 800a56a:	0151      	lsls	r1, r2, #5
 800a56c:	69fa      	ldr	r2, [r7, #28]
 800a56e:	440a      	add	r2, r1
 800a570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a578:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	015a      	lsls	r2, r3, #5
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	4413      	add	r3, r2
 800a582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	69ba      	ldr	r2, [r7, #24]
 800a58a:	0151      	lsls	r1, r2, #5
 800a58c:	69fa      	ldr	r2, [r7, #28]
 800a58e:	440a      	add	r2, r1
 800a590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a594:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a598:	6013      	str	r3, [r2, #0]
 800a59a:	e12f      	b.n	800a7fc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a59c:	69bb      	ldr	r3, [r7, #24]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	69ba      	ldr	r2, [r7, #24]
 800a5ac:	0151      	lsls	r1, r2, #5
 800a5ae:	69fa      	ldr	r2, [r7, #28]
 800a5b0:	440a      	add	r2, r1
 800a5b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	78db      	ldrb	r3, [r3, #3]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d015      	beq.n	800a5f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 8117 	beq.w	800a7fc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	f003 030f 	and.w	r3, r3, #15
 800a5de:	2101      	movs	r1, #1
 800a5e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5e4:	69f9      	ldr	r1, [r7, #28]
 800a5e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	634b      	str	r3, [r1, #52]	; 0x34
 800a5ee:	e105      	b.n	800a7fc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d110      	bne.n	800a622 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a600:	69bb      	ldr	r3, [r7, #24]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	4413      	add	r3, r2
 800a608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	69ba      	ldr	r2, [r7, #24]
 800a610:	0151      	lsls	r1, r2, #5
 800a612:	69fa      	ldr	r2, [r7, #28]
 800a614:	440a      	add	r2, r1
 800a616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a61a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	e00f      	b.n	800a642 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	015a      	lsls	r2, r3, #5
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	4413      	add	r3, r2
 800a62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	69ba      	ldr	r2, [r7, #24]
 800a632:	0151      	lsls	r1, r2, #5
 800a634:	69fa      	ldr	r2, [r7, #28]
 800a636:	440a      	add	r2, r1
 800a638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a63c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a640:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	68d9      	ldr	r1, [r3, #12]
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	781a      	ldrb	r2, [r3, #0]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	b298      	uxth	r0, r3
 800a650:	79fb      	ldrb	r3, [r7, #7]
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	4603      	mov	r3, r0
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 fa2b 	bl	800aab2 <USB_WritePacket>
 800a65c:	e0ce      	b.n	800a7fc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	015a      	lsls	r2, r3, #5
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	4413      	add	r3, r2
 800a666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	69ba      	ldr	r2, [r7, #24]
 800a66e:	0151      	lsls	r1, r2, #5
 800a670:	69fa      	ldr	r2, [r7, #28]
 800a672:	440a      	add	r2, r1
 800a674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a678:	0cdb      	lsrs	r3, r3, #19
 800a67a:	04db      	lsls	r3, r3, #19
 800a67c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	4413      	add	r3, r2
 800a686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	69ba      	ldr	r2, [r7, #24]
 800a68e:	0151      	lsls	r1, r2, #5
 800a690:	69fa      	ldr	r2, [r7, #28]
 800a692:	440a      	add	r2, r1
 800a694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a698:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a69c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d126      	bne.n	800a6f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	015a      	lsls	r2, r3, #5
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b6:	691a      	ldr	r2, [r3, #16]
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6c0:	69b9      	ldr	r1, [r7, #24]
 800a6c2:	0148      	lsls	r0, r1, #5
 800a6c4:	69f9      	ldr	r1, [r7, #28]
 800a6c6:	4401      	add	r1, r0
 800a6c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	69ba      	ldr	r2, [r7, #24]
 800a6e0:	0151      	lsls	r1, r2, #5
 800a6e2:	69fa      	ldr	r2, [r7, #28]
 800a6e4:	440a      	add	r2, r1
 800a6e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6ee:	6113      	str	r3, [r2, #16]
 800a6f0:	e036      	b.n	800a760 <USB_EPStartXfer+0x3dc>
 800a6f2:	bf00      	nop
 800a6f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	695a      	ldr	r2, [r3, #20]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	4413      	add	r3, r2
 800a702:	1e5a      	subs	r2, r3, #1
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	fbb2 f3f3 	udiv	r3, r2, r3
 800a70c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	4413      	add	r3, r2
 800a716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a71a:	691a      	ldr	r2, [r3, #16]
 800a71c:	8afb      	ldrh	r3, [r7, #22]
 800a71e:	04d9      	lsls	r1, r3, #19
 800a720:	4b39      	ldr	r3, [pc, #228]	; (800a808 <USB_EPStartXfer+0x484>)
 800a722:	400b      	ands	r3, r1
 800a724:	69b9      	ldr	r1, [r7, #24]
 800a726:	0148      	lsls	r0, r1, #5
 800a728:	69f9      	ldr	r1, [r7, #28]
 800a72a:	4401      	add	r1, r0
 800a72c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a730:	4313      	orrs	r3, r2
 800a732:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a740:	691a      	ldr	r2, [r3, #16]
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	8af9      	ldrh	r1, [r7, #22]
 800a748:	fb01 f303 	mul.w	r3, r1, r3
 800a74c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a750:	69b9      	ldr	r1, [r7, #24]
 800a752:	0148      	lsls	r0, r1, #5
 800a754:	69f9      	ldr	r1, [r7, #28]
 800a756:	4401      	add	r1, r0
 800a758:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a75c:	4313      	orrs	r3, r2
 800a75e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a760:	79fb      	ldrb	r3, [r7, #7]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d10d      	bne.n	800a782 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d009      	beq.n	800a782 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	68d9      	ldr	r1, [r3, #12]
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	015a      	lsls	r2, r3, #5
 800a776:	69fb      	ldr	r3, [r7, #28]
 800a778:	4413      	add	r3, r2
 800a77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77e:	460a      	mov	r2, r1
 800a780:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	78db      	ldrb	r3, [r3, #3]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d128      	bne.n	800a7dc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a796:	2b00      	cmp	r3, #0
 800a798:	d110      	bne.n	800a7bc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	69ba      	ldr	r2, [r7, #24]
 800a7aa:	0151      	lsls	r1, r2, #5
 800a7ac:	69fa      	ldr	r2, [r7, #28]
 800a7ae:	440a      	add	r2, r1
 800a7b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a7b8:	6013      	str	r3, [r2, #0]
 800a7ba:	e00f      	b.n	800a7dc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	015a      	lsls	r2, r3, #5
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	0151      	lsls	r1, r2, #5
 800a7ce:	69fa      	ldr	r2, [r7, #28]
 800a7d0:	440a      	add	r2, r1
 800a7d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	69fb      	ldr	r3, [r7, #28]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	69ba      	ldr	r2, [r7, #24]
 800a7ec:	0151      	lsls	r1, r2, #5
 800a7ee:	69fa      	ldr	r2, [r7, #28]
 800a7f0:	440a      	add	r2, r1
 800a7f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a7fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3720      	adds	r7, #32
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	1ff80000 	.word	0x1ff80000

0800a80c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b087      	sub	sp, #28
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	4613      	mov	r3, r2
 800a818:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	785b      	ldrb	r3, [r3, #1]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	f040 80cd 	bne.w	800a9c8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d132      	bne.n	800a89c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	0151      	lsls	r1, r2, #5
 800a848:	697a      	ldr	r2, [r7, #20]
 800a84a:	440a      	add	r2, r1
 800a84c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a850:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a854:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	015a      	lsls	r2, r3, #5
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	4413      	add	r3, r2
 800a862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	0151      	lsls	r1, r2, #5
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	440a      	add	r2, r1
 800a870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a874:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	4413      	add	r3, r2
 800a882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	0151      	lsls	r1, r2, #5
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	440a      	add	r2, r1
 800a890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a894:	0cdb      	lsrs	r3, r3, #19
 800a896:	04db      	lsls	r3, r3, #19
 800a898:	6113      	str	r3, [r2, #16]
 800a89a:	e04e      	b.n	800a93a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	0151      	lsls	r1, r2, #5
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	440a      	add	r2, r1
 800a8b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b6:	0cdb      	lsrs	r3, r3, #19
 800a8b8:	04db      	lsls	r3, r3, #19
 800a8ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	0151      	lsls	r1, r2, #5
 800a8ce:	697a      	ldr	r2, [r7, #20]
 800a8d0:	440a      	add	r2, r1
 800a8d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a8da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a8de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	695a      	ldr	r2, [r3, #20]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d903      	bls.n	800a8f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	689a      	ldr	r2, [r3, #8]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	015a      	lsls	r2, r3, #5
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	693a      	ldr	r2, [r7, #16]
 800a904:	0151      	lsls	r1, r2, #5
 800a906:	697a      	ldr	r2, [r7, #20]
 800a908:	440a      	add	r2, r1
 800a90a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a90e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a912:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	015a      	lsls	r2, r3, #5
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	4413      	add	r3, r2
 800a91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a920:	691a      	ldr	r2, [r3, #16]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a92a:	6939      	ldr	r1, [r7, #16]
 800a92c:	0148      	lsls	r0, r1, #5
 800a92e:	6979      	ldr	r1, [r7, #20]
 800a930:	4401      	add	r1, r0
 800a932:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a936:	4313      	orrs	r3, r2
 800a938:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a93a:	79fb      	ldrb	r3, [r7, #7]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d11e      	bne.n	800a97e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d009      	beq.n	800a95c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a954:	461a      	mov	r2, r3
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	4413      	add	r3, r2
 800a964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	0151      	lsls	r1, r2, #5
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	440a      	add	r2, r1
 800a972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a976:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	e092      	b.n	800aaa4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	015a      	lsls	r2, r3, #5
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	4413      	add	r3, r2
 800a986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	0151      	lsls	r1, r2, #5
 800a990:	697a      	ldr	r2, [r7, #20]
 800a992:	440a      	add	r2, r1
 800a994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a998:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a99c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d07e      	beq.n	800aaa4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	f003 030f 	and.w	r3, r3, #15
 800a9b6:	2101      	movs	r1, #1
 800a9b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9bc:	6979      	ldr	r1, [r7, #20]
 800a9be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9c2:	4313      	orrs	r3, r2
 800a9c4:	634b      	str	r3, [r1, #52]	; 0x34
 800a9c6:	e06d      	b.n	800aaa4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	015a      	lsls	r2, r3, #5
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	0151      	lsls	r1, r2, #5
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	440a      	add	r2, r1
 800a9de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9e2:	0cdb      	lsrs	r3, r3, #19
 800a9e4:	04db      	lsls	r3, r3, #19
 800a9e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	015a      	lsls	r2, r3, #5
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	0151      	lsls	r1, r2, #5
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	440a      	add	r2, r1
 800a9fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa0a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d003      	beq.n	800aa1c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	689a      	ldr	r2, [r3, #8]
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	015a      	lsls	r2, r3, #5
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	4413      	add	r3, r2
 800aa24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	0151      	lsls	r1, r2, #5
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	440a      	add	r2, r1
 800aa32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa48:	691a      	ldr	r2, [r3, #16]
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa52:	6939      	ldr	r1, [r7, #16]
 800aa54:	0148      	lsls	r0, r1, #5
 800aa56:	6979      	ldr	r1, [r7, #20]
 800aa58:	4401      	add	r1, r0
 800aa5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800aa62:	79fb      	ldrb	r3, [r7, #7]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d10d      	bne.n	800aa84 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	68db      	ldr	r3, [r3, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d009      	beq.n	800aa84 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	68d9      	ldr	r1, [r3, #12]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa80:	460a      	mov	r2, r1
 800aa82:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	0151      	lsls	r1, r2, #5
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	440a      	add	r2, r1
 800aa9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aaa2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	371c      	adds	r7, #28
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab0:	4770      	bx	lr

0800aab2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aab2:	b480      	push	{r7}
 800aab4:	b089      	sub	sp, #36	; 0x24
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	60f8      	str	r0, [r7, #12]
 800aaba:	60b9      	str	r1, [r7, #8]
 800aabc:	4611      	mov	r1, r2
 800aabe:	461a      	mov	r2, r3
 800aac0:	460b      	mov	r3, r1
 800aac2:	71fb      	strb	r3, [r7, #7]
 800aac4:	4613      	mov	r3, r2
 800aac6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aad0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d123      	bne.n	800ab20 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aad8:	88bb      	ldrh	r3, [r7, #4]
 800aada:	3303      	adds	r3, #3
 800aadc:	089b      	lsrs	r3, r3, #2
 800aade:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aae0:	2300      	movs	r3, #0
 800aae2:	61bb      	str	r3, [r7, #24]
 800aae4:	e018      	b.n	800ab18 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aae6:	79fb      	ldrb	r3, [r7, #7]
 800aae8:	031a      	lsls	r2, r3, #12
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	4413      	add	r3, r2
 800aaee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	3301      	adds	r3, #1
 800aafe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	3301      	adds	r3, #1
 800ab04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	3301      	adds	r3, #1
 800ab16:	61bb      	str	r3, [r7, #24]
 800ab18:	69ba      	ldr	r2, [r7, #24]
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d3e2      	bcc.n	800aae6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3724      	adds	r7, #36	; 0x24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr

0800ab2e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ab2e:	b480      	push	{r7}
 800ab30:	b08b      	sub	sp, #44	; 0x2c
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	60f8      	str	r0, [r7, #12]
 800ab36:	60b9      	str	r1, [r7, #8]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ab44:	88fb      	ldrh	r3, [r7, #6]
 800ab46:	089b      	lsrs	r3, r3, #2
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ab4c:	88fb      	ldrh	r3, [r7, #6]
 800ab4e:	f003 0303 	and.w	r3, r3, #3
 800ab52:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ab54:	2300      	movs	r3, #0
 800ab56:	623b      	str	r3, [r7, #32]
 800ab58:	e014      	b.n	800ab84 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	601a      	str	r2, [r3, #0]
    pDest++;
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	3301      	adds	r3, #1
 800ab6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	3301      	adds	r3, #1
 800ab70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	3301      	adds	r3, #1
 800ab76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ab78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ab7e:	6a3b      	ldr	r3, [r7, #32]
 800ab80:	3301      	adds	r3, #1
 800ab82:	623b      	str	r3, [r7, #32]
 800ab84:	6a3a      	ldr	r2, [r7, #32]
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d3e6      	bcc.n	800ab5a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ab8c:	8bfb      	ldrh	r3, [r7, #30]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d01e      	beq.n	800abd0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	f107 0310 	add.w	r3, r7, #16
 800aba2:	6812      	ldr	r2, [r2, #0]
 800aba4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	6a3b      	ldr	r3, [r7, #32]
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	00db      	lsls	r3, r3, #3
 800abae:	fa22 f303 	lsr.w	r3, r2, r3
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb6:	701a      	strb	r2, [r3, #0]
      i++;
 800abb8:	6a3b      	ldr	r3, [r7, #32]
 800abba:	3301      	adds	r3, #1
 800abbc:	623b      	str	r3, [r7, #32]
      pDest++;
 800abbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc0:	3301      	adds	r3, #1
 800abc2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800abc4:	8bfb      	ldrh	r3, [r7, #30]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800abca:	8bfb      	ldrh	r3, [r7, #30]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1ea      	bne.n	800aba6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	372c      	adds	r7, #44	; 0x2c
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abde:	b480      	push	{r7}
 800abe0:	b085      	sub	sp, #20
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	785b      	ldrb	r3, [r3, #1]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d12c      	bne.n	800ac54 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	015a      	lsls	r2, r3, #5
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	4413      	add	r3, r2
 800ac02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	db12      	blt.n	800ac32 <USB_EPSetStall+0x54>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00f      	beq.n	800ac32 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	015a      	lsls	r2, r3, #5
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4413      	add	r3, r2
 800ac1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68ba      	ldr	r2, [r7, #8]
 800ac22:	0151      	lsls	r1, r2, #5
 800ac24:	68fa      	ldr	r2, [r7, #12]
 800ac26:	440a      	add	r2, r1
 800ac28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac30:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	0151      	lsls	r1, r2, #5
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	440a      	add	r2, r1
 800ac48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	e02b      	b.n	800acac <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	015a      	lsls	r2, r3, #5
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	db12      	blt.n	800ac8c <USB_EPSetStall+0xae>
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00f      	beq.n	800ac8c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	0151      	lsls	r1, r2, #5
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	440a      	add	r2, r1
 800ac82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ac8a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	015a      	lsls	r2, r3, #5
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4413      	add	r3, r2
 800ac94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	0151      	lsls	r1, r2, #5
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	440a      	add	r2, r1
 800aca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aca6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800acaa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800acba:	b480      	push	{r7}
 800acbc:	b085      	sub	sp, #20
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
 800acc2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	785b      	ldrb	r3, [r3, #1]
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d128      	bne.n	800ad28 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	015a      	lsls	r2, r3, #5
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4413      	add	r3, r2
 800acde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68ba      	ldr	r2, [r7, #8]
 800ace6:	0151      	lsls	r1, r2, #5
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	440a      	add	r2, r1
 800acec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acf4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	78db      	ldrb	r3, [r3, #3]
 800acfa:	2b03      	cmp	r3, #3
 800acfc:	d003      	beq.n	800ad06 <USB_EPClearStall+0x4c>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	78db      	ldrb	r3, [r3, #3]
 800ad02:	2b02      	cmp	r3, #2
 800ad04:	d138      	bne.n	800ad78 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68ba      	ldr	r2, [r7, #8]
 800ad16:	0151      	lsls	r1, r2, #5
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	440a      	add	r2, r1
 800ad1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad24:	6013      	str	r3, [r2, #0]
 800ad26:	e027      	b.n	800ad78 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	015a      	lsls	r2, r3, #5
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	4413      	add	r3, r2
 800ad30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	0151      	lsls	r1, r2, #5
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	440a      	add	r2, r1
 800ad3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	78db      	ldrb	r3, [r3, #3]
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d003      	beq.n	800ad58 <USB_EPClearStall+0x9e>
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	78db      	ldrb	r3, [r3, #3]
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d10f      	bne.n	800ad78 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	68ba      	ldr	r2, [r7, #8]
 800ad68:	0151      	lsls	r1, r2, #5
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	440a      	add	r2, r1
 800ad6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad76:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ad86:	b480      	push	{r7}
 800ad88:	b085      	sub	sp, #20
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
 800ad8e:	460b      	mov	r3, r1
 800ad90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ada4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ada8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	011b      	lsls	r3, r3, #4
 800adb6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800adba:	68f9      	ldr	r1, [r7, #12]
 800adbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adc0:	4313      	orrs	r3, r2
 800adc2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800add2:	b480      	push	{r7}
 800add4:	b085      	sub	sp, #20
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800adec:	f023 0303 	bic.w	r3, r3, #3
 800adf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae00:	f023 0302 	bic.w	r3, r3, #2
 800ae04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae06:	2300      	movs	r3, #0
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68fa      	ldr	r2, [r7, #12]
 800ae2a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae2e:	f023 0303 	bic.w	r3, r3, #3
 800ae32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae42:	f043 0302 	orr.w	r3, r3, #2
 800ae46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ae48:	2300      	movs	r3, #0
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3714      	adds	r7, #20
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ae56:	b480      	push	{r7}
 800ae58:	b085      	sub	sp, #20
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr

0800ae7c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8e:	699b      	ldr	r3, [r3, #24]
 800ae90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae98:	69db      	ldr	r3, [r3, #28]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	0c1b      	lsrs	r3, r3, #16
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec2:	699b      	ldr	r3, [r3, #24]
 800aec4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	4013      	ands	r3, r2
 800aed2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	b29b      	uxth	r3, r3
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3714      	adds	r7, #20
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	460b      	mov	r3, r1
 800aeee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aef4:	78fb      	ldrb	r3, [r7, #3]
 800aef6:	015a      	lsls	r2, r3, #5
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	4413      	add	r3, r2
 800aefc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af0a:	695b      	ldr	r3, [r3, #20]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	4013      	ands	r3, r2
 800af10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af12:	68bb      	ldr	r3, [r7, #8]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800af20:	b480      	push	{r7}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	460b      	mov	r3, r1
 800af2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af42:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800af44:	78fb      	ldrb	r3, [r7, #3]
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	fa22 f303 	lsr.w	r3, r2, r3
 800af50:	01db      	lsls	r3, r3, #7
 800af52:	b2db      	uxtb	r3, r3
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	4313      	orrs	r3, r2
 800af58:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800af5a:	78fb      	ldrb	r3, [r7, #3]
 800af5c:	015a      	lsls	r2, r3, #5
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	4413      	add	r3, r2
 800af62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	693a      	ldr	r2, [r7, #16]
 800af6a:	4013      	ands	r3, r2
 800af6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800af6e:	68bb      	ldr	r3, [r7, #8]
}
 800af70:	4618      	mov	r0, r3
 800af72:	371c      	adds	r7, #28
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	695b      	ldr	r3, [r3, #20]
 800af88:	f003 0301 	and.w	r3, r3, #1
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800afb6:	f023 0307 	bic.w	r3, r3, #7
 800afba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3714      	adds	r7, #20
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
	...

0800afe0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b087      	sub	sp, #28
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	460b      	mov	r3, r1
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	333c      	adds	r3, #60	; 0x3c
 800aff6:	3304      	adds	r3, #4
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	4a26      	ldr	r2, [pc, #152]	; (800b098 <USB_EP0_OutStart+0xb8>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d90a      	bls.n	800b01a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b014:	d101      	bne.n	800b01a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	e037      	b.n	800b08a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b020:	461a      	mov	r2, r3
 800b022:	2300      	movs	r3, #0
 800b024:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b02c:	691b      	ldr	r3, [r3, #16]
 800b02e:	697a      	ldr	r2, [r7, #20]
 800b030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b034:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b038:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b040:	691b      	ldr	r3, [r3, #16]
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b048:	f043 0318 	orr.w	r3, r3, #24
 800b04c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b05c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b060:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b062:	7afb      	ldrb	r3, [r7, #11]
 800b064:	2b01      	cmp	r3, #1
 800b066:	d10f      	bne.n	800b088 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b06e:	461a      	mov	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	697a      	ldr	r2, [r7, #20]
 800b07e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b082:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b086:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	371c      	adds	r7, #28
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	4f54300a 	.word	0x4f54300a

0800b09c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b085      	sub	sp, #20
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	60fb      	str	r3, [r7, #12]
 800b0ae:	4a13      	ldr	r2, [pc, #76]	; (800b0fc <USB_CoreReset+0x60>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d901      	bls.n	800b0b8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e01a      	b.n	800b0ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	daf3      	bge.n	800b0a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	f043 0201 	orr.w	r2, r3, #1
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	60fb      	str	r3, [r7, #12]
 800b0d6:	4a09      	ldr	r2, [pc, #36]	; (800b0fc <USB_CoreReset+0x60>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d901      	bls.n	800b0e0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e006      	b.n	800b0ee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	691b      	ldr	r3, [r3, #16]
 800b0e4:	f003 0301 	and.w	r3, r3, #1
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d0f1      	beq.n	800b0d0 <USB_CoreReset+0x34>

  return HAL_OK;
 800b0ec:	2300      	movs	r3, #0
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3714      	adds	r7, #20
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	00030d40 	.word	0x00030d40

0800b100 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	460b      	mov	r3, r1
 800b10a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b10c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b110:	f002 f90c 	bl	800d32c <USBD_static_malloc>
 800b114:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d105      	bne.n	800b128 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b124:	2302      	movs	r3, #2
 800b126:	e066      	b.n	800b1f6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	7c1b      	ldrb	r3, [r3, #16]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d119      	bne.n	800b16c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b138:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b13c:	2202      	movs	r2, #2
 800b13e:	2181      	movs	r1, #129	; 0x81
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f001 ffd0 	bl	800d0e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b14c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b150:	2202      	movs	r2, #2
 800b152:	2101      	movs	r1, #1
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f001 ffc6 	bl	800d0e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2210      	movs	r2, #16
 800b166:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b16a:	e016      	b.n	800b19a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b16c:	2340      	movs	r3, #64	; 0x40
 800b16e:	2202      	movs	r2, #2
 800b170:	2181      	movs	r1, #129	; 0x81
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f001 ffb7 	bl	800d0e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2201      	movs	r2, #1
 800b17c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b17e:	2340      	movs	r3, #64	; 0x40
 800b180:	2202      	movs	r2, #2
 800b182:	2101      	movs	r1, #1
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f001 ffae 	bl	800d0e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2201      	movs	r2, #1
 800b18e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2210      	movs	r2, #16
 800b196:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b19a:	2308      	movs	r3, #8
 800b19c:	2203      	movs	r2, #3
 800b19e:	2182      	movs	r1, #130	; 0x82
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f001 ffa0 	bl	800d0e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	7c1b      	ldrb	r3, [r3, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d109      	bne.n	800b1e4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b1da:	2101      	movs	r1, #1
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f002 f871 	bl	800d2c4 <USBD_LL_PrepareReceive>
 800b1e2:	e007      	b.n	800b1f4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b1ea:	2340      	movs	r3, #64	; 0x40
 800b1ec:	2101      	movs	r1, #1
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f002 f868 	bl	800d2c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}

0800b1fe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1fe:	b580      	push	{r7, lr}
 800b200:	b082      	sub	sp, #8
 800b202:	af00      	add	r7, sp, #0
 800b204:	6078      	str	r0, [r7, #4]
 800b206:	460b      	mov	r3, r1
 800b208:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b20a:	2181      	movs	r1, #129	; 0x81
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f001 ff90 	bl	800d132 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b218:	2101      	movs	r1, #1
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f001 ff89 	bl	800d132 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b228:	2182      	movs	r1, #130	; 0x82
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f001 ff81 	bl	800d132 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00e      	beq.n	800b268 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b25a:	4618      	mov	r0, r3
 800b25c:	f002 f874 	bl	800d348 <USBD_static_free>
    pdev->pClassData = NULL;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2200      	movs	r2, #0
 800b264:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
	...

0800b274 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b284:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b286:	2300      	movs	r3, #0
 800b288:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b28a:	2300      	movs	r3, #0
 800b28c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b298:	2303      	movs	r3, #3
 800b29a:	e0af      	b.n	800b3fc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	781b      	ldrb	r3, [r3, #0]
 800b2a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d03f      	beq.n	800b328 <USBD_CDC_Setup+0xb4>
 800b2a8:	2b20      	cmp	r3, #32
 800b2aa:	f040 809f 	bne.w	800b3ec <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	88db      	ldrh	r3, [r3, #6]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d02e      	beq.n	800b314 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	b25b      	sxtb	r3, r3
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	da16      	bge.n	800b2ee <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	683a      	ldr	r2, [r7, #0]
 800b2ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b2cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	88d2      	ldrh	r2, [r2, #6]
 800b2d2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	88db      	ldrh	r3, [r3, #6]
 800b2d8:	2b07      	cmp	r3, #7
 800b2da:	bf28      	it	cs
 800b2dc:	2307      	movcs	r3, #7
 800b2de:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	89fa      	ldrh	r2, [r7, #14]
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f001 fae9 	bl	800c8be <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b2ec:	e085      	b.n	800b3fa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	785a      	ldrb	r2, [r3, #1]
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	88db      	ldrh	r3, [r3, #6]
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b304:	6939      	ldr	r1, [r7, #16]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	88db      	ldrh	r3, [r3, #6]
 800b30a:	461a      	mov	r2, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f001 fb02 	bl	800c916 <USBD_CtlPrepareRx>
      break;
 800b312:	e072      	b.n	800b3fa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	7850      	ldrb	r0, [r2, #1]
 800b320:	2200      	movs	r2, #0
 800b322:	6839      	ldr	r1, [r7, #0]
 800b324:	4798      	blx	r3
      break;
 800b326:	e068      	b.n	800b3fa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	785b      	ldrb	r3, [r3, #1]
 800b32c:	2b0b      	cmp	r3, #11
 800b32e:	d852      	bhi.n	800b3d6 <USBD_CDC_Setup+0x162>
 800b330:	a201      	add	r2, pc, #4	; (adr r2, 800b338 <USBD_CDC_Setup+0xc4>)
 800b332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b336:	bf00      	nop
 800b338:	0800b369 	.word	0x0800b369
 800b33c:	0800b3e5 	.word	0x0800b3e5
 800b340:	0800b3d7 	.word	0x0800b3d7
 800b344:	0800b3d7 	.word	0x0800b3d7
 800b348:	0800b3d7 	.word	0x0800b3d7
 800b34c:	0800b3d7 	.word	0x0800b3d7
 800b350:	0800b3d7 	.word	0x0800b3d7
 800b354:	0800b3d7 	.word	0x0800b3d7
 800b358:	0800b3d7 	.word	0x0800b3d7
 800b35c:	0800b3d7 	.word	0x0800b3d7
 800b360:	0800b393 	.word	0x0800b393
 800b364:	0800b3bd 	.word	0x0800b3bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b03      	cmp	r3, #3
 800b372:	d107      	bne.n	800b384 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b374:	f107 030a 	add.w	r3, r7, #10
 800b378:	2202      	movs	r2, #2
 800b37a:	4619      	mov	r1, r3
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f001 fa9e 	bl	800c8be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b382:	e032      	b.n	800b3ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f001 fa28 	bl	800c7dc <USBD_CtlError>
            ret = USBD_FAIL;
 800b38c:	2303      	movs	r3, #3
 800b38e:	75fb      	strb	r3, [r7, #23]
          break;
 800b390:	e02b      	b.n	800b3ea <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b03      	cmp	r3, #3
 800b39c:	d107      	bne.n	800b3ae <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b39e:	f107 030d 	add.w	r3, r7, #13
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f001 fa89 	bl	800c8be <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3ac:	e01d      	b.n	800b3ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b3ae:	6839      	ldr	r1, [r7, #0]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f001 fa13 	bl	800c7dc <USBD_CtlError>
            ret = USBD_FAIL;
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	75fb      	strb	r3, [r7, #23]
          break;
 800b3ba:	e016      	b.n	800b3ea <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b03      	cmp	r3, #3
 800b3c6:	d00f      	beq.n	800b3e8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f001 fa06 	bl	800c7dc <USBD_CtlError>
            ret = USBD_FAIL;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b3d4:	e008      	b.n	800b3e8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b3d6:	6839      	ldr	r1, [r7, #0]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f001 f9ff 	bl	800c7dc <USBD_CtlError>
          ret = USBD_FAIL;
 800b3de:	2303      	movs	r3, #3
 800b3e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b3e2:	e002      	b.n	800b3ea <USBD_CDC_Setup+0x176>
          break;
 800b3e4:	bf00      	nop
 800b3e6:	e008      	b.n	800b3fa <USBD_CDC_Setup+0x186>
          break;
 800b3e8:	bf00      	nop
      }
      break;
 800b3ea:	e006      	b.n	800b3fa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f001 f9f4 	bl	800c7dc <USBD_CtlError>
      ret = USBD_FAIL;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b3f8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b3fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3718      	adds	r7, #24
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b416:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d101      	bne.n	800b426 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b422:	2303      	movs	r3, #3
 800b424:	e04f      	b.n	800b4c6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b42c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b42e:	78fa      	ldrb	r2, [r7, #3]
 800b430:	6879      	ldr	r1, [r7, #4]
 800b432:	4613      	mov	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4413      	add	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	440b      	add	r3, r1
 800b43c:	3318      	adds	r3, #24
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d029      	beq.n	800b498 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b444:	78fa      	ldrb	r2, [r7, #3]
 800b446:	6879      	ldr	r1, [r7, #4]
 800b448:	4613      	mov	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4413      	add	r3, r2
 800b44e:	009b      	lsls	r3, r3, #2
 800b450:	440b      	add	r3, r1
 800b452:	3318      	adds	r3, #24
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	78f9      	ldrb	r1, [r7, #3]
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	460b      	mov	r3, r1
 800b45c:	00db      	lsls	r3, r3, #3
 800b45e:	1a5b      	subs	r3, r3, r1
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	4403      	add	r3, r0
 800b464:	3344      	adds	r3, #68	; 0x44
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	fbb2 f1f3 	udiv	r1, r2, r3
 800b46c:	fb03 f301 	mul.w	r3, r3, r1
 800b470:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b472:	2b00      	cmp	r3, #0
 800b474:	d110      	bne.n	800b498 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b476:	78fa      	ldrb	r2, [r7, #3]
 800b478:	6879      	ldr	r1, [r7, #4]
 800b47a:	4613      	mov	r3, r2
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	4413      	add	r3, r2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	440b      	add	r3, r1
 800b484:	3318      	adds	r3, #24
 800b486:	2200      	movs	r2, #0
 800b488:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b48a:	78f9      	ldrb	r1, [r7, #3]
 800b48c:	2300      	movs	r3, #0
 800b48e:	2200      	movs	r2, #0
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f001 fef6 	bl	800d282 <USBD_LL_Transmit>
 800b496:	e015      	b.n	800b4c4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	2200      	movs	r2, #0
 800b49c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00b      	beq.n	800b4c4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4b2:	691b      	ldr	r3, [r3, #16]
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b4c0:	78fa      	ldrb	r2, [r7, #3]
 800b4c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b084      	sub	sp, #16
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4ec:	2303      	movs	r3, #3
 800b4ee:	e015      	b.n	800b51c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b4f0:	78fb      	ldrb	r3, [r7, #3]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f001 ff06 	bl	800d306 <USBD_LL_GetRxDataSize>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b508:	68db      	ldr	r3, [r3, #12]
 800b50a:	68fa      	ldr	r2, [r7, #12]
 800b50c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b516:	4611      	mov	r1, r2
 800b518:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b532:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b53a:	2303      	movs	r3, #3
 800b53c:	e01b      	b.n	800b576 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d015      	beq.n	800b574 <USBD_CDC_EP0_RxReady+0x50>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b54e:	2bff      	cmp	r3, #255	; 0xff
 800b550:	d010      	beq.n	800b574 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b560:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b562:	68fa      	ldr	r2, [r7, #12]
 800b564:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b568:	b292      	uxth	r2, r2
 800b56a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	22ff      	movs	r2, #255	; 0xff
 800b570:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
	...

0800b580 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2243      	movs	r2, #67	; 0x43
 800b58c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b58e:	4b03      	ldr	r3, [pc, #12]	; (800b59c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b590:	4618      	mov	r0, r3
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr
 800b59c:	20000094 	.word	0x20000094

0800b5a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2243      	movs	r2, #67	; 0x43
 800b5ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b5ae:	4b03      	ldr	r3, [pc, #12]	; (800b5bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	20000050 	.word	0x20000050

0800b5c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2243      	movs	r2, #67	; 0x43
 800b5cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b5ce:	4b03      	ldr	r3, [pc, #12]	; (800b5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	370c      	adds	r7, #12
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr
 800b5dc:	200000d8 	.word	0x200000d8

0800b5e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	220a      	movs	r2, #10
 800b5ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b5ee:	4b03      	ldr	r3, [pc, #12]	; (800b5fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	370c      	adds	r7, #12
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	2000000c 	.word	0x2000000c

0800b600 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d101      	bne.n	800b614 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b610:	2303      	movs	r3, #3
 800b612:	e004      	b.n	800b61e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr

0800b62a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b62a:	b480      	push	{r7}
 800b62c:	b087      	sub	sp, #28
 800b62e:	af00      	add	r7, sp, #0
 800b630:	60f8      	str	r0, [r7, #12]
 800b632:	60b9      	str	r1, [r7, #8]
 800b634:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b63c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d101      	bne.n	800b648 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b644:	2303      	movs	r3, #3
 800b646:	e008      	b.n	800b65a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	371c      	adds	r7, #28
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b666:	b480      	push	{r7}
 800b668:	b085      	sub	sp, #20
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b676:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b67e:	2303      	movs	r3, #3
 800b680:	e004      	b.n	800b68c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	683a      	ldr	r2, [r7, #0]
 800b686:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3714      	adds	r7, #20
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d101      	bne.n	800b6b6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	e016      	b.n	800b6e4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	7c1b      	ldrb	r3, [r3, #16]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d109      	bne.n	800b6d2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f001 fdfa 	bl	800d2c4 <USBD_LL_PrepareReceive>
 800b6d0:	e007      	b.n	800b6e2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6d8:	2340      	movs	r3, #64	; 0x40
 800b6da:	2101      	movs	r1, #1
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f001 fdf1 	bl	800d2c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b086      	sub	sp, #24
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b700:	2303      	movs	r3, #3
 800b702:	e01f      	b.n	800b744 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2200      	movs	r2, #0
 800b710:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2200      	movs	r2, #0
 800b718:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d003      	beq.n	800b72a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2201      	movs	r2, #1
 800b72e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	79fa      	ldrb	r2, [r7, #7]
 800b736:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f001 fc6d 	bl	800d018 <USBD_LL_Init>
 800b73e:	4603      	mov	r3, r0
 800b740:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b742:	7dfb      	ldrb	r3, [r7, #23]
}
 800b744:	4618      	mov	r0, r3
 800b746:	3718      	adds	r7, #24
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b756:	2300      	movs	r3, #0
 800b758:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b760:	2303      	movs	r3, #3
 800b762:	e016      	b.n	800b792 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00b      	beq.n	800b790 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b780:	f107 020e 	add.w	r2, r7, #14
 800b784:	4610      	mov	r0, r2
 800b786:	4798      	blx	r3
 800b788:	4602      	mov	r2, r0
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f001 fc84 	bl	800d0b0 <USBD_LL_Start>
 800b7a8:	4603      	mov	r3, r0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b083      	sub	sp, #12
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b7ba:	2300      	movs	r3, #0
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	370c      	adds	r7, #12
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d009      	beq.n	800b7f6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	78fa      	ldrb	r2, [r7, #3]
 800b7ec:	4611      	mov	r1, r2
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	4798      	blx	r3
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	460b      	mov	r3, r1
 800b80a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b812:	2b00      	cmp	r3, #0
 800b814:	d007      	beq.n	800b826 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	78fa      	ldrb	r2, [r7, #3]
 800b820:	4611      	mov	r1, r2
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	4798      	blx	r3
  }

  return USBD_OK;
 800b826:	2300      	movs	r3, #0
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3708      	adds	r7, #8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b840:	6839      	ldr	r1, [r7, #0]
 800b842:	4618      	mov	r0, r3
 800b844:	f000 ff90 	bl	800c768 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b856:	461a      	mov	r2, r3
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b864:	f003 031f 	and.w	r3, r3, #31
 800b868:	2b02      	cmp	r3, #2
 800b86a:	d01a      	beq.n	800b8a2 <USBD_LL_SetupStage+0x72>
 800b86c:	2b02      	cmp	r3, #2
 800b86e:	d822      	bhi.n	800b8b6 <USBD_LL_SetupStage+0x86>
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <USBD_LL_SetupStage+0x4a>
 800b874:	2b01      	cmp	r3, #1
 800b876:	d00a      	beq.n	800b88e <USBD_LL_SetupStage+0x5e>
 800b878:	e01d      	b.n	800b8b6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b880:	4619      	mov	r1, r3
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fa62 	bl	800bd4c <USBD_StdDevReq>
 800b888:	4603      	mov	r3, r0
 800b88a:	73fb      	strb	r3, [r7, #15]
      break;
 800b88c:	e020      	b.n	800b8d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fac6 	bl	800be28 <USBD_StdItfReq>
 800b89c:	4603      	mov	r3, r0
 800b89e:	73fb      	strb	r3, [r7, #15]
      break;
 800b8a0:	e016      	b.n	800b8d0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fb05 	bl	800beba <USBD_StdEPReq>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b4:	e00c      	b.n	800b8d0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f001 fc53 	bl	800d170 <USBD_LL_StallEP>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b8ce:	bf00      	nop
  }

  return ret;
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b086      	sub	sp, #24
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	607a      	str	r2, [r7, #4]
 800b8e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b8e8:	7afb      	ldrb	r3, [r7, #11]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d138      	bne.n	800b960 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b8f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8fc:	2b03      	cmp	r3, #3
 800b8fe:	d14a      	bne.n	800b996 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	689a      	ldr	r2, [r3, #8]
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d913      	bls.n	800b934 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	689a      	ldr	r2, [r3, #8]
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	1ad2      	subs	r2, r2, r3
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	68da      	ldr	r2, [r3, #12]
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	4293      	cmp	r3, r2
 800b924:	bf28      	it	cs
 800b926:	4613      	movcs	r3, r2
 800b928:	461a      	mov	r2, r3
 800b92a:	6879      	ldr	r1, [r7, #4]
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f001 f80f 	bl	800c950 <USBD_CtlContinueRx>
 800b932:	e030      	b.n	800b996 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b93a:	b2db      	uxtb	r3, r3
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	d10b      	bne.n	800b958 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d005      	beq.n	800b958 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f001 f80a 	bl	800c972 <USBD_CtlSendStatus>
 800b95e:	e01a      	b.n	800b996 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b966:	b2db      	uxtb	r3, r3
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d114      	bne.n	800b996 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00e      	beq.n	800b996 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b97e:	699b      	ldr	r3, [r3, #24]
 800b980:	7afa      	ldrb	r2, [r7, #11]
 800b982:	4611      	mov	r1, r2
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	4798      	blx	r3
 800b988:	4603      	mov	r3, r0
 800b98a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	e000      	b.n	800b998 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3718      	adds	r7, #24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	607a      	str	r2, [r7, #4]
 800b9ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b9ae:	7afb      	ldrb	r3, [r7, #11]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d16b      	bne.n	800ba8c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	3314      	adds	r3, #20
 800b9b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b9c0:	2b02      	cmp	r3, #2
 800b9c2:	d156      	bne.n	800ba72 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	689a      	ldr	r2, [r3, #8]
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d914      	bls.n	800b9fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	689a      	ldr	r2, [r3, #8]
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	1ad2      	subs	r2, r2, r3
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	68f8      	ldr	r0, [r7, #12]
 800b9e8:	f000 ff84 	bl	800c8f4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f001 fc66 	bl	800d2c4 <USBD_LL_PrepareReceive>
 800b9f8:	e03b      	b.n	800ba72 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	68da      	ldr	r2, [r3, #12]
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d11c      	bne.n	800ba40 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d316      	bcc.n	800ba40 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	685a      	ldr	r2, [r3, #4]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d20f      	bcs.n	800ba40 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba20:	2200      	movs	r2, #0
 800ba22:	2100      	movs	r1, #0
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f000 ff65 	bl	800c8f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba32:	2300      	movs	r3, #0
 800ba34:	2200      	movs	r2, #0
 800ba36:	2100      	movs	r1, #0
 800ba38:	68f8      	ldr	r0, [r7, #12]
 800ba3a:	f001 fc43 	bl	800d2c4 <USBD_LL_PrepareReceive>
 800ba3e:	e018      	b.n	800ba72 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba46:	b2db      	uxtb	r3, r3
 800ba48:	2b03      	cmp	r3, #3
 800ba4a:	d10b      	bne.n	800ba64 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d005      	beq.n	800ba64 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba64:	2180      	movs	r1, #128	; 0x80
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f001 fb82 	bl	800d170 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 ff93 	bl	800c998 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d122      	bne.n	800bac2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f7ff fe98 	bl	800b7b2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ba8a:	e01a      	b.n	800bac2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d114      	bne.n	800bac2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba9e:	695b      	ldr	r3, [r3, #20]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00e      	beq.n	800bac2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baaa:	695b      	ldr	r3, [r3, #20]
 800baac:	7afa      	ldrb	r2, [r7, #11]
 800baae:	4611      	mov	r1, r2
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	4798      	blx	r3
 800bab4:	4603      	mov	r3, r0
 800bab6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bab8:	7dfb      	ldrb	r3, [r7, #23]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800babe:	7dfb      	ldrb	r3, [r7, #23]
 800bac0:	e000      	b.n	800bac4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3718      	adds	r7, #24
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2200      	movs	r2, #0
 800baee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d101      	bne.n	800bb00 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bafc:	2303      	movs	r3, #3
 800bafe:	e02f      	b.n	800bb60 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00f      	beq.n	800bb2a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d009      	beq.n	800bb2a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	6852      	ldr	r2, [r2, #4]
 800bb22:	b2d2      	uxtb	r2, r2
 800bb24:	4611      	mov	r1, r2
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb2a:	2340      	movs	r3, #64	; 0x40
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	2100      	movs	r1, #0
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f001 fad8 	bl	800d0e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2201      	movs	r2, #1
 800bb3a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2240      	movs	r2, #64	; 0x40
 800bb42:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bb46:	2340      	movs	r3, #64	; 0x40
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2180      	movs	r1, #128	; 0x80
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 faca 	bl	800d0e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2201      	movs	r2, #1
 800bb56:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2240      	movs	r2, #64	; 0x40
 800bb5c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	78fa      	ldrb	r2, [r7, #3]
 800bb78:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2204      	movs	r2, #4
 800bba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b04      	cmp	r3, #4
 800bbc6:	d106      	bne.n	800bbd6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bbce:	b2da      	uxtb	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bbf6:	2303      	movs	r3, #3
 800bbf8:	e012      	b.n	800bc20 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d10b      	bne.n	800bc1e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc0c:	69db      	ldr	r3, [r3, #28]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d005      	beq.n	800bc1e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc1e:	2300      	movs	r3, #0
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	460b      	mov	r3, r1
 800bc32:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e014      	b.n	800bc6c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	2b03      	cmp	r3, #3
 800bc4c:	d10d      	bne.n	800bc6a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc54:	6a1b      	ldr	r3, [r3, #32]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d007      	beq.n	800bc6a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc60:	6a1b      	ldr	r3, [r3, #32]
 800bc62:	78fa      	ldrb	r2, [r7, #3]
 800bc64:	4611      	mov	r1, r2
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d101      	bne.n	800bc8e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	e014      	b.n	800bcb8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	2b03      	cmp	r3, #3
 800bc98:	d10d      	bne.n	800bcb6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d007      	beq.n	800bcb6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcae:	78fa      	ldrb	r2, [r7, #3]
 800bcb0:	4611      	mov	r1, r2
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bcb6:	2300      	movs	r3, #0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	370c      	adds	r7, #12
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b082      	sub	sp, #8
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2201      	movs	r2, #1
 800bce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d009      	beq.n	800bd04 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	6852      	ldr	r2, [r2, #4]
 800bcfc:	b2d2      	uxtb	r2, r2
 800bcfe:	4611      	mov	r1, r2
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	4798      	blx	r3
  }

  return USBD_OK;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b087      	sub	sp, #28
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	3301      	adds	r3, #1
 800bd24:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd2c:	8a3b      	ldrh	r3, [r7, #16]
 800bd2e:	021b      	lsls	r3, r3, #8
 800bd30:	b21a      	sxth	r2, r3
 800bd32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	b21b      	sxth	r3, r3
 800bd3a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd3c:	89fb      	ldrh	r3, [r7, #14]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	371c      	adds	r7, #28
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
	...

0800bd4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd62:	2b40      	cmp	r3, #64	; 0x40
 800bd64:	d005      	beq.n	800bd72 <USBD_StdDevReq+0x26>
 800bd66:	2b40      	cmp	r3, #64	; 0x40
 800bd68:	d853      	bhi.n	800be12 <USBD_StdDevReq+0xc6>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00b      	beq.n	800bd86 <USBD_StdDevReq+0x3a>
 800bd6e:	2b20      	cmp	r3, #32
 800bd70:	d14f      	bne.n	800be12 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	6839      	ldr	r1, [r7, #0]
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	4798      	blx	r3
 800bd80:	4603      	mov	r3, r0
 800bd82:	73fb      	strb	r3, [r7, #15]
      break;
 800bd84:	e04a      	b.n	800be1c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	785b      	ldrb	r3, [r3, #1]
 800bd8a:	2b09      	cmp	r3, #9
 800bd8c:	d83b      	bhi.n	800be06 <USBD_StdDevReq+0xba>
 800bd8e:	a201      	add	r2, pc, #4	; (adr r2, 800bd94 <USBD_StdDevReq+0x48>)
 800bd90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd94:	0800bde9 	.word	0x0800bde9
 800bd98:	0800bdfd 	.word	0x0800bdfd
 800bd9c:	0800be07 	.word	0x0800be07
 800bda0:	0800bdf3 	.word	0x0800bdf3
 800bda4:	0800be07 	.word	0x0800be07
 800bda8:	0800bdc7 	.word	0x0800bdc7
 800bdac:	0800bdbd 	.word	0x0800bdbd
 800bdb0:	0800be07 	.word	0x0800be07
 800bdb4:	0800bddf 	.word	0x0800bddf
 800bdb8:	0800bdd1 	.word	0x0800bdd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bdbc:	6839      	ldr	r1, [r7, #0]
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 f9de 	bl	800c180 <USBD_GetDescriptor>
          break;
 800bdc4:	e024      	b.n	800be10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bdc6:	6839      	ldr	r1, [r7, #0]
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 fb43 	bl	800c454 <USBD_SetAddress>
          break;
 800bdce:	e01f      	b.n	800be10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bdd0:	6839      	ldr	r1, [r7, #0]
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fb82 	bl	800c4dc <USBD_SetConfig>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	73fb      	strb	r3, [r7, #15]
          break;
 800bddc:	e018      	b.n	800be10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bdde:	6839      	ldr	r1, [r7, #0]
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f000 fc21 	bl	800c628 <USBD_GetConfig>
          break;
 800bde6:	e013      	b.n	800be10 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bde8:	6839      	ldr	r1, [r7, #0]
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fc52 	bl	800c694 <USBD_GetStatus>
          break;
 800bdf0:	e00e      	b.n	800be10 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fc81 	bl	800c6fc <USBD_SetFeature>
          break;
 800bdfa:	e009      	b.n	800be10 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fc90 	bl	800c724 <USBD_ClrFeature>
          break;
 800be04:	e004      	b.n	800be10 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fce7 	bl	800c7dc <USBD_CtlError>
          break;
 800be0e:	bf00      	nop
      }
      break;
 800be10:	e004      	b.n	800be1c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fce1 	bl	800c7dc <USBD_CtlError>
      break;
 800be1a:	bf00      	nop
  }

  return ret;
 800be1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop

0800be28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be32:	2300      	movs	r3, #0
 800be34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be3e:	2b40      	cmp	r3, #64	; 0x40
 800be40:	d005      	beq.n	800be4e <USBD_StdItfReq+0x26>
 800be42:	2b40      	cmp	r3, #64	; 0x40
 800be44:	d82f      	bhi.n	800bea6 <USBD_StdItfReq+0x7e>
 800be46:	2b00      	cmp	r3, #0
 800be48:	d001      	beq.n	800be4e <USBD_StdItfReq+0x26>
 800be4a:	2b20      	cmp	r3, #32
 800be4c:	d12b      	bne.n	800bea6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be54:	b2db      	uxtb	r3, r3
 800be56:	3b01      	subs	r3, #1
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d81d      	bhi.n	800be98 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	889b      	ldrh	r3, [r3, #4]
 800be60:	b2db      	uxtb	r3, r3
 800be62:	2b01      	cmp	r3, #1
 800be64:	d813      	bhi.n	800be8e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	6839      	ldr	r1, [r7, #0]
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	4798      	blx	r3
 800be74:	4603      	mov	r3, r0
 800be76:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	88db      	ldrh	r3, [r3, #6]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d110      	bne.n	800bea2 <USBD_StdItfReq+0x7a>
 800be80:	7bfb      	ldrb	r3, [r7, #15]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10d      	bne.n	800bea2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 fd73 	bl	800c972 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be8c:	e009      	b.n	800bea2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fca3 	bl	800c7dc <USBD_CtlError>
          break;
 800be96:	e004      	b.n	800bea2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800be98:	6839      	ldr	r1, [r7, #0]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fc9e 	bl	800c7dc <USBD_CtlError>
          break;
 800bea0:	e000      	b.n	800bea4 <USBD_StdItfReq+0x7c>
          break;
 800bea2:	bf00      	nop
      }
      break;
 800bea4:	e004      	b.n	800beb0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fc97 	bl	800c7dc <USBD_CtlError>
      break;
 800beae:	bf00      	nop
  }

  return ret;
 800beb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b084      	sub	sp, #16
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	889b      	ldrh	r3, [r3, #4]
 800becc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bed6:	2b40      	cmp	r3, #64	; 0x40
 800bed8:	d007      	beq.n	800beea <USBD_StdEPReq+0x30>
 800beda:	2b40      	cmp	r3, #64	; 0x40
 800bedc:	f200 8145 	bhi.w	800c16a <USBD_StdEPReq+0x2b0>
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00c      	beq.n	800befe <USBD_StdEPReq+0x44>
 800bee4:	2b20      	cmp	r3, #32
 800bee6:	f040 8140 	bne.w	800c16a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	4798      	blx	r3
 800bef8:	4603      	mov	r3, r0
 800befa:	73fb      	strb	r3, [r7, #15]
      break;
 800befc:	e13a      	b.n	800c174 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	785b      	ldrb	r3, [r3, #1]
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	d007      	beq.n	800bf16 <USBD_StdEPReq+0x5c>
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	f300 8129 	bgt.w	800c15e <USBD_StdEPReq+0x2a4>
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d07f      	beq.n	800c010 <USBD_StdEPReq+0x156>
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d03c      	beq.n	800bf8e <USBD_StdEPReq+0xd4>
 800bf14:	e123      	b.n	800c15e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf1c:	b2db      	uxtb	r3, r3
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d002      	beq.n	800bf28 <USBD_StdEPReq+0x6e>
 800bf22:	2b03      	cmp	r3, #3
 800bf24:	d016      	beq.n	800bf54 <USBD_StdEPReq+0x9a>
 800bf26:	e02c      	b.n	800bf82 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00d      	beq.n	800bf4a <USBD_StdEPReq+0x90>
 800bf2e:	7bbb      	ldrb	r3, [r7, #14]
 800bf30:	2b80      	cmp	r3, #128	; 0x80
 800bf32:	d00a      	beq.n	800bf4a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf34:	7bbb      	ldrb	r3, [r7, #14]
 800bf36:	4619      	mov	r1, r3
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f001 f919 	bl	800d170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf3e:	2180      	movs	r1, #128	; 0x80
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f001 f915 	bl	800d170 <USBD_LL_StallEP>
 800bf46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf48:	e020      	b.n	800bf8c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fc45 	bl	800c7dc <USBD_CtlError>
              break;
 800bf52:	e01b      	b.n	800bf8c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	885b      	ldrh	r3, [r3, #2]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10e      	bne.n	800bf7a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf5c:	7bbb      	ldrb	r3, [r7, #14]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00b      	beq.n	800bf7a <USBD_StdEPReq+0xc0>
 800bf62:	7bbb      	ldrb	r3, [r7, #14]
 800bf64:	2b80      	cmp	r3, #128	; 0x80
 800bf66:	d008      	beq.n	800bf7a <USBD_StdEPReq+0xc0>
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	88db      	ldrh	r3, [r3, #6]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d104      	bne.n	800bf7a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf70:	7bbb      	ldrb	r3, [r7, #14]
 800bf72:	4619      	mov	r1, r3
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f001 f8fb 	bl	800d170 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fcf9 	bl	800c972 <USBD_CtlSendStatus>

              break;
 800bf80:	e004      	b.n	800bf8c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fc29 	bl	800c7dc <USBD_CtlError>
              break;
 800bf8a:	bf00      	nop
          }
          break;
 800bf8c:	e0ec      	b.n	800c168 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	d002      	beq.n	800bfa0 <USBD_StdEPReq+0xe6>
 800bf9a:	2b03      	cmp	r3, #3
 800bf9c:	d016      	beq.n	800bfcc <USBD_StdEPReq+0x112>
 800bf9e:	e030      	b.n	800c002 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfa0:	7bbb      	ldrb	r3, [r7, #14]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00d      	beq.n	800bfc2 <USBD_StdEPReq+0x108>
 800bfa6:	7bbb      	ldrb	r3, [r7, #14]
 800bfa8:	2b80      	cmp	r3, #128	; 0x80
 800bfaa:	d00a      	beq.n	800bfc2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfac:	7bbb      	ldrb	r3, [r7, #14]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f001 f8dd 	bl	800d170 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfb6:	2180      	movs	r1, #128	; 0x80
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f001 f8d9 	bl	800d170 <USBD_LL_StallEP>
 800bfbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfc0:	e025      	b.n	800c00e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fc09 	bl	800c7dc <USBD_CtlError>
              break;
 800bfca:	e020      	b.n	800c00e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	885b      	ldrh	r3, [r3, #2]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d11b      	bne.n	800c00c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d004      	beq.n	800bfe8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bfde:	7bbb      	ldrb	r3, [r7, #14]
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f001 f8e3 	bl	800d1ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 fcc2 	bl	800c972 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bff4:	689b      	ldr	r3, [r3, #8]
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	4798      	blx	r3
 800bffc:	4603      	mov	r3, r0
 800bffe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c000:	e004      	b.n	800c00c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c002:	6839      	ldr	r1, [r7, #0]
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 fbe9 	bl	800c7dc <USBD_CtlError>
              break;
 800c00a:	e000      	b.n	800c00e <USBD_StdEPReq+0x154>
              break;
 800c00c:	bf00      	nop
          }
          break;
 800c00e:	e0ab      	b.n	800c168 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c016:	b2db      	uxtb	r3, r3
 800c018:	2b02      	cmp	r3, #2
 800c01a:	d002      	beq.n	800c022 <USBD_StdEPReq+0x168>
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	d032      	beq.n	800c086 <USBD_StdEPReq+0x1cc>
 800c020:	e097      	b.n	800c152 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c022:	7bbb      	ldrb	r3, [r7, #14]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d007      	beq.n	800c038 <USBD_StdEPReq+0x17e>
 800c028:	7bbb      	ldrb	r3, [r7, #14]
 800c02a:	2b80      	cmp	r3, #128	; 0x80
 800c02c:	d004      	beq.n	800c038 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fbd3 	bl	800c7dc <USBD_CtlError>
                break;
 800c036:	e091      	b.n	800c15c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	da0b      	bge.n	800c058 <USBD_StdEPReq+0x19e>
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c046:	4613      	mov	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	4413      	add	r3, r2
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	3310      	adds	r3, #16
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	4413      	add	r3, r2
 800c054:	3304      	adds	r3, #4
 800c056:	e00b      	b.n	800c070 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c058:	7bbb      	ldrb	r3, [r7, #14]
 800c05a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c05e:	4613      	mov	r3, r2
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	4413      	add	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	4413      	add	r3, r2
 800c06e:	3304      	adds	r3, #4
 800c070:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	2200      	movs	r2, #0
 800c076:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	2202      	movs	r2, #2
 800c07c:	4619      	mov	r1, r3
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fc1d 	bl	800c8be <USBD_CtlSendData>
              break;
 800c084:	e06a      	b.n	800c15c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	da11      	bge.n	800c0b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c08e:	7bbb      	ldrb	r3, [r7, #14]
 800c090:	f003 020f 	and.w	r2, r3, #15
 800c094:	6879      	ldr	r1, [r7, #4]
 800c096:	4613      	mov	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4413      	add	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	440b      	add	r3, r1
 800c0a0:	3324      	adds	r3, #36	; 0x24
 800c0a2:	881b      	ldrh	r3, [r3, #0]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d117      	bne.n	800c0d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fb96 	bl	800c7dc <USBD_CtlError>
                  break;
 800c0b0:	e054      	b.n	800c15c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	f003 020f 	and.w	r2, r3, #15
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	440b      	add	r3, r1
 800c0c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c0c8:	881b      	ldrh	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d104      	bne.n	800c0d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fb83 	bl	800c7dc <USBD_CtlError>
                  break;
 800c0d6:	e041      	b.n	800c15c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	da0b      	bge.n	800c0f8 <USBD_StdEPReq+0x23e>
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	4413      	add	r3, r2
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	3310      	adds	r3, #16
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	3304      	adds	r3, #4
 800c0f6:	e00b      	b.n	800c110 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0f8:	7bbb      	ldrb	r3, [r7, #14]
 800c0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0fe:	4613      	mov	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	4413      	add	r3, r2
 800c10e:	3304      	adds	r3, #4
 800c110:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c112:	7bbb      	ldrb	r3, [r7, #14]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d002      	beq.n	800c11e <USBD_StdEPReq+0x264>
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	2b80      	cmp	r3, #128	; 0x80
 800c11c:	d103      	bne.n	800c126 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2200      	movs	r2, #0
 800c122:	601a      	str	r2, [r3, #0]
 800c124:	e00e      	b.n	800c144 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c126:	7bbb      	ldrb	r3, [r7, #14]
 800c128:	4619      	mov	r1, r3
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f001 f85e 	bl	800d1ec <USBD_LL_IsStallEP>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	2201      	movs	r2, #1
 800c13a:	601a      	str	r2, [r3, #0]
 800c13c:	e002      	b.n	800c144 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	2200      	movs	r2, #0
 800c142:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2202      	movs	r2, #2
 800c148:	4619      	mov	r1, r3
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fbb7 	bl	800c8be <USBD_CtlSendData>
              break;
 800c150:	e004      	b.n	800c15c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c152:	6839      	ldr	r1, [r7, #0]
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fb41 	bl	800c7dc <USBD_CtlError>
              break;
 800c15a:	bf00      	nop
          }
          break;
 800c15c:	e004      	b.n	800c168 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c15e:	6839      	ldr	r1, [r7, #0]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fb3b 	bl	800c7dc <USBD_CtlError>
          break;
 800c166:	bf00      	nop
      }
      break;
 800c168:	e004      	b.n	800c174 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fb35 	bl	800c7dc <USBD_CtlError>
      break;
 800c172:	bf00      	nop
  }

  return ret;
 800c174:	7bfb      	ldrb	r3, [r7, #15]
}
 800c176:	4618      	mov	r0, r3
 800c178:	3710      	adds	r7, #16
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
	...

0800c180 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c18a:	2300      	movs	r3, #0
 800c18c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c18e:	2300      	movs	r3, #0
 800c190:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c192:	2300      	movs	r3, #0
 800c194:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	885b      	ldrh	r3, [r3, #2]
 800c19a:	0a1b      	lsrs	r3, r3, #8
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	3b01      	subs	r3, #1
 800c1a0:	2b06      	cmp	r3, #6
 800c1a2:	f200 8128 	bhi.w	800c3f6 <USBD_GetDescriptor+0x276>
 800c1a6:	a201      	add	r2, pc, #4	; (adr r2, 800c1ac <USBD_GetDescriptor+0x2c>)
 800c1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ac:	0800c1c9 	.word	0x0800c1c9
 800c1b0:	0800c1e1 	.word	0x0800c1e1
 800c1b4:	0800c221 	.word	0x0800c221
 800c1b8:	0800c3f7 	.word	0x0800c3f7
 800c1bc:	0800c3f7 	.word	0x0800c3f7
 800c1c0:	0800c397 	.word	0x0800c397
 800c1c4:	0800c3c3 	.word	0x0800c3c3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	7c12      	ldrb	r2, [r2, #16]
 800c1d4:	f107 0108 	add.w	r1, r7, #8
 800c1d8:	4610      	mov	r0, r2
 800c1da:	4798      	blx	r3
 800c1dc:	60f8      	str	r0, [r7, #12]
      break;
 800c1de:	e112      	b.n	800c406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	7c1b      	ldrb	r3, [r3, #16]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d10d      	bne.n	800c204 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1f0:	f107 0208 	add.w	r2, r7, #8
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	4798      	blx	r3
 800c1f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	2202      	movs	r2, #2
 800c200:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c202:	e100      	b.n	800c406 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c20c:	f107 0208 	add.w	r2, r7, #8
 800c210:	4610      	mov	r0, r2
 800c212:	4798      	blx	r3
 800c214:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3301      	adds	r3, #1
 800c21a:	2202      	movs	r2, #2
 800c21c:	701a      	strb	r2, [r3, #0]
      break;
 800c21e:	e0f2      	b.n	800c406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	885b      	ldrh	r3, [r3, #2]
 800c224:	b2db      	uxtb	r3, r3
 800c226:	2b05      	cmp	r3, #5
 800c228:	f200 80ac 	bhi.w	800c384 <USBD_GetDescriptor+0x204>
 800c22c:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <USBD_GetDescriptor+0xb4>)
 800c22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c232:	bf00      	nop
 800c234:	0800c24d 	.word	0x0800c24d
 800c238:	0800c281 	.word	0x0800c281
 800c23c:	0800c2b5 	.word	0x0800c2b5
 800c240:	0800c2e9 	.word	0x0800c2e9
 800c244:	0800c31d 	.word	0x0800c31d
 800c248:	0800c351 	.word	0x0800c351
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00b      	beq.n	800c270 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	7c12      	ldrb	r2, [r2, #16]
 800c264:	f107 0108 	add.w	r1, r7, #8
 800c268:	4610      	mov	r0, r2
 800c26a:	4798      	blx	r3
 800c26c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c26e:	e091      	b.n	800c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 fab2 	bl	800c7dc <USBD_CtlError>
            err++;
 800c278:	7afb      	ldrb	r3, [r7, #11]
 800c27a:	3301      	adds	r3, #1
 800c27c:	72fb      	strb	r3, [r7, #11]
          break;
 800c27e:	e089      	b.n	800c394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c286:	689b      	ldr	r3, [r3, #8]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00b      	beq.n	800c2a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c292:	689b      	ldr	r3, [r3, #8]
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	7c12      	ldrb	r2, [r2, #16]
 800c298:	f107 0108 	add.w	r1, r7, #8
 800c29c:	4610      	mov	r0, r2
 800c29e:	4798      	blx	r3
 800c2a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2a2:	e077      	b.n	800c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fa98 	bl	800c7dc <USBD_CtlError>
            err++;
 800c2ac:	7afb      	ldrb	r3, [r7, #11]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c2b2:	e06f      	b.n	800c394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ba:	68db      	ldr	r3, [r3, #12]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d00b      	beq.n	800c2d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	7c12      	ldrb	r2, [r2, #16]
 800c2cc:	f107 0108 	add.w	r1, r7, #8
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	4798      	blx	r3
 800c2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2d6:	e05d      	b.n	800c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fa7e 	bl	800c7dc <USBD_CtlError>
            err++;
 800c2e0:	7afb      	ldrb	r3, [r7, #11]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c2e6:	e055      	b.n	800c394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00b      	beq.n	800c30c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2fa:	691b      	ldr	r3, [r3, #16]
 800c2fc:	687a      	ldr	r2, [r7, #4]
 800c2fe:	7c12      	ldrb	r2, [r2, #16]
 800c300:	f107 0108 	add.w	r1, r7, #8
 800c304:	4610      	mov	r0, r2
 800c306:	4798      	blx	r3
 800c308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c30a:	e043      	b.n	800c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c30c:	6839      	ldr	r1, [r7, #0]
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fa64 	bl	800c7dc <USBD_CtlError>
            err++;
 800c314:	7afb      	ldrb	r3, [r7, #11]
 800c316:	3301      	adds	r3, #1
 800c318:	72fb      	strb	r3, [r7, #11]
          break;
 800c31a:	e03b      	b.n	800c394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c322:	695b      	ldr	r3, [r3, #20]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d00b      	beq.n	800c340 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	7c12      	ldrb	r2, [r2, #16]
 800c334:	f107 0108 	add.w	r1, r7, #8
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c33e:	e029      	b.n	800c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fa4a 	bl	800c7dc <USBD_CtlError>
            err++;
 800c348:	7afb      	ldrb	r3, [r7, #11]
 800c34a:	3301      	adds	r3, #1
 800c34c:	72fb      	strb	r3, [r7, #11]
          break;
 800c34e:	e021      	b.n	800c394 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c356:	699b      	ldr	r3, [r3, #24]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00b      	beq.n	800c374 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c362:	699b      	ldr	r3, [r3, #24]
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	7c12      	ldrb	r2, [r2, #16]
 800c368:	f107 0108 	add.w	r1, r7, #8
 800c36c:	4610      	mov	r0, r2
 800c36e:	4798      	blx	r3
 800c370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c372:	e00f      	b.n	800c394 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fa30 	bl	800c7dc <USBD_CtlError>
            err++;
 800c37c:	7afb      	ldrb	r3, [r7, #11]
 800c37e:	3301      	adds	r3, #1
 800c380:	72fb      	strb	r3, [r7, #11]
          break;
 800c382:	e007      	b.n	800c394 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c384:	6839      	ldr	r1, [r7, #0]
 800c386:	6878      	ldr	r0, [r7, #4]
 800c388:	f000 fa28 	bl	800c7dc <USBD_CtlError>
          err++;
 800c38c:	7afb      	ldrb	r3, [r7, #11]
 800c38e:	3301      	adds	r3, #1
 800c390:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c392:	bf00      	nop
      }
      break;
 800c394:	e037      	b.n	800c406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	7c1b      	ldrb	r3, [r3, #16]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d109      	bne.n	800c3b2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3a6:	f107 0208 	add.w	r2, r7, #8
 800c3aa:	4610      	mov	r0, r2
 800c3ac:	4798      	blx	r3
 800c3ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3b0:	e029      	b.n	800c406 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3b2:	6839      	ldr	r1, [r7, #0]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fa11 	bl	800c7dc <USBD_CtlError>
        err++;
 800c3ba:	7afb      	ldrb	r3, [r7, #11]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	72fb      	strb	r3, [r7, #11]
      break;
 800c3c0:	e021      	b.n	800c406 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	7c1b      	ldrb	r3, [r3, #16]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10d      	bne.n	800c3e6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d2:	f107 0208 	add.w	r2, r7, #8
 800c3d6:	4610      	mov	r0, r2
 800c3d8:	4798      	blx	r3
 800c3da:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	2207      	movs	r2, #7
 800c3e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3e4:	e00f      	b.n	800c406 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3e6:	6839      	ldr	r1, [r7, #0]
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 f9f7 	bl	800c7dc <USBD_CtlError>
        err++;
 800c3ee:	7afb      	ldrb	r3, [r7, #11]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	72fb      	strb	r3, [r7, #11]
      break;
 800c3f4:	e007      	b.n	800c406 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c3f6:	6839      	ldr	r1, [r7, #0]
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 f9ef 	bl	800c7dc <USBD_CtlError>
      err++;
 800c3fe:	7afb      	ldrb	r3, [r7, #11]
 800c400:	3301      	adds	r3, #1
 800c402:	72fb      	strb	r3, [r7, #11]
      break;
 800c404:	bf00      	nop
  }

  if (err != 0U)
 800c406:	7afb      	ldrb	r3, [r7, #11]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d11e      	bne.n	800c44a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	88db      	ldrh	r3, [r3, #6]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d016      	beq.n	800c442 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c414:	893b      	ldrh	r3, [r7, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00e      	beq.n	800c438 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	88da      	ldrh	r2, [r3, #6]
 800c41e:	893b      	ldrh	r3, [r7, #8]
 800c420:	4293      	cmp	r3, r2
 800c422:	bf28      	it	cs
 800c424:	4613      	movcs	r3, r2
 800c426:	b29b      	uxth	r3, r3
 800c428:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c42a:	893b      	ldrh	r3, [r7, #8]
 800c42c:	461a      	mov	r2, r3
 800c42e:	68f9      	ldr	r1, [r7, #12]
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 fa44 	bl	800c8be <USBD_CtlSendData>
 800c436:	e009      	b.n	800c44c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f9ce 	bl	800c7dc <USBD_CtlError>
 800c440:	e004      	b.n	800c44c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 fa95 	bl	800c972 <USBD_CtlSendStatus>
 800c448:	e000      	b.n	800c44c <USBD_GetDescriptor+0x2cc>
    return;
 800c44a:	bf00      	nop
  }
}
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop

0800c454 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	889b      	ldrh	r3, [r3, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d131      	bne.n	800c4ca <USBD_SetAddress+0x76>
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	88db      	ldrh	r3, [r3, #6]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d12d      	bne.n	800c4ca <USBD_SetAddress+0x76>
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	885b      	ldrh	r3, [r3, #2]
 800c472:	2b7f      	cmp	r3, #127	; 0x7f
 800c474:	d829      	bhi.n	800c4ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	885b      	ldrh	r3, [r3, #2]
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c480:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b03      	cmp	r3, #3
 800c48c:	d104      	bne.n	800c498 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c48e:	6839      	ldr	r1, [r7, #0]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 f9a3 	bl	800c7dc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c496:	e01d      	b.n	800c4d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	7bfa      	ldrb	r2, [r7, #15]
 800c49c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c4a0:	7bfb      	ldrb	r3, [r7, #15]
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 fecd 	bl	800d244 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 fa61 	bl	800c972 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d004      	beq.n	800c4c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2202      	movs	r2, #2
 800c4ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4be:	e009      	b.n	800c4d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4c8:	e004      	b.n	800c4d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 f985 	bl	800c7dc <USBD_CtlError>
  }
}
 800c4d2:	bf00      	nop
 800c4d4:	bf00      	nop
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	885b      	ldrh	r3, [r3, #2]
 800c4ee:	b2da      	uxtb	r2, r3
 800c4f0:	4b4c      	ldr	r3, [pc, #304]	; (800c624 <USBD_SetConfig+0x148>)
 800c4f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c4f4:	4b4b      	ldr	r3, [pc, #300]	; (800c624 <USBD_SetConfig+0x148>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d905      	bls.n	800c508 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 f96c 	bl	800c7dc <USBD_CtlError>
    return USBD_FAIL;
 800c504:	2303      	movs	r3, #3
 800c506:	e088      	b.n	800c61a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	2b02      	cmp	r3, #2
 800c512:	d002      	beq.n	800c51a <USBD_SetConfig+0x3e>
 800c514:	2b03      	cmp	r3, #3
 800c516:	d025      	beq.n	800c564 <USBD_SetConfig+0x88>
 800c518:	e071      	b.n	800c5fe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c51a:	4b42      	ldr	r3, [pc, #264]	; (800c624 <USBD_SetConfig+0x148>)
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d01c      	beq.n	800c55c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c522:	4b40      	ldr	r3, [pc, #256]	; (800c624 <USBD_SetConfig+0x148>)
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	461a      	mov	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c52c:	4b3d      	ldr	r3, [pc, #244]	; (800c624 <USBD_SetConfig+0x148>)
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	4619      	mov	r1, r3
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7ff f948 	bl	800b7c8 <USBD_SetClassConfig>
 800c538:	4603      	mov	r3, r0
 800c53a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d004      	beq.n	800c54c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c542:	6839      	ldr	r1, [r7, #0]
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 f949 	bl	800c7dc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c54a:	e065      	b.n	800c618 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fa10 	bl	800c972 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2203      	movs	r2, #3
 800c556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c55a:	e05d      	b.n	800c618 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fa08 	bl	800c972 <USBD_CtlSendStatus>
      break;
 800c562:	e059      	b.n	800c618 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c564:	4b2f      	ldr	r3, [pc, #188]	; (800c624 <USBD_SetConfig+0x148>)
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d112      	bne.n	800c592 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2202      	movs	r2, #2
 800c570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c574:	4b2b      	ldr	r3, [pc, #172]	; (800c624 <USBD_SetConfig+0x148>)
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	461a      	mov	r2, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c57e:	4b29      	ldr	r3, [pc, #164]	; (800c624 <USBD_SetConfig+0x148>)
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	4619      	mov	r1, r3
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f7ff f93b 	bl	800b800 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f9f1 	bl	800c972 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c590:	e042      	b.n	800c618 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c592:	4b24      	ldr	r3, [pc, #144]	; (800c624 <USBD_SetConfig+0x148>)
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	461a      	mov	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d02a      	beq.n	800c5f6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f7ff f929 	bl	800b800 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c5ae:	4b1d      	ldr	r3, [pc, #116]	; (800c624 <USBD_SetConfig+0x148>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5b8:	4b1a      	ldr	r3, [pc, #104]	; (800c624 <USBD_SetConfig+0x148>)
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7ff f902 	bl	800b7c8 <USBD_SetClassConfig>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00f      	beq.n	800c5ee <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c5ce:	6839      	ldr	r1, [r7, #0]
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f000 f903 	bl	800c7dc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	b2db      	uxtb	r3, r3
 800c5dc:	4619      	mov	r1, r3
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f7ff f90e 	bl	800b800 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2202      	movs	r2, #2
 800c5e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c5ec:	e014      	b.n	800c618 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f9bf 	bl	800c972 <USBD_CtlSendStatus>
      break;
 800c5f4:	e010      	b.n	800c618 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 f9bb 	bl	800c972 <USBD_CtlSendStatus>
      break;
 800c5fc:	e00c      	b.n	800c618 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c5fe:	6839      	ldr	r1, [r7, #0]
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 f8eb 	bl	800c7dc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c606:	4b07      	ldr	r3, [pc, #28]	; (800c624 <USBD_SetConfig+0x148>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	4619      	mov	r1, r3
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f7ff f8f7 	bl	800b800 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c612:	2303      	movs	r3, #3
 800c614:	73fb      	strb	r3, [r7, #15]
      break;
 800c616:	bf00      	nop
  }

  return ret;
 800c618:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	200008e0 	.word	0x200008e0

0800c628 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	88db      	ldrh	r3, [r3, #6]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d004      	beq.n	800c644 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c63a:	6839      	ldr	r1, [r7, #0]
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 f8cd 	bl	800c7dc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c642:	e023      	b.n	800c68c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b02      	cmp	r3, #2
 800c64e:	dc02      	bgt.n	800c656 <USBD_GetConfig+0x2e>
 800c650:	2b00      	cmp	r3, #0
 800c652:	dc03      	bgt.n	800c65c <USBD_GetConfig+0x34>
 800c654:	e015      	b.n	800c682 <USBD_GetConfig+0x5a>
 800c656:	2b03      	cmp	r3, #3
 800c658:	d00b      	beq.n	800c672 <USBD_GetConfig+0x4a>
 800c65a:	e012      	b.n	800c682 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	3308      	adds	r3, #8
 800c666:	2201      	movs	r2, #1
 800c668:	4619      	mov	r1, r3
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f927 	bl	800c8be <USBD_CtlSendData>
        break;
 800c670:	e00c      	b.n	800c68c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	3304      	adds	r3, #4
 800c676:	2201      	movs	r2, #1
 800c678:	4619      	mov	r1, r3
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 f91f 	bl	800c8be <USBD_CtlSendData>
        break;
 800c680:	e004      	b.n	800c68c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c682:	6839      	ldr	r1, [r7, #0]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 f8a9 	bl	800c7dc <USBD_CtlError>
        break;
 800c68a:	bf00      	nop
}
 800c68c:	bf00      	nop
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b082      	sub	sp, #8
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	3b01      	subs	r3, #1
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d81e      	bhi.n	800c6ea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	88db      	ldrh	r3, [r3, #6]
 800c6b0:	2b02      	cmp	r3, #2
 800c6b2:	d004      	beq.n	800c6be <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c6b4:	6839      	ldr	r1, [r7, #0]
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f890 	bl	800c7dc <USBD_CtlError>
        break;
 800c6bc:	e01a      	b.n	800c6f4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d005      	beq.n	800c6da <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	68db      	ldr	r3, [r3, #12]
 800c6d2:	f043 0202 	orr.w	r2, r3, #2
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	330c      	adds	r3, #12
 800c6de:	2202      	movs	r2, #2
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f8eb 	bl	800c8be <USBD_CtlSendData>
      break;
 800c6e8:	e004      	b.n	800c6f4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f875 	bl	800c7dc <USBD_CtlError>
      break;
 800c6f2:	bf00      	nop
  }
}
 800c6f4:	bf00      	nop
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	885b      	ldrh	r3, [r3, #2]
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d106      	bne.n	800c71c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2201      	movs	r2, #1
 800c712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f92b 	bl	800c972 <USBD_CtlSendStatus>
  }
}
 800c71c:	bf00      	nop
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c734:	b2db      	uxtb	r3, r3
 800c736:	3b01      	subs	r3, #1
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d80b      	bhi.n	800c754 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	885b      	ldrh	r3, [r3, #2]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d10c      	bne.n	800c75e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2200      	movs	r2, #0
 800c748:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f910 	bl	800c972 <USBD_CtlSendStatus>
      }
      break;
 800c752:	e004      	b.n	800c75e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c754:	6839      	ldr	r1, [r7, #0]
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f840 	bl	800c7dc <USBD_CtlError>
      break;
 800c75c:	e000      	b.n	800c760 <USBD_ClrFeature+0x3c>
      break;
 800c75e:	bf00      	nop
  }
}
 800c760:	bf00      	nop
 800c762:	3708      	adds	r7, #8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	781a      	ldrb	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	3301      	adds	r3, #1
 800c782:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	781a      	ldrb	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	3301      	adds	r3, #1
 800c790:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f7ff fabb 	bl	800bd0e <SWAPBYTE>
 800c798:	4603      	mov	r3, r0
 800c79a:	461a      	mov	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f7ff faae 	bl	800bd0e <SWAPBYTE>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	f7ff faa1 	bl	800bd0e <SWAPBYTE>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	80da      	strh	r2, [r3, #6]
}
 800c7d4:	bf00      	nop
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7e6:	2180      	movs	r1, #128	; 0x80
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fcc1 	bl	800d170 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fcbd 	bl	800d170 <USBD_LL_StallEP>
}
 800c7f6:	bf00      	nop
 800c7f8:	3708      	adds	r7, #8
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b086      	sub	sp, #24
 800c802:	af00      	add	r7, sp, #0
 800c804:	60f8      	str	r0, [r7, #12]
 800c806:	60b9      	str	r1, [r7, #8]
 800c808:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c80a:	2300      	movs	r3, #0
 800c80c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d036      	beq.n	800c882 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c818:	6938      	ldr	r0, [r7, #16]
 800c81a:	f000 f836 	bl	800c88a <USBD_GetLen>
 800c81e:	4603      	mov	r3, r0
 800c820:	3301      	adds	r3, #1
 800c822:	b29b      	uxth	r3, r3
 800c824:	005b      	lsls	r3, r3, #1
 800c826:	b29a      	uxth	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c82c:	7dfb      	ldrb	r3, [r7, #23]
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	4413      	add	r3, r2
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	7812      	ldrb	r2, [r2, #0]
 800c836:	701a      	strb	r2, [r3, #0]
  idx++;
 800c838:	7dfb      	ldrb	r3, [r7, #23]
 800c83a:	3301      	adds	r3, #1
 800c83c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c83e:	7dfb      	ldrb	r3, [r7, #23]
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	4413      	add	r3, r2
 800c844:	2203      	movs	r2, #3
 800c846:	701a      	strb	r2, [r3, #0]
  idx++;
 800c848:	7dfb      	ldrb	r3, [r7, #23]
 800c84a:	3301      	adds	r3, #1
 800c84c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c84e:	e013      	b.n	800c878 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	4413      	add	r3, r2
 800c856:	693a      	ldr	r2, [r7, #16]
 800c858:	7812      	ldrb	r2, [r2, #0]
 800c85a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	3301      	adds	r3, #1
 800c860:	613b      	str	r3, [r7, #16]
    idx++;
 800c862:	7dfb      	ldrb	r3, [r7, #23]
 800c864:	3301      	adds	r3, #1
 800c866:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c868:	7dfb      	ldrb	r3, [r7, #23]
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	4413      	add	r3, r2
 800c86e:	2200      	movs	r2, #0
 800c870:	701a      	strb	r2, [r3, #0]
    idx++;
 800c872:	7dfb      	ldrb	r3, [r7, #23]
 800c874:	3301      	adds	r3, #1
 800c876:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d1e7      	bne.n	800c850 <USBD_GetString+0x52>
 800c880:	e000      	b.n	800c884 <USBD_GetString+0x86>
    return;
 800c882:	bf00      	nop
  }
}
 800c884:	3718      	adds	r7, #24
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c892:	2300      	movs	r3, #0
 800c894:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c89a:	e005      	b.n	800c8a8 <USBD_GetLen+0x1e>
  {
    len++;
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1f5      	bne.n	800c89c <USBD_GetLen+0x12>
  }

  return len;
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b084      	sub	sp, #16
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	60f8      	str	r0, [r7, #12]
 800c8c6:	60b9      	str	r1, [r7, #8]
 800c8c8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	2202      	movs	r2, #2
 800c8ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f000 fccc 	bl	800d282 <USBD_LL_Transmit>

  return USBD_OK;
 800c8ea:	2300      	movs	r3, #0
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	60b9      	str	r1, [r7, #8]
 800c8fe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	2100      	movs	r1, #0
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f000 fcbb 	bl	800d282 <USBD_LL_Transmit>

  return USBD_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	60f8      	str	r0, [r7, #12]
 800c91e:	60b9      	str	r1, [r7, #8]
 800c920:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2203      	movs	r2, #3
 800c926:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	68ba      	ldr	r2, [r7, #8]
 800c93e:	2100      	movs	r1, #0
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f000 fcbf 	bl	800d2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	2100      	movs	r1, #0
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f000 fcae 	bl	800d2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c972:	b580      	push	{r7, lr}
 800c974:	b082      	sub	sp, #8
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2204      	movs	r2, #4
 800c97e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c982:	2300      	movs	r3, #0
 800c984:	2200      	movs	r2, #0
 800c986:	2100      	movs	r1, #0
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fc7a 	bl	800d282 <USBD_LL_Transmit>

  return USBD_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2205      	movs	r2, #5
 800c9a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fc88 	bl	800d2c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
	...

0800c9c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	4912      	ldr	r1, [pc, #72]	; (800ca10 <MX_USB_DEVICE_Init+0x50>)
 800c9c8:	4812      	ldr	r0, [pc, #72]	; (800ca14 <MX_USB_DEVICE_Init+0x54>)
 800c9ca:	f7fe fe8f 	bl	800b6ec <USBD_Init>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d001      	beq.n	800c9d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c9d4:	f7f6 fc68 	bl	80032a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c9d8:	490f      	ldr	r1, [pc, #60]	; (800ca18 <MX_USB_DEVICE_Init+0x58>)
 800c9da:	480e      	ldr	r0, [pc, #56]	; (800ca14 <MX_USB_DEVICE_Init+0x54>)
 800c9dc:	f7fe feb6 	bl	800b74c <USBD_RegisterClass>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d001      	beq.n	800c9ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c9e6:	f7f6 fc5f 	bl	80032a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9ea:	490c      	ldr	r1, [pc, #48]	; (800ca1c <MX_USB_DEVICE_Init+0x5c>)
 800c9ec:	4809      	ldr	r0, [pc, #36]	; (800ca14 <MX_USB_DEVICE_Init+0x54>)
 800c9ee:	f7fe fe07 	bl	800b600 <USBD_CDC_RegisterInterface>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d001      	beq.n	800c9fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c9f8:	f7f6 fc56 	bl	80032a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9fc:	4805      	ldr	r0, [pc, #20]	; (800ca14 <MX_USB_DEVICE_Init+0x54>)
 800c9fe:	f7fe fecc 	bl	800b79a <USBD_Start>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ca08:	f7f6 fc4e 	bl	80032a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ca0c:	bf00      	nop
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	20000130 	.word	0x20000130
 800ca14:	20000b14 	.word	0x20000b14
 800ca18:	20000018 	.word	0x20000018
 800ca1c:	2000011c 	.word	0x2000011c

0800ca20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ca24:	2200      	movs	r2, #0
 800ca26:	4905      	ldr	r1, [pc, #20]	; (800ca3c <CDC_Init_FS+0x1c>)
 800ca28:	4805      	ldr	r0, [pc, #20]	; (800ca40 <CDC_Init_FS+0x20>)
 800ca2a:	f7fe fdfe 	bl	800b62a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ca2e:	4905      	ldr	r1, [pc, #20]	; (800ca44 <CDC_Init_FS+0x24>)
 800ca30:	4803      	ldr	r0, [pc, #12]	; (800ca40 <CDC_Init_FS+0x20>)
 800ca32:	f7fe fe18 	bl	800b666 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	200015e4 	.word	0x200015e4
 800ca40:	20000b14 	.word	0x20000b14
 800ca44:	20000de4 	.word	0x20000de4

0800ca48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	6039      	str	r1, [r7, #0]
 800ca62:	71fb      	strb	r3, [r7, #7]
 800ca64:	4613      	mov	r3, r2
 800ca66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca68:	79fb      	ldrb	r3, [r7, #7]
 800ca6a:	2b23      	cmp	r3, #35	; 0x23
 800ca6c:	d84a      	bhi.n	800cb04 <CDC_Control_FS+0xac>
 800ca6e:	a201      	add	r2, pc, #4	; (adr r2, 800ca74 <CDC_Control_FS+0x1c>)
 800ca70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca74:	0800cb05 	.word	0x0800cb05
 800ca78:	0800cb05 	.word	0x0800cb05
 800ca7c:	0800cb05 	.word	0x0800cb05
 800ca80:	0800cb05 	.word	0x0800cb05
 800ca84:	0800cb05 	.word	0x0800cb05
 800ca88:	0800cb05 	.word	0x0800cb05
 800ca8c:	0800cb05 	.word	0x0800cb05
 800ca90:	0800cb05 	.word	0x0800cb05
 800ca94:	0800cb05 	.word	0x0800cb05
 800ca98:	0800cb05 	.word	0x0800cb05
 800ca9c:	0800cb05 	.word	0x0800cb05
 800caa0:	0800cb05 	.word	0x0800cb05
 800caa4:	0800cb05 	.word	0x0800cb05
 800caa8:	0800cb05 	.word	0x0800cb05
 800caac:	0800cb05 	.word	0x0800cb05
 800cab0:	0800cb05 	.word	0x0800cb05
 800cab4:	0800cb05 	.word	0x0800cb05
 800cab8:	0800cb05 	.word	0x0800cb05
 800cabc:	0800cb05 	.word	0x0800cb05
 800cac0:	0800cb05 	.word	0x0800cb05
 800cac4:	0800cb05 	.word	0x0800cb05
 800cac8:	0800cb05 	.word	0x0800cb05
 800cacc:	0800cb05 	.word	0x0800cb05
 800cad0:	0800cb05 	.word	0x0800cb05
 800cad4:	0800cb05 	.word	0x0800cb05
 800cad8:	0800cb05 	.word	0x0800cb05
 800cadc:	0800cb05 	.word	0x0800cb05
 800cae0:	0800cb05 	.word	0x0800cb05
 800cae4:	0800cb05 	.word	0x0800cb05
 800cae8:	0800cb05 	.word	0x0800cb05
 800caec:	0800cb05 	.word	0x0800cb05
 800caf0:	0800cb05 	.word	0x0800cb05
 800caf4:	0800cb05 	.word	0x0800cb05
 800caf8:	0800cb05 	.word	0x0800cb05
 800cafc:	0800cb05 	.word	0x0800cb05
 800cb00:	0800cb05 	.word	0x0800cb05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb04:	bf00      	nop
  }

  return (USBD_OK);
 800cb06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	370c      	adds	r7, #12
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cb1e:	6879      	ldr	r1, [r7, #4]
 800cb20:	4808      	ldr	r0, [pc, #32]	; (800cb44 <CDC_Receive_FS+0x30>)
 800cb22:	f7fe fda0 	bl	800b666 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cb26:	4807      	ldr	r0, [pc, #28]	; (800cb44 <CDC_Receive_FS+0x30>)
 800cb28:	f7fe fdb6 	bl	800b698 <USBD_CDC_ReceivePacket>
  receiveData(Buf, Len[0]);
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7f6 fd32 	bl	800359c <receiveData>
  return (USBD_OK);
 800cb38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3708      	adds	r7, #8
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	20000b14 	.word	0x20000b14

0800cb48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b087      	sub	sp, #28
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	4613      	mov	r3, r2
 800cb54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cb56:	2300      	movs	r3, #0
 800cb58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cb5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	371c      	adds	r7, #28
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr
	...

0800cb6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b083      	sub	sp, #12
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	4603      	mov	r3, r0
 800cb74:	6039      	str	r1, [r7, #0]
 800cb76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	2212      	movs	r2, #18
 800cb7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb7e:	4b03      	ldr	r3, [pc, #12]	; (800cb8c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr
 800cb8c:	2000014c 	.word	0x2000014c

0800cb90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	6039      	str	r1, [r7, #0]
 800cb9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	2204      	movs	r2, #4
 800cba0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cba2:	4b03      	ldr	r3, [pc, #12]	; (800cbb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr
 800cbb0:	20000160 	.word	0x20000160

0800cbb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	4603      	mov	r3, r0
 800cbbc:	6039      	str	r1, [r7, #0]
 800cbbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbc0:	79fb      	ldrb	r3, [r7, #7]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d105      	bne.n	800cbd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	4907      	ldr	r1, [pc, #28]	; (800cbe8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cbca:	4808      	ldr	r0, [pc, #32]	; (800cbec <USBD_FS_ProductStrDescriptor+0x38>)
 800cbcc:	f7ff fe17 	bl	800c7fe <USBD_GetString>
 800cbd0:	e004      	b.n	800cbdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	4904      	ldr	r1, [pc, #16]	; (800cbe8 <USBD_FS_ProductStrDescriptor+0x34>)
 800cbd6:	4805      	ldr	r0, [pc, #20]	; (800cbec <USBD_FS_ProductStrDescriptor+0x38>)
 800cbd8:	f7ff fe11 	bl	800c7fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbdc:	4b02      	ldr	r3, [pc, #8]	; (800cbe8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	20001de4 	.word	0x20001de4
 800cbec:	0800f820 	.word	0x0800f820

0800cbf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	6039      	str	r1, [r7, #0]
 800cbfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cbfc:	683a      	ldr	r2, [r7, #0]
 800cbfe:	4904      	ldr	r1, [pc, #16]	; (800cc10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc00:	4804      	ldr	r0, [pc, #16]	; (800cc14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc02:	f7ff fdfc 	bl	800c7fe <USBD_GetString>
  return USBD_StrDesc;
 800cc06:	4b02      	ldr	r3, [pc, #8]	; (800cc10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	20001de4 	.word	0x20001de4
 800cc14:	0800f838 	.word	0x0800f838

0800cc18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	4603      	mov	r3, r0
 800cc20:	6039      	str	r1, [r7, #0]
 800cc22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	221a      	movs	r2, #26
 800cc28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc2a:	f000 f843 	bl	800ccb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc2e:	4b02      	ldr	r3, [pc, #8]	; (800cc38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	20000164 	.word	0x20000164

0800cc3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	b082      	sub	sp, #8
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	6039      	str	r1, [r7, #0]
 800cc46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc48:	79fb      	ldrb	r3, [r7, #7]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d105      	bne.n	800cc5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	4907      	ldr	r1, [pc, #28]	; (800cc70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc52:	4808      	ldr	r0, [pc, #32]	; (800cc74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc54:	f7ff fdd3 	bl	800c7fe <USBD_GetString>
 800cc58:	e004      	b.n	800cc64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc5a:	683a      	ldr	r2, [r7, #0]
 800cc5c:	4904      	ldr	r1, [pc, #16]	; (800cc70 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc5e:	4805      	ldr	r0, [pc, #20]	; (800cc74 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc60:	f7ff fdcd 	bl	800c7fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc64:	4b02      	ldr	r3, [pc, #8]	; (800cc70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	20001de4 	.word	0x20001de4
 800cc74:	0800f84c 	.word	0x0800f84c

0800cc78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	4603      	mov	r3, r0
 800cc80:	6039      	str	r1, [r7, #0]
 800cc82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d105      	bne.n	800cc96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	4907      	ldr	r1, [pc, #28]	; (800ccac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc8e:	4808      	ldr	r0, [pc, #32]	; (800ccb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc90:	f7ff fdb5 	bl	800c7fe <USBD_GetString>
 800cc94:	e004      	b.n	800cca0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	4904      	ldr	r1, [pc, #16]	; (800ccac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cc9a:	4805      	ldr	r0, [pc, #20]	; (800ccb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cc9c:	f7ff fdaf 	bl	800c7fe <USBD_GetString>
  }
  return USBD_StrDesc;
 800cca0:	4b02      	ldr	r3, [pc, #8]	; (800ccac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	20001de4 	.word	0x20001de4
 800ccb0:	0800f858 	.word	0x0800f858

0800ccb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccba:	4b0f      	ldr	r3, [pc, #60]	; (800ccf8 <Get_SerialNum+0x44>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ccc0:	4b0e      	ldr	r3, [pc, #56]	; (800ccfc <Get_SerialNum+0x48>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccc6:	4b0e      	ldr	r3, [pc, #56]	; (800cd00 <Get_SerialNum+0x4c>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d009      	beq.n	800ccee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ccda:	2208      	movs	r2, #8
 800ccdc:	4909      	ldr	r1, [pc, #36]	; (800cd04 <Get_SerialNum+0x50>)
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f000 f814 	bl	800cd0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cce4:	2204      	movs	r2, #4
 800cce6:	4908      	ldr	r1, [pc, #32]	; (800cd08 <Get_SerialNum+0x54>)
 800cce8:	68b8      	ldr	r0, [r7, #8]
 800ccea:	f000 f80f 	bl	800cd0c <IntToUnicode>
  }
}
 800ccee:	bf00      	nop
 800ccf0:	3710      	adds	r7, #16
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}
 800ccf6:	bf00      	nop
 800ccf8:	1fff7a10 	.word	0x1fff7a10
 800ccfc:	1fff7a14 	.word	0x1fff7a14
 800cd00:	1fff7a18 	.word	0x1fff7a18
 800cd04:	20000166 	.word	0x20000166
 800cd08:	20000176 	.word	0x20000176

0800cd0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b087      	sub	sp, #28
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	4613      	mov	r3, r2
 800cd18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd1e:	2300      	movs	r3, #0
 800cd20:	75fb      	strb	r3, [r7, #23]
 800cd22:	e027      	b.n	800cd74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	0f1b      	lsrs	r3, r3, #28
 800cd28:	2b09      	cmp	r3, #9
 800cd2a:	d80b      	bhi.n	800cd44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	0f1b      	lsrs	r3, r3, #28
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	7dfb      	ldrb	r3, [r7, #23]
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	4619      	mov	r1, r3
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	440b      	add	r3, r1
 800cd3c:	3230      	adds	r2, #48	; 0x30
 800cd3e:	b2d2      	uxtb	r2, r2
 800cd40:	701a      	strb	r2, [r3, #0]
 800cd42:	e00a      	b.n	800cd5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	0f1b      	lsrs	r3, r3, #28
 800cd48:	b2da      	uxtb	r2, r3
 800cd4a:	7dfb      	ldrb	r3, [r7, #23]
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	4619      	mov	r1, r3
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	440b      	add	r3, r1
 800cd54:	3237      	adds	r2, #55	; 0x37
 800cd56:	b2d2      	uxtb	r2, r2
 800cd58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	011b      	lsls	r3, r3, #4
 800cd5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd60:	7dfb      	ldrb	r3, [r7, #23]
 800cd62:	005b      	lsls	r3, r3, #1
 800cd64:	3301      	adds	r3, #1
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	4413      	add	r3, r2
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
 800cd70:	3301      	adds	r3, #1
 800cd72:	75fb      	strb	r3, [r7, #23]
 800cd74:	7dfa      	ldrb	r2, [r7, #23]
 800cd76:	79fb      	ldrb	r3, [r7, #7]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d3d3      	bcc.n	800cd24 <IntToUnicode+0x18>
  }
}
 800cd7c:	bf00      	nop
 800cd7e:	bf00      	nop
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
	...

0800cd8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08a      	sub	sp, #40	; 0x28
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cd94:	f107 0314 	add.w	r3, r7, #20
 800cd98:	2200      	movs	r2, #0
 800cd9a:	601a      	str	r2, [r3, #0]
 800cd9c:	605a      	str	r2, [r3, #4]
 800cd9e:	609a      	str	r2, [r3, #8]
 800cda0:	60da      	str	r2, [r3, #12]
 800cda2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdac:	d13a      	bne.n	800ce24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdae:	2300      	movs	r3, #0
 800cdb0:	613b      	str	r3, [r7, #16]
 800cdb2:	4b1e      	ldr	r3, [pc, #120]	; (800ce2c <HAL_PCD_MspInit+0xa0>)
 800cdb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdb6:	4a1d      	ldr	r2, [pc, #116]	; (800ce2c <HAL_PCD_MspInit+0xa0>)
 800cdb8:	f043 0301 	orr.w	r3, r3, #1
 800cdbc:	6313      	str	r3, [r2, #48]	; 0x30
 800cdbe:	4b1b      	ldr	r3, [pc, #108]	; (800ce2c <HAL_PCD_MspInit+0xa0>)
 800cdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc2:	f003 0301 	and.w	r3, r3, #1
 800cdc6:	613b      	str	r3, [r7, #16]
 800cdc8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cdca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cdce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cddc:	230a      	movs	r3, #10
 800cdde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cde0:	f107 0314 	add.w	r3, r7, #20
 800cde4:	4619      	mov	r1, r3
 800cde6:	4812      	ldr	r0, [pc, #72]	; (800ce30 <HAL_PCD_MspInit+0xa4>)
 800cde8:	f7f8 fc7e 	bl	80056e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cdec:	4b0f      	ldr	r3, [pc, #60]	; (800ce2c <HAL_PCD_MspInit+0xa0>)
 800cdee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdf0:	4a0e      	ldr	r2, [pc, #56]	; (800ce2c <HAL_PCD_MspInit+0xa0>)
 800cdf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdf6:	6353      	str	r3, [r2, #52]	; 0x34
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	60fb      	str	r3, [r7, #12]
 800cdfc:	4b0b      	ldr	r3, [pc, #44]	; (800ce2c <HAL_PCD_MspInit+0xa0>)
 800cdfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce00:	4a0a      	ldr	r2, [pc, #40]	; (800ce2c <HAL_PCD_MspInit+0xa0>)
 800ce02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce06:	6453      	str	r3, [r2, #68]	; 0x44
 800ce08:	4b08      	ldr	r3, [pc, #32]	; (800ce2c <HAL_PCD_MspInit+0xa0>)
 800ce0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce10:	60fb      	str	r3, [r7, #12]
 800ce12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ce14:	2200      	movs	r2, #0
 800ce16:	2100      	movs	r1, #0
 800ce18:	2043      	movs	r0, #67	; 0x43
 800ce1a:	f7f8 f82c 	bl	8004e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ce1e:	2043      	movs	r0, #67	; 0x43
 800ce20:	f7f8 f845 	bl	8004eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ce24:	bf00      	nop
 800ce26:	3728      	adds	r7, #40	; 0x28
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	40023800 	.word	0x40023800
 800ce30:	40020000 	.word	0x40020000

0800ce34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ce48:	4619      	mov	r1, r3
 800ce4a:	4610      	mov	r0, r2
 800ce4c:	f7fe fcf0 	bl	800b830 <USBD_LL_SetupStage>
}
 800ce50:	bf00      	nop
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	460b      	mov	r3, r1
 800ce62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800ce6a:	78fa      	ldrb	r2, [r7, #3]
 800ce6c:	6879      	ldr	r1, [r7, #4]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	00db      	lsls	r3, r3, #3
 800ce72:	1a9b      	subs	r3, r3, r2
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	440b      	add	r3, r1
 800ce78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	78fb      	ldrb	r3, [r7, #3]
 800ce80:	4619      	mov	r1, r3
 800ce82:	f7fe fd2a 	bl	800b8da <USBD_LL_DataOutStage>
}
 800ce86:	bf00      	nop
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b082      	sub	sp, #8
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	460b      	mov	r3, r1
 800ce98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cea0:	78fa      	ldrb	r2, [r7, #3]
 800cea2:	6879      	ldr	r1, [r7, #4]
 800cea4:	4613      	mov	r3, r2
 800cea6:	00db      	lsls	r3, r3, #3
 800cea8:	1a9b      	subs	r3, r3, r2
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	440b      	add	r3, r1
 800ceae:	3348      	adds	r3, #72	; 0x48
 800ceb0:	681a      	ldr	r2, [r3, #0]
 800ceb2:	78fb      	ldrb	r3, [r7, #3]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	f7fe fd73 	bl	800b9a0 <USBD_LL_DataInStage>
}
 800ceba:	bf00      	nop
 800cebc:	3708      	adds	r7, #8
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b082      	sub	sp, #8
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7fe fe87 	bl	800bbe4 <USBD_LL_SOF>
}
 800ced6:	bf00      	nop
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b084      	sub	sp, #16
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cee6:	2301      	movs	r3, #1
 800cee8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	68db      	ldr	r3, [r3, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d102      	bne.n	800cef8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cef2:	2300      	movs	r3, #0
 800cef4:	73fb      	strb	r3, [r7, #15]
 800cef6:	e008      	b.n	800cf0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d102      	bne.n	800cf06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cf00:	2301      	movs	r3, #1
 800cf02:	73fb      	strb	r3, [r7, #15]
 800cf04:	e001      	b.n	800cf0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cf06:	f7f6 f9cf 	bl	80032a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf10:	7bfa      	ldrb	r2, [r7, #15]
 800cf12:	4611      	mov	r1, r2
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fe fe27 	bl	800bb68 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7fe fdd3 	bl	800bacc <USBD_LL_Reset>
}
 800cf26:	bf00      	nop
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
	...

0800cf30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b082      	sub	sp, #8
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fe fe22 	bl	800bb88 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	6812      	ldr	r2, [r2, #0]
 800cf52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cf56:	f043 0301 	orr.w	r3, r3, #1
 800cf5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a1b      	ldr	r3, [r3, #32]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d005      	beq.n	800cf70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf64:	4b04      	ldr	r3, [pc, #16]	; (800cf78 <HAL_PCD_SuspendCallback+0x48>)
 800cf66:	691b      	ldr	r3, [r3, #16]
 800cf68:	4a03      	ldr	r2, [pc, #12]	; (800cf78 <HAL_PCD_SuspendCallback+0x48>)
 800cf6a:	f043 0306 	orr.w	r3, r3, #6
 800cf6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf70:	bf00      	nop
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	e000ed00 	.word	0xe000ed00

0800cf7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fe fe12 	bl	800bbb4 <USBD_LL_Resume>
}
 800cf90:	bf00      	nop
 800cf92:	3708      	adds	r7, #8
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b082      	sub	sp, #8
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cfaa:	78fa      	ldrb	r2, [r7, #3]
 800cfac:	4611      	mov	r1, r2
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fe fe60 	bl	800bc74 <USBD_LL_IsoOUTIncomplete>
}
 800cfb4:	bf00      	nop
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cfce:	78fa      	ldrb	r2, [r7, #3]
 800cfd0:	4611      	mov	r1, r2
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe fe28 	bl	800bc28 <USBD_LL_IsoINIncomplete>
}
 800cfd8:	bf00      	nop
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}

0800cfe0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b082      	sub	sp, #8
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fe fe66 	bl	800bcc0 <USBD_LL_DevConnected>
}
 800cff4:	bf00      	nop
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fe fe63 	bl	800bcd6 <USBD_LL_DevDisconnected>
}
 800d010:	bf00      	nop
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d13c      	bne.n	800d0a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d028:	4a20      	ldr	r2, [pc, #128]	; (800d0ac <USBD_LL_Init+0x94>)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a1e      	ldr	r2, [pc, #120]	; (800d0ac <USBD_LL_Init+0x94>)
 800d034:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d038:	4b1c      	ldr	r3, [pc, #112]	; (800d0ac <USBD_LL_Init+0x94>)
 800d03a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d03e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d040:	4b1a      	ldr	r3, [pc, #104]	; (800d0ac <USBD_LL_Init+0x94>)
 800d042:	2204      	movs	r2, #4
 800d044:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d046:	4b19      	ldr	r3, [pc, #100]	; (800d0ac <USBD_LL_Init+0x94>)
 800d048:	2202      	movs	r2, #2
 800d04a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d04c:	4b17      	ldr	r3, [pc, #92]	; (800d0ac <USBD_LL_Init+0x94>)
 800d04e:	2200      	movs	r2, #0
 800d050:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d052:	4b16      	ldr	r3, [pc, #88]	; (800d0ac <USBD_LL_Init+0x94>)
 800d054:	2202      	movs	r2, #2
 800d056:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d058:	4b14      	ldr	r3, [pc, #80]	; (800d0ac <USBD_LL_Init+0x94>)
 800d05a:	2200      	movs	r2, #0
 800d05c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d05e:	4b13      	ldr	r3, [pc, #76]	; (800d0ac <USBD_LL_Init+0x94>)
 800d060:	2200      	movs	r2, #0
 800d062:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d064:	4b11      	ldr	r3, [pc, #68]	; (800d0ac <USBD_LL_Init+0x94>)
 800d066:	2200      	movs	r2, #0
 800d068:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d06a:	4b10      	ldr	r3, [pc, #64]	; (800d0ac <USBD_LL_Init+0x94>)
 800d06c:	2200      	movs	r2, #0
 800d06e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d070:	4b0e      	ldr	r3, [pc, #56]	; (800d0ac <USBD_LL_Init+0x94>)
 800d072:	2200      	movs	r2, #0
 800d074:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d076:	480d      	ldr	r0, [pc, #52]	; (800d0ac <USBD_LL_Init+0x94>)
 800d078:	f7f8 fd27 	bl	8005aca <HAL_PCD_Init>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d082:	f7f6 f911 	bl	80032a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d086:	2180      	movs	r1, #128	; 0x80
 800d088:	4808      	ldr	r0, [pc, #32]	; (800d0ac <USBD_LL_Init+0x94>)
 800d08a:	f7f9 fe84 	bl	8006d96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d08e:	2240      	movs	r2, #64	; 0x40
 800d090:	2100      	movs	r1, #0
 800d092:	4806      	ldr	r0, [pc, #24]	; (800d0ac <USBD_LL_Init+0x94>)
 800d094:	f7f9 fe38 	bl	8006d08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d098:	2280      	movs	r2, #128	; 0x80
 800d09a:	2101      	movs	r1, #1
 800d09c:	4803      	ldr	r0, [pc, #12]	; (800d0ac <USBD_LL_Init+0x94>)
 800d09e:	f7f9 fe33 	bl	8006d08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3708      	adds	r7, #8
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	20001fe4 	.word	0x20001fe4

0800d0b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b084      	sub	sp, #16
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7f8 fe1c 	bl	8005d04 <HAL_PCD_Start>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0d0:	7bfb      	ldrb	r3, [r7, #15]
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f000 f942 	bl	800d35c <USBD_Get_USB_Status>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b084      	sub	sp, #16
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	4608      	mov	r0, r1
 800d0f0:	4611      	mov	r1, r2
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	70fb      	strb	r3, [r7, #3]
 800d0f8:	460b      	mov	r3, r1
 800d0fa:	70bb      	strb	r3, [r7, #2]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d100:	2300      	movs	r3, #0
 800d102:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d104:	2300      	movs	r3, #0
 800d106:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d10e:	78bb      	ldrb	r3, [r7, #2]
 800d110:	883a      	ldrh	r2, [r7, #0]
 800d112:	78f9      	ldrb	r1, [r7, #3]
 800d114:	f7f9 fa00 	bl	8006518 <HAL_PCD_EP_Open>
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d11c:	7bfb      	ldrb	r3, [r7, #15]
 800d11e:	4618      	mov	r0, r3
 800d120:	f000 f91c 	bl	800d35c <USBD_Get_USB_Status>
 800d124:	4603      	mov	r3, r0
 800d126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d128:	7bbb      	ldrb	r3, [r7, #14]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3710      	adds	r7, #16
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}

0800d132 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b084      	sub	sp, #16
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	460b      	mov	r3, r1
 800d13c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d14c:	78fa      	ldrb	r2, [r7, #3]
 800d14e:	4611      	mov	r1, r2
 800d150:	4618      	mov	r0, r3
 800d152:	f7f9 fa49 	bl	80065e8 <HAL_PCD_EP_Close>
 800d156:	4603      	mov	r3, r0
 800d158:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d15a:	7bfb      	ldrb	r3, [r7, #15]
 800d15c:	4618      	mov	r0, r3
 800d15e:	f000 f8fd 	bl	800d35c <USBD_Get_USB_Status>
 800d162:	4603      	mov	r3, r0
 800d164:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d166:	7bbb      	ldrb	r3, [r7, #14]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d180:	2300      	movs	r3, #0
 800d182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d18a:	78fa      	ldrb	r2, [r7, #3]
 800d18c:	4611      	mov	r1, r2
 800d18e:	4618      	mov	r0, r3
 800d190:	f7f9 fb21 	bl	80067d6 <HAL_PCD_EP_SetStall>
 800d194:	4603      	mov	r3, r0
 800d196:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d198:	7bfb      	ldrb	r3, [r7, #15]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 f8de 	bl	800d35c <USBD_Get_USB_Status>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b084      	sub	sp, #16
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1c8:	78fa      	ldrb	r2, [r7, #3]
 800d1ca:	4611      	mov	r1, r2
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7f9 fb66 	bl	800689e <HAL_PCD_EP_ClrStall>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1d6:	7bfb      	ldrb	r3, [r7, #15]
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f000 f8bf 	bl	800d35c <USBD_Get_USB_Status>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3710      	adds	r7, #16
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b085      	sub	sp, #20
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d204:	2b00      	cmp	r3, #0
 800d206:	da0b      	bge.n	800d220 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d208:	78fb      	ldrb	r3, [r7, #3]
 800d20a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d20e:	68f9      	ldr	r1, [r7, #12]
 800d210:	4613      	mov	r3, r2
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	1a9b      	subs	r3, r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	440b      	add	r3, r1
 800d21a:	333e      	adds	r3, #62	; 0x3e
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	e00b      	b.n	800d238 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d220:	78fb      	ldrb	r3, [r7, #3]
 800d222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d226:	68f9      	ldr	r1, [r7, #12]
 800d228:	4613      	mov	r3, r2
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	1a9b      	subs	r3, r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	440b      	add	r3, r1
 800d232:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d236:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3714      	adds	r7, #20
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	460b      	mov	r3, r1
 800d24e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d250:	2300      	movs	r3, #0
 800d252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d254:	2300      	movs	r3, #0
 800d256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d25e:	78fa      	ldrb	r2, [r7, #3]
 800d260:	4611      	mov	r1, r2
 800d262:	4618      	mov	r0, r3
 800d264:	f7f9 f933 	bl	80064ce <HAL_PCD_SetAddress>
 800d268:	4603      	mov	r3, r0
 800d26a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 f874 	bl	800d35c <USBD_Get_USB_Status>
 800d274:	4603      	mov	r3, r0
 800d276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d278:	7bbb      	ldrb	r3, [r7, #14]
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3710      	adds	r7, #16
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d282:	b580      	push	{r7, lr}
 800d284:	b086      	sub	sp, #24
 800d286:	af00      	add	r7, sp, #0
 800d288:	60f8      	str	r0, [r7, #12]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	603b      	str	r3, [r7, #0]
 800d28e:	460b      	mov	r3, r1
 800d290:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d296:	2300      	movs	r3, #0
 800d298:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d2a0:	7af9      	ldrb	r1, [r7, #11]
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	687a      	ldr	r2, [r7, #4]
 800d2a6:	f7f9 fa4c 	bl	8006742 <HAL_PCD_EP_Transmit>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2ae:	7dfb      	ldrb	r3, [r7, #23]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 f853 	bl	800d35c <USBD_Get_USB_Status>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3718      	adds	r7, #24
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b086      	sub	sp, #24
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	607a      	str	r2, [r7, #4]
 800d2ce:	603b      	str	r3, [r7, #0]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d2e2:	7af9      	ldrb	r1, [r7, #11]
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	f7f9 f9c8 	bl	800667c <HAL_PCD_EP_Receive>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2f0:	7dfb      	ldrb	r3, [r7, #23]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 f832 	bl	800d35c <USBD_Get_USB_Status>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3718      	adds	r7, #24
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}

0800d306 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b082      	sub	sp, #8
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	460b      	mov	r3, r1
 800d310:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d318:	78fa      	ldrb	r2, [r7, #3]
 800d31a:	4611      	mov	r1, r2
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7f9 f9f8 	bl	8006712 <HAL_PCD_EP_GetRxCount>
 800d322:	4603      	mov	r3, r0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d334:	4b03      	ldr	r3, [pc, #12]	; (800d344 <USBD_static_malloc+0x18>)
}
 800d336:	4618      	mov	r0, r3
 800d338:	370c      	adds	r7, #12
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	200008e4 	.word	0x200008e4

0800d348 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]

}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr

0800d35c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	4603      	mov	r3, r0
 800d364:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d36a:	79fb      	ldrb	r3, [r7, #7]
 800d36c:	2b03      	cmp	r3, #3
 800d36e:	d817      	bhi.n	800d3a0 <USBD_Get_USB_Status+0x44>
 800d370:	a201      	add	r2, pc, #4	; (adr r2, 800d378 <USBD_Get_USB_Status+0x1c>)
 800d372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d376:	bf00      	nop
 800d378:	0800d389 	.word	0x0800d389
 800d37c:	0800d38f 	.word	0x0800d38f
 800d380:	0800d395 	.word	0x0800d395
 800d384:	0800d39b 	.word	0x0800d39b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d388:	2300      	movs	r3, #0
 800d38a:	73fb      	strb	r3, [r7, #15]
    break;
 800d38c:	e00b      	b.n	800d3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d38e:	2303      	movs	r3, #3
 800d390:	73fb      	strb	r3, [r7, #15]
    break;
 800d392:	e008      	b.n	800d3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d394:	2301      	movs	r3, #1
 800d396:	73fb      	strb	r3, [r7, #15]
    break;
 800d398:	e005      	b.n	800d3a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d39a:	2303      	movs	r3, #3
 800d39c:	73fb      	strb	r3, [r7, #15]
    break;
 800d39e:	e002      	b.n	800d3a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d3a0:	2303      	movs	r3, #3
 800d3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d3a4:	bf00      	nop
  }
  return usb_status;
 800d3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3714      	adds	r7, #20
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <_ZdlPv>:
 800d3b4:	f002 b8c4 	b.w	800f540 <free>

0800d3b8 <_Znwj>:
 800d3b8:	2801      	cmp	r0, #1
 800d3ba:	bf38      	it	cc
 800d3bc:	2001      	movcc	r0, #1
 800d3be:	b510      	push	{r4, lr}
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f002 f8b4 	bl	800f530 <malloc>
 800d3c8:	b930      	cbnz	r0, 800d3d8 <_Znwj+0x20>
 800d3ca:	f000 f80d 	bl	800d3e8 <_ZSt15get_new_handlerv>
 800d3ce:	b908      	cbnz	r0, 800d3d4 <_Znwj+0x1c>
 800d3d0:	f002 f87c 	bl	800f4cc <abort>
 800d3d4:	4780      	blx	r0
 800d3d6:	e7f4      	b.n	800d3c2 <_Znwj+0xa>
 800d3d8:	bd10      	pop	{r4, pc}

0800d3da <_ZSt17__throw_bad_allocv>:
 800d3da:	b508      	push	{r3, lr}
 800d3dc:	f002 f876 	bl	800f4cc <abort>

0800d3e0 <_ZSt20__throw_length_errorPKc>:
 800d3e0:	b508      	push	{r3, lr}
 800d3e2:	f002 f873 	bl	800f4cc <abort>
	...

0800d3e8 <_ZSt15get_new_handlerv>:
 800d3e8:	4b02      	ldr	r3, [pc, #8]	; (800d3f4 <_ZSt15get_new_handlerv+0xc>)
 800d3ea:	6818      	ldr	r0, [r3, #0]
 800d3ec:	f3bf 8f5b 	dmb	ish
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	20000b04 	.word	0x20000b04

0800d3f8 <cos>:
 800d3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3fa:	ec53 2b10 	vmov	r2, r3, d0
 800d3fe:	4824      	ldr	r0, [pc, #144]	; (800d490 <cos+0x98>)
 800d400:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d404:	4281      	cmp	r1, r0
 800d406:	dc06      	bgt.n	800d416 <cos+0x1e>
 800d408:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800d488 <cos+0x90>
 800d40c:	f000 fe98 	bl	800e140 <__kernel_cos>
 800d410:	ec51 0b10 	vmov	r0, r1, d0
 800d414:	e007      	b.n	800d426 <cos+0x2e>
 800d416:	481f      	ldr	r0, [pc, #124]	; (800d494 <cos+0x9c>)
 800d418:	4281      	cmp	r1, r0
 800d41a:	dd09      	ble.n	800d430 <cos+0x38>
 800d41c:	ee10 0a10 	vmov	r0, s0
 800d420:	4619      	mov	r1, r3
 800d422:	f7f2 fed5 	bl	80001d0 <__aeabi_dsub>
 800d426:	ec41 0b10 	vmov	d0, r0, r1
 800d42a:	b005      	add	sp, #20
 800d42c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d430:	4668      	mov	r0, sp
 800d432:	f000 fa89 	bl	800d948 <__ieee754_rem_pio2>
 800d436:	f000 0003 	and.w	r0, r0, #3
 800d43a:	2801      	cmp	r0, #1
 800d43c:	d007      	beq.n	800d44e <cos+0x56>
 800d43e:	2802      	cmp	r0, #2
 800d440:	d012      	beq.n	800d468 <cos+0x70>
 800d442:	b9c0      	cbnz	r0, 800d476 <cos+0x7e>
 800d444:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d448:	ed9d 0b00 	vldr	d0, [sp]
 800d44c:	e7de      	b.n	800d40c <cos+0x14>
 800d44e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d452:	ed9d 0b00 	vldr	d0, [sp]
 800d456:	f001 fa7b 	bl	800e950 <__kernel_sin>
 800d45a:	ec53 2b10 	vmov	r2, r3, d0
 800d45e:	ee10 0a10 	vmov	r0, s0
 800d462:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d466:	e7de      	b.n	800d426 <cos+0x2e>
 800d468:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d46c:	ed9d 0b00 	vldr	d0, [sp]
 800d470:	f000 fe66 	bl	800e140 <__kernel_cos>
 800d474:	e7f1      	b.n	800d45a <cos+0x62>
 800d476:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d47a:	ed9d 0b00 	vldr	d0, [sp]
 800d47e:	2001      	movs	r0, #1
 800d480:	f001 fa66 	bl	800e950 <__kernel_sin>
 800d484:	e7c4      	b.n	800d410 <cos+0x18>
 800d486:	bf00      	nop
	...
 800d490:	3fe921fb 	.word	0x3fe921fb
 800d494:	7fefffff 	.word	0x7fefffff

0800d498 <sin>:
 800d498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d49a:	ec53 2b10 	vmov	r2, r3, d0
 800d49e:	4826      	ldr	r0, [pc, #152]	; (800d538 <sin+0xa0>)
 800d4a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d4a4:	4281      	cmp	r1, r0
 800d4a6:	dc07      	bgt.n	800d4b8 <sin+0x20>
 800d4a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d530 <sin+0x98>
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	f001 fa4f 	bl	800e950 <__kernel_sin>
 800d4b2:	ec51 0b10 	vmov	r0, r1, d0
 800d4b6:	e007      	b.n	800d4c8 <sin+0x30>
 800d4b8:	4820      	ldr	r0, [pc, #128]	; (800d53c <sin+0xa4>)
 800d4ba:	4281      	cmp	r1, r0
 800d4bc:	dd09      	ble.n	800d4d2 <sin+0x3a>
 800d4be:	ee10 0a10 	vmov	r0, s0
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	f7f2 fe84 	bl	80001d0 <__aeabi_dsub>
 800d4c8:	ec41 0b10 	vmov	d0, r0, r1
 800d4cc:	b005      	add	sp, #20
 800d4ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4d2:	4668      	mov	r0, sp
 800d4d4:	f000 fa38 	bl	800d948 <__ieee754_rem_pio2>
 800d4d8:	f000 0003 	and.w	r0, r0, #3
 800d4dc:	2801      	cmp	r0, #1
 800d4de:	d008      	beq.n	800d4f2 <sin+0x5a>
 800d4e0:	2802      	cmp	r0, #2
 800d4e2:	d00d      	beq.n	800d500 <sin+0x68>
 800d4e4:	b9d0      	cbnz	r0, 800d51c <sin+0x84>
 800d4e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d4ea:	ed9d 0b00 	vldr	d0, [sp]
 800d4ee:	2001      	movs	r0, #1
 800d4f0:	e7dd      	b.n	800d4ae <sin+0x16>
 800d4f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d4f6:	ed9d 0b00 	vldr	d0, [sp]
 800d4fa:	f000 fe21 	bl	800e140 <__kernel_cos>
 800d4fe:	e7d8      	b.n	800d4b2 <sin+0x1a>
 800d500:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d504:	ed9d 0b00 	vldr	d0, [sp]
 800d508:	2001      	movs	r0, #1
 800d50a:	f001 fa21 	bl	800e950 <__kernel_sin>
 800d50e:	ec53 2b10 	vmov	r2, r3, d0
 800d512:	ee10 0a10 	vmov	r0, s0
 800d516:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d51a:	e7d5      	b.n	800d4c8 <sin+0x30>
 800d51c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d520:	ed9d 0b00 	vldr	d0, [sp]
 800d524:	f000 fe0c 	bl	800e140 <__kernel_cos>
 800d528:	e7f1      	b.n	800d50e <sin+0x76>
 800d52a:	bf00      	nop
 800d52c:	f3af 8000 	nop.w
	...
 800d538:	3fe921fb 	.word	0x3fe921fb
 800d53c:	7fefffff 	.word	0x7fefffff

0800d540 <cosf>:
 800d540:	ee10 3a10 	vmov	r3, s0
 800d544:	b507      	push	{r0, r1, r2, lr}
 800d546:	4a1c      	ldr	r2, [pc, #112]	; (800d5b8 <cosf+0x78>)
 800d548:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d54c:	4293      	cmp	r3, r2
 800d54e:	dc04      	bgt.n	800d55a <cosf+0x1a>
 800d550:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800d5bc <cosf+0x7c>
 800d554:	f001 faba 	bl	800eacc <__kernel_cosf>
 800d558:	e004      	b.n	800d564 <cosf+0x24>
 800d55a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d55e:	db04      	blt.n	800d56a <cosf+0x2a>
 800d560:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d564:	b003      	add	sp, #12
 800d566:	f85d fb04 	ldr.w	pc, [sp], #4
 800d56a:	4668      	mov	r0, sp
 800d56c:	f000 fcaa 	bl	800dec4 <__ieee754_rem_pio2f>
 800d570:	f000 0003 	and.w	r0, r0, #3
 800d574:	2801      	cmp	r0, #1
 800d576:	d007      	beq.n	800d588 <cosf+0x48>
 800d578:	2802      	cmp	r0, #2
 800d57a:	d00e      	beq.n	800d59a <cosf+0x5a>
 800d57c:	b9a0      	cbnz	r0, 800d5a8 <cosf+0x68>
 800d57e:	eddd 0a01 	vldr	s1, [sp, #4]
 800d582:	ed9d 0a00 	vldr	s0, [sp]
 800d586:	e7e5      	b.n	800d554 <cosf+0x14>
 800d588:	eddd 0a01 	vldr	s1, [sp, #4]
 800d58c:	ed9d 0a00 	vldr	s0, [sp]
 800d590:	f001 fd86 	bl	800f0a0 <__kernel_sinf>
 800d594:	eeb1 0a40 	vneg.f32	s0, s0
 800d598:	e7e4      	b.n	800d564 <cosf+0x24>
 800d59a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d59e:	ed9d 0a00 	vldr	s0, [sp]
 800d5a2:	f001 fa93 	bl	800eacc <__kernel_cosf>
 800d5a6:	e7f5      	b.n	800d594 <cosf+0x54>
 800d5a8:	eddd 0a01 	vldr	s1, [sp, #4]
 800d5ac:	ed9d 0a00 	vldr	s0, [sp]
 800d5b0:	2001      	movs	r0, #1
 800d5b2:	f001 fd75 	bl	800f0a0 <__kernel_sinf>
 800d5b6:	e7d5      	b.n	800d564 <cosf+0x24>
 800d5b8:	3f490fd8 	.word	0x3f490fd8
 800d5bc:	00000000 	.word	0x00000000

0800d5c0 <sinf>:
 800d5c0:	ee10 3a10 	vmov	r3, s0
 800d5c4:	b507      	push	{r0, r1, r2, lr}
 800d5c6:	4a1d      	ldr	r2, [pc, #116]	; (800d63c <sinf+0x7c>)
 800d5c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5cc:	4293      	cmp	r3, r2
 800d5ce:	dc05      	bgt.n	800d5dc <sinf+0x1c>
 800d5d0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800d640 <sinf+0x80>
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	f001 fd63 	bl	800f0a0 <__kernel_sinf>
 800d5da:	e004      	b.n	800d5e6 <sinf+0x26>
 800d5dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d5e0:	db04      	blt.n	800d5ec <sinf+0x2c>
 800d5e2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d5e6:	b003      	add	sp, #12
 800d5e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5ec:	4668      	mov	r0, sp
 800d5ee:	f000 fc69 	bl	800dec4 <__ieee754_rem_pio2f>
 800d5f2:	f000 0003 	and.w	r0, r0, #3
 800d5f6:	2801      	cmp	r0, #1
 800d5f8:	d008      	beq.n	800d60c <sinf+0x4c>
 800d5fa:	2802      	cmp	r0, #2
 800d5fc:	d00d      	beq.n	800d61a <sinf+0x5a>
 800d5fe:	b9b0      	cbnz	r0, 800d62e <sinf+0x6e>
 800d600:	eddd 0a01 	vldr	s1, [sp, #4]
 800d604:	ed9d 0a00 	vldr	s0, [sp]
 800d608:	2001      	movs	r0, #1
 800d60a:	e7e4      	b.n	800d5d6 <sinf+0x16>
 800d60c:	eddd 0a01 	vldr	s1, [sp, #4]
 800d610:	ed9d 0a00 	vldr	s0, [sp]
 800d614:	f001 fa5a 	bl	800eacc <__kernel_cosf>
 800d618:	e7e5      	b.n	800d5e6 <sinf+0x26>
 800d61a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d61e:	ed9d 0a00 	vldr	s0, [sp]
 800d622:	2001      	movs	r0, #1
 800d624:	f001 fd3c 	bl	800f0a0 <__kernel_sinf>
 800d628:	eeb1 0a40 	vneg.f32	s0, s0
 800d62c:	e7db      	b.n	800d5e6 <sinf+0x26>
 800d62e:	eddd 0a01 	vldr	s1, [sp, #4]
 800d632:	ed9d 0a00 	vldr	s0, [sp]
 800d636:	f001 fa49 	bl	800eacc <__kernel_cosf>
 800d63a:	e7f5      	b.n	800d628 <sinf+0x68>
 800d63c:	3f490fd8 	.word	0x3f490fd8
 800d640:	00000000 	.word	0x00000000

0800d644 <fmod>:
 800d644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d646:	ed2d 8b02 	vpush	{d8}
 800d64a:	ec57 6b10 	vmov	r6, r7, d0
 800d64e:	ec55 4b11 	vmov	r4, r5, d1
 800d652:	f000 f867 	bl	800d724 <__ieee754_fmod>
 800d656:	4b18      	ldr	r3, [pc, #96]	; (800d6b8 <fmod+0x74>)
 800d658:	eeb0 8a40 	vmov.f32	s16, s0
 800d65c:	eef0 8a60 	vmov.f32	s17, s1
 800d660:	f993 3000 	ldrsb.w	r3, [r3]
 800d664:	3301      	adds	r3, #1
 800d666:	d020      	beq.n	800d6aa <fmod+0x66>
 800d668:	4622      	mov	r2, r4
 800d66a:	462b      	mov	r3, r5
 800d66c:	4620      	mov	r0, r4
 800d66e:	4629      	mov	r1, r5
 800d670:	f7f3 fa00 	bl	8000a74 <__aeabi_dcmpun>
 800d674:	b9c8      	cbnz	r0, 800d6aa <fmod+0x66>
 800d676:	4632      	mov	r2, r6
 800d678:	463b      	mov	r3, r7
 800d67a:	4630      	mov	r0, r6
 800d67c:	4639      	mov	r1, r7
 800d67e:	f7f3 f9f9 	bl	8000a74 <__aeabi_dcmpun>
 800d682:	b990      	cbnz	r0, 800d6aa <fmod+0x66>
 800d684:	2200      	movs	r2, #0
 800d686:	2300      	movs	r3, #0
 800d688:	4620      	mov	r0, r4
 800d68a:	4629      	mov	r1, r5
 800d68c:	f7f3 f9c0 	bl	8000a10 <__aeabi_dcmpeq>
 800d690:	b158      	cbz	r0, 800d6aa <fmod+0x66>
 800d692:	f001 ff23 	bl	800f4dc <__errno>
 800d696:	2321      	movs	r3, #33	; 0x21
 800d698:	6003      	str	r3, [r0, #0]
 800d69a:	2200      	movs	r2, #0
 800d69c:	2300      	movs	r3, #0
 800d69e:	4610      	mov	r0, r2
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f7f3 f877 	bl	8000794 <__aeabi_ddiv>
 800d6a6:	ec41 0b18 	vmov	d8, r0, r1
 800d6aa:	eeb0 0a48 	vmov.f32	s0, s16
 800d6ae:	eef0 0a68 	vmov.f32	s1, s17
 800d6b2:	ecbd 8b02 	vpop	{d8}
 800d6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6b8:	2000017e 	.word	0x2000017e

0800d6bc <sqrt>:
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	ed2d 8b02 	vpush	{d8}
 800d6c2:	ec55 4b10 	vmov	r4, r5, d0
 800d6c6:	f000 fb49 	bl	800dd5c <__ieee754_sqrt>
 800d6ca:	4b15      	ldr	r3, [pc, #84]	; (800d720 <sqrt+0x64>)
 800d6cc:	eeb0 8a40 	vmov.f32	s16, s0
 800d6d0:	eef0 8a60 	vmov.f32	s17, s1
 800d6d4:	f993 3000 	ldrsb.w	r3, [r3]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	d019      	beq.n	800d710 <sqrt+0x54>
 800d6dc:	4622      	mov	r2, r4
 800d6de:	462b      	mov	r3, r5
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	f7f3 f9c6 	bl	8000a74 <__aeabi_dcmpun>
 800d6e8:	b990      	cbnz	r0, 800d710 <sqrt+0x54>
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	f7f3 f997 	bl	8000a24 <__aeabi_dcmplt>
 800d6f6:	b158      	cbz	r0, 800d710 <sqrt+0x54>
 800d6f8:	f001 fef0 	bl	800f4dc <__errno>
 800d6fc:	2321      	movs	r3, #33	; 0x21
 800d6fe:	6003      	str	r3, [r0, #0]
 800d700:	2200      	movs	r2, #0
 800d702:	2300      	movs	r3, #0
 800d704:	4610      	mov	r0, r2
 800d706:	4619      	mov	r1, r3
 800d708:	f7f3 f844 	bl	8000794 <__aeabi_ddiv>
 800d70c:	ec41 0b18 	vmov	d8, r0, r1
 800d710:	eeb0 0a48 	vmov.f32	s0, s16
 800d714:	eef0 0a68 	vmov.f32	s1, s17
 800d718:	ecbd 8b02 	vpop	{d8}
 800d71c:	bd38      	pop	{r3, r4, r5, pc}
 800d71e:	bf00      	nop
 800d720:	2000017e 	.word	0x2000017e

0800d724 <__ieee754_fmod>:
 800d724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d728:	ec53 2b11 	vmov	r2, r3, d1
 800d72c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800d730:	ea5e 0402 	orrs.w	r4, lr, r2
 800d734:	ec51 0b10 	vmov	r0, r1, d0
 800d738:	ee11 7a10 	vmov	r7, s2
 800d73c:	ee11 ca10 	vmov	ip, s2
 800d740:	461e      	mov	r6, r3
 800d742:	d00d      	beq.n	800d760 <__ieee754_fmod+0x3c>
 800d744:	4c7a      	ldr	r4, [pc, #488]	; (800d930 <__ieee754_fmod+0x20c>)
 800d746:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800d74a:	45a0      	cmp	r8, r4
 800d74c:	4689      	mov	r9, r1
 800d74e:	dc07      	bgt.n	800d760 <__ieee754_fmod+0x3c>
 800d750:	4254      	negs	r4, r2
 800d752:	4d78      	ldr	r5, [pc, #480]	; (800d934 <__ieee754_fmod+0x210>)
 800d754:	4314      	orrs	r4, r2
 800d756:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800d75a:	42ac      	cmp	r4, r5
 800d75c:	46ab      	mov	fp, r5
 800d75e:	d909      	bls.n	800d774 <__ieee754_fmod+0x50>
 800d760:	f7f2 feee 	bl	8000540 <__aeabi_dmul>
 800d764:	4602      	mov	r2, r0
 800d766:	460b      	mov	r3, r1
 800d768:	f7f3 f814 	bl	8000794 <__aeabi_ddiv>
 800d76c:	ec41 0b10 	vmov	d0, r0, r1
 800d770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d774:	45f0      	cmp	r8, lr
 800d776:	ee10 aa10 	vmov	sl, s0
 800d77a:	ee10 4a10 	vmov	r4, s0
 800d77e:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d782:	dc0a      	bgt.n	800d79a <__ieee754_fmod+0x76>
 800d784:	dbf2      	blt.n	800d76c <__ieee754_fmod+0x48>
 800d786:	4290      	cmp	r0, r2
 800d788:	d3f0      	bcc.n	800d76c <__ieee754_fmod+0x48>
 800d78a:	d106      	bne.n	800d79a <__ieee754_fmod+0x76>
 800d78c:	4a6a      	ldr	r2, [pc, #424]	; (800d938 <__ieee754_fmod+0x214>)
 800d78e:	0fed      	lsrs	r5, r5, #31
 800d790:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d794:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d798:	e7e8      	b.n	800d76c <__ieee754_fmod+0x48>
 800d79a:	ea19 0f0b 	tst.w	r9, fp
 800d79e:	d14a      	bne.n	800d836 <__ieee754_fmod+0x112>
 800d7a0:	f1b8 0f00 	cmp.w	r8, #0
 800d7a4:	d13f      	bne.n	800d826 <__ieee754_fmod+0x102>
 800d7a6:	4965      	ldr	r1, [pc, #404]	; (800d93c <__ieee754_fmod+0x218>)
 800d7a8:	4653      	mov	r3, sl
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	dc38      	bgt.n	800d820 <__ieee754_fmod+0xfc>
 800d7ae:	4b61      	ldr	r3, [pc, #388]	; (800d934 <__ieee754_fmod+0x210>)
 800d7b0:	4033      	ands	r3, r6
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d14f      	bne.n	800d856 <__ieee754_fmod+0x132>
 800d7b6:	f1be 0f00 	cmp.w	lr, #0
 800d7ba:	d144      	bne.n	800d846 <__ieee754_fmod+0x122>
 800d7bc:	4a5f      	ldr	r2, [pc, #380]	; (800d93c <__ieee754_fmod+0x218>)
 800d7be:	463b      	mov	r3, r7
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	dc3d      	bgt.n	800d840 <__ieee754_fmod+0x11c>
 800d7c4:	4b5e      	ldr	r3, [pc, #376]	; (800d940 <__ieee754_fmod+0x21c>)
 800d7c6:	4299      	cmp	r1, r3
 800d7c8:	db4a      	blt.n	800d860 <__ieee754_fmod+0x13c>
 800d7ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7d2:	485b      	ldr	r0, [pc, #364]	; (800d940 <__ieee754_fmod+0x21c>)
 800d7d4:	4282      	cmp	r2, r0
 800d7d6:	db57      	blt.n	800d888 <__ieee754_fmod+0x164>
 800d7d8:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d7dc:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d7e0:	1a89      	subs	r1, r1, r2
 800d7e2:	1b98      	subs	r0, r3, r6
 800d7e4:	eba4 070c 	sub.w	r7, r4, ip
 800d7e8:	2900      	cmp	r1, #0
 800d7ea:	d164      	bne.n	800d8b6 <__ieee754_fmod+0x192>
 800d7ec:	4564      	cmp	r4, ip
 800d7ee:	bf38      	it	cc
 800d7f0:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	bfa4      	itt	ge
 800d7f8:	463c      	movge	r4, r7
 800d7fa:	4603      	movge	r3, r0
 800d7fc:	ea53 0104 	orrs.w	r1, r3, r4
 800d800:	d0c4      	beq.n	800d78c <__ieee754_fmod+0x68>
 800d802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d806:	db6b      	blt.n	800d8e0 <__ieee754_fmod+0x1bc>
 800d808:	494d      	ldr	r1, [pc, #308]	; (800d940 <__ieee754_fmod+0x21c>)
 800d80a:	428a      	cmp	r2, r1
 800d80c:	db6e      	blt.n	800d8ec <__ieee754_fmod+0x1c8>
 800d80e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d812:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800d816:	431d      	orrs	r5, r3
 800d818:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800d81c:	4620      	mov	r0, r4
 800d81e:	e7a5      	b.n	800d76c <__ieee754_fmod+0x48>
 800d820:	3901      	subs	r1, #1
 800d822:	005b      	lsls	r3, r3, #1
 800d824:	e7c1      	b.n	800d7aa <__ieee754_fmod+0x86>
 800d826:	4946      	ldr	r1, [pc, #280]	; (800d940 <__ieee754_fmod+0x21c>)
 800d828:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	ddbe      	ble.n	800d7ae <__ieee754_fmod+0x8a>
 800d830:	3901      	subs	r1, #1
 800d832:	005b      	lsls	r3, r3, #1
 800d834:	e7fa      	b.n	800d82c <__ieee754_fmod+0x108>
 800d836:	ea4f 5128 	mov.w	r1, r8, asr #20
 800d83a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d83e:	e7b6      	b.n	800d7ae <__ieee754_fmod+0x8a>
 800d840:	3a01      	subs	r2, #1
 800d842:	005b      	lsls	r3, r3, #1
 800d844:	e7bc      	b.n	800d7c0 <__ieee754_fmod+0x9c>
 800d846:	4a3e      	ldr	r2, [pc, #248]	; (800d940 <__ieee754_fmod+0x21c>)
 800d848:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	ddb9      	ble.n	800d7c4 <__ieee754_fmod+0xa0>
 800d850:	3a01      	subs	r2, #1
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	e7fa      	b.n	800d84c <__ieee754_fmod+0x128>
 800d856:	ea4f 522e 	mov.w	r2, lr, asr #20
 800d85a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d85e:	e7b1      	b.n	800d7c4 <__ieee754_fmod+0xa0>
 800d860:	1a5c      	subs	r4, r3, r1
 800d862:	2c1f      	cmp	r4, #31
 800d864:	dc0a      	bgt.n	800d87c <__ieee754_fmod+0x158>
 800d866:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800d86a:	fa08 f804 	lsl.w	r8, r8, r4
 800d86e:	fa2a f303 	lsr.w	r3, sl, r3
 800d872:	ea43 0308 	orr.w	r3, r3, r8
 800d876:	fa0a f404 	lsl.w	r4, sl, r4
 800d87a:	e7aa      	b.n	800d7d2 <__ieee754_fmod+0xae>
 800d87c:	4b31      	ldr	r3, [pc, #196]	; (800d944 <__ieee754_fmod+0x220>)
 800d87e:	1a5b      	subs	r3, r3, r1
 800d880:	fa0a f303 	lsl.w	r3, sl, r3
 800d884:	2400      	movs	r4, #0
 800d886:	e7a4      	b.n	800d7d2 <__ieee754_fmod+0xae>
 800d888:	eba0 0c02 	sub.w	ip, r0, r2
 800d88c:	f1bc 0f1f 	cmp.w	ip, #31
 800d890:	dc0a      	bgt.n	800d8a8 <__ieee754_fmod+0x184>
 800d892:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800d896:	fa0e fe0c 	lsl.w	lr, lr, ip
 800d89a:	fa27 f606 	lsr.w	r6, r7, r6
 800d89e:	ea46 060e 	orr.w	r6, r6, lr
 800d8a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 800d8a6:	e79b      	b.n	800d7e0 <__ieee754_fmod+0xbc>
 800d8a8:	4e26      	ldr	r6, [pc, #152]	; (800d944 <__ieee754_fmod+0x220>)
 800d8aa:	1ab6      	subs	r6, r6, r2
 800d8ac:	fa07 f606 	lsl.w	r6, r7, r6
 800d8b0:	f04f 0c00 	mov.w	ip, #0
 800d8b4:	e794      	b.n	800d7e0 <__ieee754_fmod+0xbc>
 800d8b6:	4564      	cmp	r4, ip
 800d8b8:	bf38      	it	cc
 800d8ba:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	da05      	bge.n	800d8ce <__ieee754_fmod+0x1aa>
 800d8c2:	0fe0      	lsrs	r0, r4, #31
 800d8c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d8c8:	0064      	lsls	r4, r4, #1
 800d8ca:	3901      	subs	r1, #1
 800d8cc:	e789      	b.n	800d7e2 <__ieee754_fmod+0xbe>
 800d8ce:	ea50 0307 	orrs.w	r3, r0, r7
 800d8d2:	f43f af5b 	beq.w	800d78c <__ieee754_fmod+0x68>
 800d8d6:	0ffb      	lsrs	r3, r7, #31
 800d8d8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d8dc:	007c      	lsls	r4, r7, #1
 800d8de:	e7f4      	b.n	800d8ca <__ieee754_fmod+0x1a6>
 800d8e0:	0fe1      	lsrs	r1, r4, #31
 800d8e2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d8e6:	0064      	lsls	r4, r4, #1
 800d8e8:	3a01      	subs	r2, #1
 800d8ea:	e78a      	b.n	800d802 <__ieee754_fmod+0xde>
 800d8ec:	1a89      	subs	r1, r1, r2
 800d8ee:	2914      	cmp	r1, #20
 800d8f0:	dc0a      	bgt.n	800d908 <__ieee754_fmod+0x1e4>
 800d8f2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d8f6:	fa03 f202 	lsl.w	r2, r3, r2
 800d8fa:	40cc      	lsrs	r4, r1
 800d8fc:	4322      	orrs	r2, r4
 800d8fe:	410b      	asrs	r3, r1
 800d900:	ea43 0105 	orr.w	r1, r3, r5
 800d904:	4610      	mov	r0, r2
 800d906:	e731      	b.n	800d76c <__ieee754_fmod+0x48>
 800d908:	291f      	cmp	r1, #31
 800d90a:	dc07      	bgt.n	800d91c <__ieee754_fmod+0x1f8>
 800d90c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d910:	40cc      	lsrs	r4, r1
 800d912:	fa03 f202 	lsl.w	r2, r3, r2
 800d916:	4322      	orrs	r2, r4
 800d918:	462b      	mov	r3, r5
 800d91a:	e7f1      	b.n	800d900 <__ieee754_fmod+0x1dc>
 800d91c:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d920:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d924:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d928:	32e2      	adds	r2, #226	; 0xe2
 800d92a:	fa43 f202 	asr.w	r2, r3, r2
 800d92e:	e7f3      	b.n	800d918 <__ieee754_fmod+0x1f4>
 800d930:	7fefffff 	.word	0x7fefffff
 800d934:	7ff00000 	.word	0x7ff00000
 800d938:	0800f888 	.word	0x0800f888
 800d93c:	fffffbed 	.word	0xfffffbed
 800d940:	fffffc02 	.word	0xfffffc02
 800d944:	fffffbe2 	.word	0xfffffbe2

0800d948 <__ieee754_rem_pio2>:
 800d948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d94c:	ed2d 8b02 	vpush	{d8}
 800d950:	ec55 4b10 	vmov	r4, r5, d0
 800d954:	4bca      	ldr	r3, [pc, #808]	; (800dc80 <__ieee754_rem_pio2+0x338>)
 800d956:	b08b      	sub	sp, #44	; 0x2c
 800d958:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d95c:	4598      	cmp	r8, r3
 800d95e:	4682      	mov	sl, r0
 800d960:	9502      	str	r5, [sp, #8]
 800d962:	dc08      	bgt.n	800d976 <__ieee754_rem_pio2+0x2e>
 800d964:	2200      	movs	r2, #0
 800d966:	2300      	movs	r3, #0
 800d968:	ed80 0b00 	vstr	d0, [r0]
 800d96c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d970:	f04f 0b00 	mov.w	fp, #0
 800d974:	e028      	b.n	800d9c8 <__ieee754_rem_pio2+0x80>
 800d976:	4bc3      	ldr	r3, [pc, #780]	; (800dc84 <__ieee754_rem_pio2+0x33c>)
 800d978:	4598      	cmp	r8, r3
 800d97a:	dc78      	bgt.n	800da6e <__ieee754_rem_pio2+0x126>
 800d97c:	9b02      	ldr	r3, [sp, #8]
 800d97e:	4ec2      	ldr	r6, [pc, #776]	; (800dc88 <__ieee754_rem_pio2+0x340>)
 800d980:	2b00      	cmp	r3, #0
 800d982:	ee10 0a10 	vmov	r0, s0
 800d986:	a3b0      	add	r3, pc, #704	; (adr r3, 800dc48 <__ieee754_rem_pio2+0x300>)
 800d988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98c:	4629      	mov	r1, r5
 800d98e:	dd39      	ble.n	800da04 <__ieee754_rem_pio2+0xbc>
 800d990:	f7f2 fc1e 	bl	80001d0 <__aeabi_dsub>
 800d994:	45b0      	cmp	r8, r6
 800d996:	4604      	mov	r4, r0
 800d998:	460d      	mov	r5, r1
 800d99a:	d01b      	beq.n	800d9d4 <__ieee754_rem_pio2+0x8c>
 800d99c:	a3ac      	add	r3, pc, #688	; (adr r3, 800dc50 <__ieee754_rem_pio2+0x308>)
 800d99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a2:	f7f2 fc15 	bl	80001d0 <__aeabi_dsub>
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	e9ca 2300 	strd	r2, r3, [sl]
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	f7f2 fc0d 	bl	80001d0 <__aeabi_dsub>
 800d9b6:	a3a6      	add	r3, pc, #664	; (adr r3, 800dc50 <__ieee754_rem_pio2+0x308>)
 800d9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9bc:	f7f2 fc08 	bl	80001d0 <__aeabi_dsub>
 800d9c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d9c4:	f04f 0b01 	mov.w	fp, #1
 800d9c8:	4658      	mov	r0, fp
 800d9ca:	b00b      	add	sp, #44	; 0x2c
 800d9cc:	ecbd 8b02 	vpop	{d8}
 800d9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9d4:	a3a0      	add	r3, pc, #640	; (adr r3, 800dc58 <__ieee754_rem_pio2+0x310>)
 800d9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9da:	f7f2 fbf9 	bl	80001d0 <__aeabi_dsub>
 800d9de:	a3a0      	add	r3, pc, #640	; (adr r3, 800dc60 <__ieee754_rem_pio2+0x318>)
 800d9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	460d      	mov	r5, r1
 800d9e8:	f7f2 fbf2 	bl	80001d0 <__aeabi_dsub>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	e9ca 2300 	strd	r2, r3, [sl]
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	4629      	mov	r1, r5
 800d9f8:	f7f2 fbea 	bl	80001d0 <__aeabi_dsub>
 800d9fc:	a398      	add	r3, pc, #608	; (adr r3, 800dc60 <__ieee754_rem_pio2+0x318>)
 800d9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da02:	e7db      	b.n	800d9bc <__ieee754_rem_pio2+0x74>
 800da04:	f7f2 fbe6 	bl	80001d4 <__adddf3>
 800da08:	45b0      	cmp	r8, r6
 800da0a:	4604      	mov	r4, r0
 800da0c:	460d      	mov	r5, r1
 800da0e:	d016      	beq.n	800da3e <__ieee754_rem_pio2+0xf6>
 800da10:	a38f      	add	r3, pc, #572	; (adr r3, 800dc50 <__ieee754_rem_pio2+0x308>)
 800da12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da16:	f7f2 fbdd 	bl	80001d4 <__adddf3>
 800da1a:	4602      	mov	r2, r0
 800da1c:	460b      	mov	r3, r1
 800da1e:	e9ca 2300 	strd	r2, r3, [sl]
 800da22:	4620      	mov	r0, r4
 800da24:	4629      	mov	r1, r5
 800da26:	f7f2 fbd3 	bl	80001d0 <__aeabi_dsub>
 800da2a:	a389      	add	r3, pc, #548	; (adr r3, 800dc50 <__ieee754_rem_pio2+0x308>)
 800da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da30:	f7f2 fbd0 	bl	80001d4 <__adddf3>
 800da34:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800da38:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800da3c:	e7c4      	b.n	800d9c8 <__ieee754_rem_pio2+0x80>
 800da3e:	a386      	add	r3, pc, #536	; (adr r3, 800dc58 <__ieee754_rem_pio2+0x310>)
 800da40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da44:	f7f2 fbc6 	bl	80001d4 <__adddf3>
 800da48:	a385      	add	r3, pc, #532	; (adr r3, 800dc60 <__ieee754_rem_pio2+0x318>)
 800da4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4e:	4604      	mov	r4, r0
 800da50:	460d      	mov	r5, r1
 800da52:	f7f2 fbbf 	bl	80001d4 <__adddf3>
 800da56:	4602      	mov	r2, r0
 800da58:	460b      	mov	r3, r1
 800da5a:	e9ca 2300 	strd	r2, r3, [sl]
 800da5e:	4620      	mov	r0, r4
 800da60:	4629      	mov	r1, r5
 800da62:	f7f2 fbb5 	bl	80001d0 <__aeabi_dsub>
 800da66:	a37e      	add	r3, pc, #504	; (adr r3, 800dc60 <__ieee754_rem_pio2+0x318>)
 800da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6c:	e7e0      	b.n	800da30 <__ieee754_rem_pio2+0xe8>
 800da6e:	4b87      	ldr	r3, [pc, #540]	; (800dc8c <__ieee754_rem_pio2+0x344>)
 800da70:	4598      	cmp	r8, r3
 800da72:	f300 80d9 	bgt.w	800dc28 <__ieee754_rem_pio2+0x2e0>
 800da76:	f001 fb5b 	bl	800f130 <fabs>
 800da7a:	ec55 4b10 	vmov	r4, r5, d0
 800da7e:	ee10 0a10 	vmov	r0, s0
 800da82:	a379      	add	r3, pc, #484	; (adr r3, 800dc68 <__ieee754_rem_pio2+0x320>)
 800da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da88:	4629      	mov	r1, r5
 800da8a:	f7f2 fd59 	bl	8000540 <__aeabi_dmul>
 800da8e:	4b80      	ldr	r3, [pc, #512]	; (800dc90 <__ieee754_rem_pio2+0x348>)
 800da90:	2200      	movs	r2, #0
 800da92:	f7f2 fb9f 	bl	80001d4 <__adddf3>
 800da96:	f7f3 f803 	bl	8000aa0 <__aeabi_d2iz>
 800da9a:	4683      	mov	fp, r0
 800da9c:	f7f2 fce6 	bl	800046c <__aeabi_i2d>
 800daa0:	4602      	mov	r2, r0
 800daa2:	460b      	mov	r3, r1
 800daa4:	ec43 2b18 	vmov	d8, r2, r3
 800daa8:	a367      	add	r3, pc, #412	; (adr r3, 800dc48 <__ieee754_rem_pio2+0x300>)
 800daaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daae:	f7f2 fd47 	bl	8000540 <__aeabi_dmul>
 800dab2:	4602      	mov	r2, r0
 800dab4:	460b      	mov	r3, r1
 800dab6:	4620      	mov	r0, r4
 800dab8:	4629      	mov	r1, r5
 800daba:	f7f2 fb89 	bl	80001d0 <__aeabi_dsub>
 800dabe:	a364      	add	r3, pc, #400	; (adr r3, 800dc50 <__ieee754_rem_pio2+0x308>)
 800dac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac4:	4606      	mov	r6, r0
 800dac6:	460f      	mov	r7, r1
 800dac8:	ec51 0b18 	vmov	r0, r1, d8
 800dacc:	f7f2 fd38 	bl	8000540 <__aeabi_dmul>
 800dad0:	f1bb 0f1f 	cmp.w	fp, #31
 800dad4:	4604      	mov	r4, r0
 800dad6:	460d      	mov	r5, r1
 800dad8:	dc0d      	bgt.n	800daf6 <__ieee754_rem_pio2+0x1ae>
 800dada:	4b6e      	ldr	r3, [pc, #440]	; (800dc94 <__ieee754_rem_pio2+0x34c>)
 800dadc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800dae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dae4:	4543      	cmp	r3, r8
 800dae6:	d006      	beq.n	800daf6 <__ieee754_rem_pio2+0x1ae>
 800dae8:	4622      	mov	r2, r4
 800daea:	462b      	mov	r3, r5
 800daec:	4630      	mov	r0, r6
 800daee:	4639      	mov	r1, r7
 800daf0:	f7f2 fb6e 	bl	80001d0 <__aeabi_dsub>
 800daf4:	e00f      	b.n	800db16 <__ieee754_rem_pio2+0x1ce>
 800daf6:	462b      	mov	r3, r5
 800daf8:	4622      	mov	r2, r4
 800dafa:	4630      	mov	r0, r6
 800dafc:	4639      	mov	r1, r7
 800dafe:	f7f2 fb67 	bl	80001d0 <__aeabi_dsub>
 800db02:	ea4f 5328 	mov.w	r3, r8, asr #20
 800db06:	9303      	str	r3, [sp, #12]
 800db08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800db0c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800db10:	f1b8 0f10 	cmp.w	r8, #16
 800db14:	dc02      	bgt.n	800db1c <__ieee754_rem_pio2+0x1d4>
 800db16:	e9ca 0100 	strd	r0, r1, [sl]
 800db1a:	e039      	b.n	800db90 <__ieee754_rem_pio2+0x248>
 800db1c:	a34e      	add	r3, pc, #312	; (adr r3, 800dc58 <__ieee754_rem_pio2+0x310>)
 800db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db22:	ec51 0b18 	vmov	r0, r1, d8
 800db26:	f7f2 fd0b 	bl	8000540 <__aeabi_dmul>
 800db2a:	4604      	mov	r4, r0
 800db2c:	460d      	mov	r5, r1
 800db2e:	4602      	mov	r2, r0
 800db30:	460b      	mov	r3, r1
 800db32:	4630      	mov	r0, r6
 800db34:	4639      	mov	r1, r7
 800db36:	f7f2 fb4b 	bl	80001d0 <__aeabi_dsub>
 800db3a:	4602      	mov	r2, r0
 800db3c:	460b      	mov	r3, r1
 800db3e:	4680      	mov	r8, r0
 800db40:	4689      	mov	r9, r1
 800db42:	4630      	mov	r0, r6
 800db44:	4639      	mov	r1, r7
 800db46:	f7f2 fb43 	bl	80001d0 <__aeabi_dsub>
 800db4a:	4622      	mov	r2, r4
 800db4c:	462b      	mov	r3, r5
 800db4e:	f7f2 fb3f 	bl	80001d0 <__aeabi_dsub>
 800db52:	a343      	add	r3, pc, #268	; (adr r3, 800dc60 <__ieee754_rem_pio2+0x318>)
 800db54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db58:	4604      	mov	r4, r0
 800db5a:	460d      	mov	r5, r1
 800db5c:	ec51 0b18 	vmov	r0, r1, d8
 800db60:	f7f2 fcee 	bl	8000540 <__aeabi_dmul>
 800db64:	4622      	mov	r2, r4
 800db66:	462b      	mov	r3, r5
 800db68:	f7f2 fb32 	bl	80001d0 <__aeabi_dsub>
 800db6c:	4602      	mov	r2, r0
 800db6e:	460b      	mov	r3, r1
 800db70:	4604      	mov	r4, r0
 800db72:	460d      	mov	r5, r1
 800db74:	4640      	mov	r0, r8
 800db76:	4649      	mov	r1, r9
 800db78:	f7f2 fb2a 	bl	80001d0 <__aeabi_dsub>
 800db7c:	9a03      	ldr	r2, [sp, #12]
 800db7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800db82:	1ad3      	subs	r3, r2, r3
 800db84:	2b31      	cmp	r3, #49	; 0x31
 800db86:	dc24      	bgt.n	800dbd2 <__ieee754_rem_pio2+0x28a>
 800db88:	e9ca 0100 	strd	r0, r1, [sl]
 800db8c:	4646      	mov	r6, r8
 800db8e:	464f      	mov	r7, r9
 800db90:	e9da 8900 	ldrd	r8, r9, [sl]
 800db94:	4630      	mov	r0, r6
 800db96:	4642      	mov	r2, r8
 800db98:	464b      	mov	r3, r9
 800db9a:	4639      	mov	r1, r7
 800db9c:	f7f2 fb18 	bl	80001d0 <__aeabi_dsub>
 800dba0:	462b      	mov	r3, r5
 800dba2:	4622      	mov	r2, r4
 800dba4:	f7f2 fb14 	bl	80001d0 <__aeabi_dsub>
 800dba8:	9b02      	ldr	r3, [sp, #8]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dbb0:	f6bf af0a 	bge.w	800d9c8 <__ieee754_rem_pio2+0x80>
 800dbb4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dbb8:	f8ca 3004 	str.w	r3, [sl, #4]
 800dbbc:	f8ca 8000 	str.w	r8, [sl]
 800dbc0:	f8ca 0008 	str.w	r0, [sl, #8]
 800dbc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbc8:	f8ca 300c 	str.w	r3, [sl, #12]
 800dbcc:	f1cb 0b00 	rsb	fp, fp, #0
 800dbd0:	e6fa      	b.n	800d9c8 <__ieee754_rem_pio2+0x80>
 800dbd2:	a327      	add	r3, pc, #156	; (adr r3, 800dc70 <__ieee754_rem_pio2+0x328>)
 800dbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd8:	ec51 0b18 	vmov	r0, r1, d8
 800dbdc:	f7f2 fcb0 	bl	8000540 <__aeabi_dmul>
 800dbe0:	4604      	mov	r4, r0
 800dbe2:	460d      	mov	r5, r1
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	4640      	mov	r0, r8
 800dbea:	4649      	mov	r1, r9
 800dbec:	f7f2 faf0 	bl	80001d0 <__aeabi_dsub>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	4606      	mov	r6, r0
 800dbf6:	460f      	mov	r7, r1
 800dbf8:	4640      	mov	r0, r8
 800dbfa:	4649      	mov	r1, r9
 800dbfc:	f7f2 fae8 	bl	80001d0 <__aeabi_dsub>
 800dc00:	4622      	mov	r2, r4
 800dc02:	462b      	mov	r3, r5
 800dc04:	f7f2 fae4 	bl	80001d0 <__aeabi_dsub>
 800dc08:	a31b      	add	r3, pc, #108	; (adr r3, 800dc78 <__ieee754_rem_pio2+0x330>)
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	4604      	mov	r4, r0
 800dc10:	460d      	mov	r5, r1
 800dc12:	ec51 0b18 	vmov	r0, r1, d8
 800dc16:	f7f2 fc93 	bl	8000540 <__aeabi_dmul>
 800dc1a:	4622      	mov	r2, r4
 800dc1c:	462b      	mov	r3, r5
 800dc1e:	f7f2 fad7 	bl	80001d0 <__aeabi_dsub>
 800dc22:	4604      	mov	r4, r0
 800dc24:	460d      	mov	r5, r1
 800dc26:	e75f      	b.n	800dae8 <__ieee754_rem_pio2+0x1a0>
 800dc28:	4b1b      	ldr	r3, [pc, #108]	; (800dc98 <__ieee754_rem_pio2+0x350>)
 800dc2a:	4598      	cmp	r8, r3
 800dc2c:	dd36      	ble.n	800dc9c <__ieee754_rem_pio2+0x354>
 800dc2e:	ee10 2a10 	vmov	r2, s0
 800dc32:	462b      	mov	r3, r5
 800dc34:	4620      	mov	r0, r4
 800dc36:	4629      	mov	r1, r5
 800dc38:	f7f2 faca 	bl	80001d0 <__aeabi_dsub>
 800dc3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc40:	e9ca 0100 	strd	r0, r1, [sl]
 800dc44:	e694      	b.n	800d970 <__ieee754_rem_pio2+0x28>
 800dc46:	bf00      	nop
 800dc48:	54400000 	.word	0x54400000
 800dc4c:	3ff921fb 	.word	0x3ff921fb
 800dc50:	1a626331 	.word	0x1a626331
 800dc54:	3dd0b461 	.word	0x3dd0b461
 800dc58:	1a600000 	.word	0x1a600000
 800dc5c:	3dd0b461 	.word	0x3dd0b461
 800dc60:	2e037073 	.word	0x2e037073
 800dc64:	3ba3198a 	.word	0x3ba3198a
 800dc68:	6dc9c883 	.word	0x6dc9c883
 800dc6c:	3fe45f30 	.word	0x3fe45f30
 800dc70:	2e000000 	.word	0x2e000000
 800dc74:	3ba3198a 	.word	0x3ba3198a
 800dc78:	252049c1 	.word	0x252049c1
 800dc7c:	397b839a 	.word	0x397b839a
 800dc80:	3fe921fb 	.word	0x3fe921fb
 800dc84:	4002d97b 	.word	0x4002d97b
 800dc88:	3ff921fb 	.word	0x3ff921fb
 800dc8c:	413921fb 	.word	0x413921fb
 800dc90:	3fe00000 	.word	0x3fe00000
 800dc94:	0800f898 	.word	0x0800f898
 800dc98:	7fefffff 	.word	0x7fefffff
 800dc9c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800dca0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800dca4:	ee10 0a10 	vmov	r0, s0
 800dca8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800dcac:	ee10 6a10 	vmov	r6, s0
 800dcb0:	460f      	mov	r7, r1
 800dcb2:	f7f2 fef5 	bl	8000aa0 <__aeabi_d2iz>
 800dcb6:	f7f2 fbd9 	bl	800046c <__aeabi_i2d>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	4639      	mov	r1, r7
 800dcc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dcc6:	f7f2 fa83 	bl	80001d0 <__aeabi_dsub>
 800dcca:	4b22      	ldr	r3, [pc, #136]	; (800dd54 <__ieee754_rem_pio2+0x40c>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	f7f2 fc37 	bl	8000540 <__aeabi_dmul>
 800dcd2:	460f      	mov	r7, r1
 800dcd4:	4606      	mov	r6, r0
 800dcd6:	f7f2 fee3 	bl	8000aa0 <__aeabi_d2iz>
 800dcda:	f7f2 fbc7 	bl	800046c <__aeabi_i2d>
 800dcde:	4602      	mov	r2, r0
 800dce0:	460b      	mov	r3, r1
 800dce2:	4630      	mov	r0, r6
 800dce4:	4639      	mov	r1, r7
 800dce6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dcea:	f7f2 fa71 	bl	80001d0 <__aeabi_dsub>
 800dcee:	4b19      	ldr	r3, [pc, #100]	; (800dd54 <__ieee754_rem_pio2+0x40c>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f7f2 fc25 	bl	8000540 <__aeabi_dmul>
 800dcf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dcfa:	ad04      	add	r5, sp, #16
 800dcfc:	f04f 0803 	mov.w	r8, #3
 800dd00:	46a9      	mov	r9, r5
 800dd02:	2600      	movs	r6, #0
 800dd04:	2700      	movs	r7, #0
 800dd06:	4632      	mov	r2, r6
 800dd08:	463b      	mov	r3, r7
 800dd0a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800dd0e:	46c3      	mov	fp, r8
 800dd10:	3d08      	subs	r5, #8
 800dd12:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800dd16:	f7f2 fe7b 	bl	8000a10 <__aeabi_dcmpeq>
 800dd1a:	2800      	cmp	r0, #0
 800dd1c:	d1f3      	bne.n	800dd06 <__ieee754_rem_pio2+0x3be>
 800dd1e:	4b0e      	ldr	r3, [pc, #56]	; (800dd58 <__ieee754_rem_pio2+0x410>)
 800dd20:	9301      	str	r3, [sp, #4]
 800dd22:	2302      	movs	r3, #2
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	4622      	mov	r2, r4
 800dd28:	465b      	mov	r3, fp
 800dd2a:	4651      	mov	r1, sl
 800dd2c:	4648      	mov	r0, r9
 800dd2e:	f000 facf 	bl	800e2d0 <__kernel_rem_pio2>
 800dd32:	9b02      	ldr	r3, [sp, #8]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	4683      	mov	fp, r0
 800dd38:	f6bf ae46 	bge.w	800d9c8 <__ieee754_rem_pio2+0x80>
 800dd3c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800dd40:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dd44:	f8ca 3004 	str.w	r3, [sl, #4]
 800dd48:	f8da 300c 	ldr.w	r3, [sl, #12]
 800dd4c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dd50:	e73a      	b.n	800dbc8 <__ieee754_rem_pio2+0x280>
 800dd52:	bf00      	nop
 800dd54:	41700000 	.word	0x41700000
 800dd58:	0800f918 	.word	0x0800f918

0800dd5c <__ieee754_sqrt>:
 800dd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd60:	ec55 4b10 	vmov	r4, r5, d0
 800dd64:	4e56      	ldr	r6, [pc, #344]	; (800dec0 <__ieee754_sqrt+0x164>)
 800dd66:	43ae      	bics	r6, r5
 800dd68:	ee10 0a10 	vmov	r0, s0
 800dd6c:	ee10 3a10 	vmov	r3, s0
 800dd70:	4629      	mov	r1, r5
 800dd72:	462a      	mov	r2, r5
 800dd74:	d110      	bne.n	800dd98 <__ieee754_sqrt+0x3c>
 800dd76:	ee10 2a10 	vmov	r2, s0
 800dd7a:	462b      	mov	r3, r5
 800dd7c:	f7f2 fbe0 	bl	8000540 <__aeabi_dmul>
 800dd80:	4602      	mov	r2, r0
 800dd82:	460b      	mov	r3, r1
 800dd84:	4620      	mov	r0, r4
 800dd86:	4629      	mov	r1, r5
 800dd88:	f7f2 fa24 	bl	80001d4 <__adddf3>
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	460d      	mov	r5, r1
 800dd90:	ec45 4b10 	vmov	d0, r4, r5
 800dd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd98:	2d00      	cmp	r5, #0
 800dd9a:	dc10      	bgt.n	800ddbe <__ieee754_sqrt+0x62>
 800dd9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dda0:	4330      	orrs	r0, r6
 800dda2:	d0f5      	beq.n	800dd90 <__ieee754_sqrt+0x34>
 800dda4:	b15d      	cbz	r5, 800ddbe <__ieee754_sqrt+0x62>
 800dda6:	ee10 2a10 	vmov	r2, s0
 800ddaa:	462b      	mov	r3, r5
 800ddac:	ee10 0a10 	vmov	r0, s0
 800ddb0:	f7f2 fa0e 	bl	80001d0 <__aeabi_dsub>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	460b      	mov	r3, r1
 800ddb8:	f7f2 fcec 	bl	8000794 <__aeabi_ddiv>
 800ddbc:	e7e6      	b.n	800dd8c <__ieee754_sqrt+0x30>
 800ddbe:	1509      	asrs	r1, r1, #20
 800ddc0:	d076      	beq.n	800deb0 <__ieee754_sqrt+0x154>
 800ddc2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ddc6:	07ce      	lsls	r6, r1, #31
 800ddc8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ddcc:	bf5e      	ittt	pl
 800ddce:	0fda      	lsrpl	r2, r3, #31
 800ddd0:	005b      	lslpl	r3, r3, #1
 800ddd2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ddd6:	0fda      	lsrs	r2, r3, #31
 800ddd8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800dddc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800dde0:	2000      	movs	r0, #0
 800dde2:	106d      	asrs	r5, r5, #1
 800dde4:	005b      	lsls	r3, r3, #1
 800dde6:	f04f 0e16 	mov.w	lr, #22
 800ddea:	4684      	mov	ip, r0
 800ddec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ddf0:	eb0c 0401 	add.w	r4, ip, r1
 800ddf4:	4294      	cmp	r4, r2
 800ddf6:	bfde      	ittt	le
 800ddf8:	1b12      	suble	r2, r2, r4
 800ddfa:	eb04 0c01 	addle.w	ip, r4, r1
 800ddfe:	1840      	addle	r0, r0, r1
 800de00:	0052      	lsls	r2, r2, #1
 800de02:	f1be 0e01 	subs.w	lr, lr, #1
 800de06:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800de0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800de0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de12:	d1ed      	bne.n	800ddf0 <__ieee754_sqrt+0x94>
 800de14:	4671      	mov	r1, lr
 800de16:	2720      	movs	r7, #32
 800de18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800de1c:	4562      	cmp	r2, ip
 800de1e:	eb04 060e 	add.w	r6, r4, lr
 800de22:	dc02      	bgt.n	800de2a <__ieee754_sqrt+0xce>
 800de24:	d113      	bne.n	800de4e <__ieee754_sqrt+0xf2>
 800de26:	429e      	cmp	r6, r3
 800de28:	d811      	bhi.n	800de4e <__ieee754_sqrt+0xf2>
 800de2a:	2e00      	cmp	r6, #0
 800de2c:	eb06 0e04 	add.w	lr, r6, r4
 800de30:	da43      	bge.n	800deba <__ieee754_sqrt+0x15e>
 800de32:	f1be 0f00 	cmp.w	lr, #0
 800de36:	db40      	blt.n	800deba <__ieee754_sqrt+0x15e>
 800de38:	f10c 0801 	add.w	r8, ip, #1
 800de3c:	eba2 020c 	sub.w	r2, r2, ip
 800de40:	429e      	cmp	r6, r3
 800de42:	bf88      	it	hi
 800de44:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800de48:	1b9b      	subs	r3, r3, r6
 800de4a:	4421      	add	r1, r4
 800de4c:	46c4      	mov	ip, r8
 800de4e:	0052      	lsls	r2, r2, #1
 800de50:	3f01      	subs	r7, #1
 800de52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800de56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800de5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de5e:	d1dd      	bne.n	800de1c <__ieee754_sqrt+0xc0>
 800de60:	4313      	orrs	r3, r2
 800de62:	d006      	beq.n	800de72 <__ieee754_sqrt+0x116>
 800de64:	1c4c      	adds	r4, r1, #1
 800de66:	bf13      	iteet	ne
 800de68:	3101      	addne	r1, #1
 800de6a:	3001      	addeq	r0, #1
 800de6c:	4639      	moveq	r1, r7
 800de6e:	f021 0101 	bicne.w	r1, r1, #1
 800de72:	1043      	asrs	r3, r0, #1
 800de74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800de78:	0849      	lsrs	r1, r1, #1
 800de7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800de7e:	07c2      	lsls	r2, r0, #31
 800de80:	bf48      	it	mi
 800de82:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800de86:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800de8a:	460c      	mov	r4, r1
 800de8c:	463d      	mov	r5, r7
 800de8e:	e77f      	b.n	800dd90 <__ieee754_sqrt+0x34>
 800de90:	0ada      	lsrs	r2, r3, #11
 800de92:	3815      	subs	r0, #21
 800de94:	055b      	lsls	r3, r3, #21
 800de96:	2a00      	cmp	r2, #0
 800de98:	d0fa      	beq.n	800de90 <__ieee754_sqrt+0x134>
 800de9a:	02d7      	lsls	r7, r2, #11
 800de9c:	d50a      	bpl.n	800deb4 <__ieee754_sqrt+0x158>
 800de9e:	f1c1 0420 	rsb	r4, r1, #32
 800dea2:	fa23 f404 	lsr.w	r4, r3, r4
 800dea6:	1e4d      	subs	r5, r1, #1
 800dea8:	408b      	lsls	r3, r1
 800deaa:	4322      	orrs	r2, r4
 800deac:	1b41      	subs	r1, r0, r5
 800deae:	e788      	b.n	800ddc2 <__ieee754_sqrt+0x66>
 800deb0:	4608      	mov	r0, r1
 800deb2:	e7f0      	b.n	800de96 <__ieee754_sqrt+0x13a>
 800deb4:	0052      	lsls	r2, r2, #1
 800deb6:	3101      	adds	r1, #1
 800deb8:	e7ef      	b.n	800de9a <__ieee754_sqrt+0x13e>
 800deba:	46e0      	mov	r8, ip
 800debc:	e7be      	b.n	800de3c <__ieee754_sqrt+0xe0>
 800debe:	bf00      	nop
 800dec0:	7ff00000 	.word	0x7ff00000

0800dec4 <__ieee754_rem_pio2f>:
 800dec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dec6:	ee10 6a10 	vmov	r6, s0
 800deca:	4b8e      	ldr	r3, [pc, #568]	; (800e104 <__ieee754_rem_pio2f+0x240>)
 800decc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ded0:	429d      	cmp	r5, r3
 800ded2:	b087      	sub	sp, #28
 800ded4:	eef0 7a40 	vmov.f32	s15, s0
 800ded8:	4604      	mov	r4, r0
 800deda:	dc05      	bgt.n	800dee8 <__ieee754_rem_pio2f+0x24>
 800dedc:	2300      	movs	r3, #0
 800dede:	ed80 0a00 	vstr	s0, [r0]
 800dee2:	6043      	str	r3, [r0, #4]
 800dee4:	2000      	movs	r0, #0
 800dee6:	e01a      	b.n	800df1e <__ieee754_rem_pio2f+0x5a>
 800dee8:	4b87      	ldr	r3, [pc, #540]	; (800e108 <__ieee754_rem_pio2f+0x244>)
 800deea:	429d      	cmp	r5, r3
 800deec:	dc46      	bgt.n	800df7c <__ieee754_rem_pio2f+0xb8>
 800deee:	2e00      	cmp	r6, #0
 800def0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800e10c <__ieee754_rem_pio2f+0x248>
 800def4:	4b86      	ldr	r3, [pc, #536]	; (800e110 <__ieee754_rem_pio2f+0x24c>)
 800def6:	f025 050f 	bic.w	r5, r5, #15
 800defa:	dd1f      	ble.n	800df3c <__ieee754_rem_pio2f+0x78>
 800defc:	429d      	cmp	r5, r3
 800defe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800df02:	d00e      	beq.n	800df22 <__ieee754_rem_pio2f+0x5e>
 800df04:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800e114 <__ieee754_rem_pio2f+0x250>
 800df08:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800df0c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800df10:	ed80 0a00 	vstr	s0, [r0]
 800df14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df18:	2001      	movs	r0, #1
 800df1a:	edc4 7a01 	vstr	s15, [r4, #4]
 800df1e:	b007      	add	sp, #28
 800df20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df22:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e118 <__ieee754_rem_pio2f+0x254>
 800df26:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800e11c <__ieee754_rem_pio2f+0x258>
 800df2a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800df2e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800df32:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800df36:	edc0 6a00 	vstr	s13, [r0]
 800df3a:	e7eb      	b.n	800df14 <__ieee754_rem_pio2f+0x50>
 800df3c:	429d      	cmp	r5, r3
 800df3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800df42:	d00e      	beq.n	800df62 <__ieee754_rem_pio2f+0x9e>
 800df44:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800e114 <__ieee754_rem_pio2f+0x250>
 800df48:	ee37 0a87 	vadd.f32	s0, s15, s14
 800df4c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800df50:	ed80 0a00 	vstr	s0, [r0]
 800df54:	ee77 7a87 	vadd.f32	s15, s15, s14
 800df58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df5c:	edc4 7a01 	vstr	s15, [r4, #4]
 800df60:	e7dd      	b.n	800df1e <__ieee754_rem_pio2f+0x5a>
 800df62:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800e118 <__ieee754_rem_pio2f+0x254>
 800df66:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800e11c <__ieee754_rem_pio2f+0x258>
 800df6a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800df6e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800df72:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800df76:	edc0 6a00 	vstr	s13, [r0]
 800df7a:	e7eb      	b.n	800df54 <__ieee754_rem_pio2f+0x90>
 800df7c:	4b68      	ldr	r3, [pc, #416]	; (800e120 <__ieee754_rem_pio2f+0x25c>)
 800df7e:	429d      	cmp	r5, r3
 800df80:	dc72      	bgt.n	800e068 <__ieee754_rem_pio2f+0x1a4>
 800df82:	f001 f9e7 	bl	800f354 <fabsf>
 800df86:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e124 <__ieee754_rem_pio2f+0x260>
 800df8a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800df8e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800df92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800df9a:	ee17 0a90 	vmov	r0, s15
 800df9e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e10c <__ieee754_rem_pio2f+0x248>
 800dfa2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800dfa6:	281f      	cmp	r0, #31
 800dfa8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800e114 <__ieee754_rem_pio2f+0x250>
 800dfac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfb0:	eeb1 6a47 	vneg.f32	s12, s14
 800dfb4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800dfb8:	ee16 2a90 	vmov	r2, s13
 800dfbc:	dc1c      	bgt.n	800dff8 <__ieee754_rem_pio2f+0x134>
 800dfbe:	495a      	ldr	r1, [pc, #360]	; (800e128 <__ieee754_rem_pio2f+0x264>)
 800dfc0:	1e47      	subs	r7, r0, #1
 800dfc2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800dfc6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800dfca:	428b      	cmp	r3, r1
 800dfcc:	d014      	beq.n	800dff8 <__ieee754_rem_pio2f+0x134>
 800dfce:	6022      	str	r2, [r4, #0]
 800dfd0:	ed94 7a00 	vldr	s14, [r4]
 800dfd4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800dfd8:	2e00      	cmp	r6, #0
 800dfda:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dfde:	ed84 0a01 	vstr	s0, [r4, #4]
 800dfe2:	da9c      	bge.n	800df1e <__ieee754_rem_pio2f+0x5a>
 800dfe4:	eeb1 7a47 	vneg.f32	s14, s14
 800dfe8:	eeb1 0a40 	vneg.f32	s0, s0
 800dfec:	ed84 7a00 	vstr	s14, [r4]
 800dff0:	ed84 0a01 	vstr	s0, [r4, #4]
 800dff4:	4240      	negs	r0, r0
 800dff6:	e792      	b.n	800df1e <__ieee754_rem_pio2f+0x5a>
 800dff8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800dffc:	15eb      	asrs	r3, r5, #23
 800dffe:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800e002:	2d08      	cmp	r5, #8
 800e004:	dde3      	ble.n	800dfce <__ieee754_rem_pio2f+0x10a>
 800e006:	eddf 7a44 	vldr	s15, [pc, #272]	; 800e118 <__ieee754_rem_pio2f+0x254>
 800e00a:	eef0 6a40 	vmov.f32	s13, s0
 800e00e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800e012:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e016:	eea6 0a27 	vfma.f32	s0, s12, s15
 800e01a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800e11c <__ieee754_rem_pio2f+0x258>
 800e01e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800e022:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800e026:	eef0 7a40 	vmov.f32	s15, s0
 800e02a:	ee15 2a90 	vmov	r2, s11
 800e02e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e032:	1a5b      	subs	r3, r3, r1
 800e034:	2b19      	cmp	r3, #25
 800e036:	dc04      	bgt.n	800e042 <__ieee754_rem_pio2f+0x17e>
 800e038:	edc4 5a00 	vstr	s11, [r4]
 800e03c:	eeb0 0a66 	vmov.f32	s0, s13
 800e040:	e7c6      	b.n	800dfd0 <__ieee754_rem_pio2f+0x10c>
 800e042:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800e12c <__ieee754_rem_pio2f+0x268>
 800e046:	eeb0 0a66 	vmov.f32	s0, s13
 800e04a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e04e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e052:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e130 <__ieee754_rem_pio2f+0x26c>
 800e056:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e05a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e05e:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e062:	ed84 7a00 	vstr	s14, [r4]
 800e066:	e7b3      	b.n	800dfd0 <__ieee754_rem_pio2f+0x10c>
 800e068:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e06c:	db06      	blt.n	800e07c <__ieee754_rem_pio2f+0x1b8>
 800e06e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e072:	edc0 7a01 	vstr	s15, [r0, #4]
 800e076:	edc0 7a00 	vstr	s15, [r0]
 800e07a:	e733      	b.n	800dee4 <__ieee754_rem_pio2f+0x20>
 800e07c:	15ea      	asrs	r2, r5, #23
 800e07e:	3a86      	subs	r2, #134	; 0x86
 800e080:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e084:	ee07 3a90 	vmov	s15, r3
 800e088:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e08c:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e134 <__ieee754_rem_pio2f+0x270>
 800e090:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e098:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e09c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e0a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e0a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e0a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0ac:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e0b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e0b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0bc:	edcd 7a05 	vstr	s15, [sp, #20]
 800e0c0:	d11e      	bne.n	800e100 <__ieee754_rem_pio2f+0x23c>
 800e0c2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ca:	bf14      	ite	ne
 800e0cc:	2302      	movne	r3, #2
 800e0ce:	2301      	moveq	r3, #1
 800e0d0:	4919      	ldr	r1, [pc, #100]	; (800e138 <__ieee754_rem_pio2f+0x274>)
 800e0d2:	9101      	str	r1, [sp, #4]
 800e0d4:	2102      	movs	r1, #2
 800e0d6:	9100      	str	r1, [sp, #0]
 800e0d8:	a803      	add	r0, sp, #12
 800e0da:	4621      	mov	r1, r4
 800e0dc:	f000 fd56 	bl	800eb8c <__kernel_rem_pio2f>
 800e0e0:	2e00      	cmp	r6, #0
 800e0e2:	f6bf af1c 	bge.w	800df1e <__ieee754_rem_pio2f+0x5a>
 800e0e6:	edd4 7a00 	vldr	s15, [r4]
 800e0ea:	eef1 7a67 	vneg.f32	s15, s15
 800e0ee:	edc4 7a00 	vstr	s15, [r4]
 800e0f2:	edd4 7a01 	vldr	s15, [r4, #4]
 800e0f6:	eef1 7a67 	vneg.f32	s15, s15
 800e0fa:	edc4 7a01 	vstr	s15, [r4, #4]
 800e0fe:	e779      	b.n	800dff4 <__ieee754_rem_pio2f+0x130>
 800e100:	2303      	movs	r3, #3
 800e102:	e7e5      	b.n	800e0d0 <__ieee754_rem_pio2f+0x20c>
 800e104:	3f490fd8 	.word	0x3f490fd8
 800e108:	4016cbe3 	.word	0x4016cbe3
 800e10c:	3fc90f80 	.word	0x3fc90f80
 800e110:	3fc90fd0 	.word	0x3fc90fd0
 800e114:	37354443 	.word	0x37354443
 800e118:	37354400 	.word	0x37354400
 800e11c:	2e85a308 	.word	0x2e85a308
 800e120:	43490f80 	.word	0x43490f80
 800e124:	3f22f984 	.word	0x3f22f984
 800e128:	0800fa20 	.word	0x0800fa20
 800e12c:	2e85a300 	.word	0x2e85a300
 800e130:	248d3132 	.word	0x248d3132
 800e134:	43800000 	.word	0x43800000
 800e138:	0800faa0 	.word	0x0800faa0
 800e13c:	00000000 	.word	0x00000000

0800e140 <__kernel_cos>:
 800e140:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	ec57 6b10 	vmov	r6, r7, d0
 800e148:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e14c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e150:	ed8d 1b00 	vstr	d1, [sp]
 800e154:	da07      	bge.n	800e166 <__kernel_cos+0x26>
 800e156:	ee10 0a10 	vmov	r0, s0
 800e15a:	4639      	mov	r1, r7
 800e15c:	f7f2 fca0 	bl	8000aa0 <__aeabi_d2iz>
 800e160:	2800      	cmp	r0, #0
 800e162:	f000 8088 	beq.w	800e276 <__kernel_cos+0x136>
 800e166:	4632      	mov	r2, r6
 800e168:	463b      	mov	r3, r7
 800e16a:	4630      	mov	r0, r6
 800e16c:	4639      	mov	r1, r7
 800e16e:	f7f2 f9e7 	bl	8000540 <__aeabi_dmul>
 800e172:	4b51      	ldr	r3, [pc, #324]	; (800e2b8 <__kernel_cos+0x178>)
 800e174:	2200      	movs	r2, #0
 800e176:	4604      	mov	r4, r0
 800e178:	460d      	mov	r5, r1
 800e17a:	f7f2 f9e1 	bl	8000540 <__aeabi_dmul>
 800e17e:	a340      	add	r3, pc, #256	; (adr r3, 800e280 <__kernel_cos+0x140>)
 800e180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e184:	4682      	mov	sl, r0
 800e186:	468b      	mov	fp, r1
 800e188:	4620      	mov	r0, r4
 800e18a:	4629      	mov	r1, r5
 800e18c:	f7f2 f9d8 	bl	8000540 <__aeabi_dmul>
 800e190:	a33d      	add	r3, pc, #244	; (adr r3, 800e288 <__kernel_cos+0x148>)
 800e192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e196:	f7f2 f81d 	bl	80001d4 <__adddf3>
 800e19a:	4622      	mov	r2, r4
 800e19c:	462b      	mov	r3, r5
 800e19e:	f7f2 f9cf 	bl	8000540 <__aeabi_dmul>
 800e1a2:	a33b      	add	r3, pc, #236	; (adr r3, 800e290 <__kernel_cos+0x150>)
 800e1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a8:	f7f2 f812 	bl	80001d0 <__aeabi_dsub>
 800e1ac:	4622      	mov	r2, r4
 800e1ae:	462b      	mov	r3, r5
 800e1b0:	f7f2 f9c6 	bl	8000540 <__aeabi_dmul>
 800e1b4:	a338      	add	r3, pc, #224	; (adr r3, 800e298 <__kernel_cos+0x158>)
 800e1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ba:	f7f2 f80b 	bl	80001d4 <__adddf3>
 800e1be:	4622      	mov	r2, r4
 800e1c0:	462b      	mov	r3, r5
 800e1c2:	f7f2 f9bd 	bl	8000540 <__aeabi_dmul>
 800e1c6:	a336      	add	r3, pc, #216	; (adr r3, 800e2a0 <__kernel_cos+0x160>)
 800e1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1cc:	f7f2 f800 	bl	80001d0 <__aeabi_dsub>
 800e1d0:	4622      	mov	r2, r4
 800e1d2:	462b      	mov	r3, r5
 800e1d4:	f7f2 f9b4 	bl	8000540 <__aeabi_dmul>
 800e1d8:	a333      	add	r3, pc, #204	; (adr r3, 800e2a8 <__kernel_cos+0x168>)
 800e1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1de:	f7f1 fff9 	bl	80001d4 <__adddf3>
 800e1e2:	4622      	mov	r2, r4
 800e1e4:	462b      	mov	r3, r5
 800e1e6:	f7f2 f9ab 	bl	8000540 <__aeabi_dmul>
 800e1ea:	4622      	mov	r2, r4
 800e1ec:	462b      	mov	r3, r5
 800e1ee:	f7f2 f9a7 	bl	8000540 <__aeabi_dmul>
 800e1f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	460d      	mov	r5, r1
 800e1fa:	4630      	mov	r0, r6
 800e1fc:	4639      	mov	r1, r7
 800e1fe:	f7f2 f99f 	bl	8000540 <__aeabi_dmul>
 800e202:	460b      	mov	r3, r1
 800e204:	4602      	mov	r2, r0
 800e206:	4629      	mov	r1, r5
 800e208:	4620      	mov	r0, r4
 800e20a:	f7f1 ffe1 	bl	80001d0 <__aeabi_dsub>
 800e20e:	4b2b      	ldr	r3, [pc, #172]	; (800e2bc <__kernel_cos+0x17c>)
 800e210:	4598      	cmp	r8, r3
 800e212:	4606      	mov	r6, r0
 800e214:	460f      	mov	r7, r1
 800e216:	dc10      	bgt.n	800e23a <__kernel_cos+0xfa>
 800e218:	4602      	mov	r2, r0
 800e21a:	460b      	mov	r3, r1
 800e21c:	4650      	mov	r0, sl
 800e21e:	4659      	mov	r1, fp
 800e220:	f7f1 ffd6 	bl	80001d0 <__aeabi_dsub>
 800e224:	460b      	mov	r3, r1
 800e226:	4926      	ldr	r1, [pc, #152]	; (800e2c0 <__kernel_cos+0x180>)
 800e228:	4602      	mov	r2, r0
 800e22a:	2000      	movs	r0, #0
 800e22c:	f7f1 ffd0 	bl	80001d0 <__aeabi_dsub>
 800e230:	ec41 0b10 	vmov	d0, r0, r1
 800e234:	b003      	add	sp, #12
 800e236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e23a:	4b22      	ldr	r3, [pc, #136]	; (800e2c4 <__kernel_cos+0x184>)
 800e23c:	4920      	ldr	r1, [pc, #128]	; (800e2c0 <__kernel_cos+0x180>)
 800e23e:	4598      	cmp	r8, r3
 800e240:	bfcc      	ite	gt
 800e242:	4d21      	ldrgt	r5, [pc, #132]	; (800e2c8 <__kernel_cos+0x188>)
 800e244:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e248:	2400      	movs	r4, #0
 800e24a:	4622      	mov	r2, r4
 800e24c:	462b      	mov	r3, r5
 800e24e:	2000      	movs	r0, #0
 800e250:	f7f1 ffbe 	bl	80001d0 <__aeabi_dsub>
 800e254:	4622      	mov	r2, r4
 800e256:	4680      	mov	r8, r0
 800e258:	4689      	mov	r9, r1
 800e25a:	462b      	mov	r3, r5
 800e25c:	4650      	mov	r0, sl
 800e25e:	4659      	mov	r1, fp
 800e260:	f7f1 ffb6 	bl	80001d0 <__aeabi_dsub>
 800e264:	4632      	mov	r2, r6
 800e266:	463b      	mov	r3, r7
 800e268:	f7f1 ffb2 	bl	80001d0 <__aeabi_dsub>
 800e26c:	4602      	mov	r2, r0
 800e26e:	460b      	mov	r3, r1
 800e270:	4640      	mov	r0, r8
 800e272:	4649      	mov	r1, r9
 800e274:	e7da      	b.n	800e22c <__kernel_cos+0xec>
 800e276:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e2b0 <__kernel_cos+0x170>
 800e27a:	e7db      	b.n	800e234 <__kernel_cos+0xf4>
 800e27c:	f3af 8000 	nop.w
 800e280:	be8838d4 	.word	0xbe8838d4
 800e284:	bda8fae9 	.word	0xbda8fae9
 800e288:	bdb4b1c4 	.word	0xbdb4b1c4
 800e28c:	3e21ee9e 	.word	0x3e21ee9e
 800e290:	809c52ad 	.word	0x809c52ad
 800e294:	3e927e4f 	.word	0x3e927e4f
 800e298:	19cb1590 	.word	0x19cb1590
 800e29c:	3efa01a0 	.word	0x3efa01a0
 800e2a0:	16c15177 	.word	0x16c15177
 800e2a4:	3f56c16c 	.word	0x3f56c16c
 800e2a8:	5555554c 	.word	0x5555554c
 800e2ac:	3fa55555 	.word	0x3fa55555
 800e2b0:	00000000 	.word	0x00000000
 800e2b4:	3ff00000 	.word	0x3ff00000
 800e2b8:	3fe00000 	.word	0x3fe00000
 800e2bc:	3fd33332 	.word	0x3fd33332
 800e2c0:	3ff00000 	.word	0x3ff00000
 800e2c4:	3fe90000 	.word	0x3fe90000
 800e2c8:	3fd20000 	.word	0x3fd20000
 800e2cc:	00000000 	.word	0x00000000

0800e2d0 <__kernel_rem_pio2>:
 800e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d4:	ed2d 8b02 	vpush	{d8}
 800e2d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e2dc:	f112 0f14 	cmn.w	r2, #20
 800e2e0:	9308      	str	r3, [sp, #32]
 800e2e2:	9101      	str	r1, [sp, #4]
 800e2e4:	4bc6      	ldr	r3, [pc, #792]	; (800e600 <__kernel_rem_pio2+0x330>)
 800e2e6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e2e8:	9009      	str	r0, [sp, #36]	; 0x24
 800e2ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e2ee:	9304      	str	r3, [sp, #16]
 800e2f0:	9b08      	ldr	r3, [sp, #32]
 800e2f2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e2f6:	bfa8      	it	ge
 800e2f8:	1ed4      	subge	r4, r2, #3
 800e2fa:	9306      	str	r3, [sp, #24]
 800e2fc:	bfb2      	itee	lt
 800e2fe:	2400      	movlt	r4, #0
 800e300:	2318      	movge	r3, #24
 800e302:	fb94 f4f3 	sdivge	r4, r4, r3
 800e306:	f06f 0317 	mvn.w	r3, #23
 800e30a:	fb04 3303 	mla	r3, r4, r3, r3
 800e30e:	eb03 0a02 	add.w	sl, r3, r2
 800e312:	9b04      	ldr	r3, [sp, #16]
 800e314:	9a06      	ldr	r2, [sp, #24]
 800e316:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e5f0 <__kernel_rem_pio2+0x320>
 800e31a:	eb03 0802 	add.w	r8, r3, r2
 800e31e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e320:	1aa7      	subs	r7, r4, r2
 800e322:	ae20      	add	r6, sp, #128	; 0x80
 800e324:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e328:	2500      	movs	r5, #0
 800e32a:	4545      	cmp	r5, r8
 800e32c:	dd18      	ble.n	800e360 <__kernel_rem_pio2+0x90>
 800e32e:	9b08      	ldr	r3, [sp, #32]
 800e330:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e334:	aa20      	add	r2, sp, #128	; 0x80
 800e336:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800e5f0 <__kernel_rem_pio2+0x320>
 800e33a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e33e:	f1c3 0301 	rsb	r3, r3, #1
 800e342:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e346:	9307      	str	r3, [sp, #28]
 800e348:	9b07      	ldr	r3, [sp, #28]
 800e34a:	9a04      	ldr	r2, [sp, #16]
 800e34c:	4443      	add	r3, r8
 800e34e:	429a      	cmp	r2, r3
 800e350:	db2f      	blt.n	800e3b2 <__kernel_rem_pio2+0xe2>
 800e352:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e356:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e35a:	462f      	mov	r7, r5
 800e35c:	2600      	movs	r6, #0
 800e35e:	e01b      	b.n	800e398 <__kernel_rem_pio2+0xc8>
 800e360:	42ef      	cmn	r7, r5
 800e362:	d407      	bmi.n	800e374 <__kernel_rem_pio2+0xa4>
 800e364:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e368:	f7f2 f880 	bl	800046c <__aeabi_i2d>
 800e36c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e370:	3501      	adds	r5, #1
 800e372:	e7da      	b.n	800e32a <__kernel_rem_pio2+0x5a>
 800e374:	ec51 0b18 	vmov	r0, r1, d8
 800e378:	e7f8      	b.n	800e36c <__kernel_rem_pio2+0x9c>
 800e37a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e37e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e382:	f7f2 f8dd 	bl	8000540 <__aeabi_dmul>
 800e386:	4602      	mov	r2, r0
 800e388:	460b      	mov	r3, r1
 800e38a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e38e:	f7f1 ff21 	bl	80001d4 <__adddf3>
 800e392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e396:	3601      	adds	r6, #1
 800e398:	9b06      	ldr	r3, [sp, #24]
 800e39a:	429e      	cmp	r6, r3
 800e39c:	f1a7 0708 	sub.w	r7, r7, #8
 800e3a0:	ddeb      	ble.n	800e37a <__kernel_rem_pio2+0xaa>
 800e3a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e3a6:	3508      	adds	r5, #8
 800e3a8:	ecab 7b02 	vstmia	fp!, {d7}
 800e3ac:	f108 0801 	add.w	r8, r8, #1
 800e3b0:	e7ca      	b.n	800e348 <__kernel_rem_pio2+0x78>
 800e3b2:	9b04      	ldr	r3, [sp, #16]
 800e3b4:	aa0c      	add	r2, sp, #48	; 0x30
 800e3b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3bc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e3be:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e3c2:	9c04      	ldr	r4, [sp, #16]
 800e3c4:	930a      	str	r3, [sp, #40]	; 0x28
 800e3c6:	ab98      	add	r3, sp, #608	; 0x260
 800e3c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3cc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e3d0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800e3d4:	f8cd b008 	str.w	fp, [sp, #8]
 800e3d8:	4625      	mov	r5, r4
 800e3da:	2d00      	cmp	r5, #0
 800e3dc:	dc78      	bgt.n	800e4d0 <__kernel_rem_pio2+0x200>
 800e3de:	ec47 6b10 	vmov	d0, r6, r7
 800e3e2:	4650      	mov	r0, sl
 800e3e4:	f000 ff30 	bl	800f248 <scalbn>
 800e3e8:	ec57 6b10 	vmov	r6, r7, d0
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e3f2:	ee10 0a10 	vmov	r0, s0
 800e3f6:	4639      	mov	r1, r7
 800e3f8:	f7f2 f8a2 	bl	8000540 <__aeabi_dmul>
 800e3fc:	ec41 0b10 	vmov	d0, r0, r1
 800e400:	f000 fea2 	bl	800f148 <floor>
 800e404:	4b7f      	ldr	r3, [pc, #508]	; (800e604 <__kernel_rem_pio2+0x334>)
 800e406:	ec51 0b10 	vmov	r0, r1, d0
 800e40a:	2200      	movs	r2, #0
 800e40c:	f7f2 f898 	bl	8000540 <__aeabi_dmul>
 800e410:	4602      	mov	r2, r0
 800e412:	460b      	mov	r3, r1
 800e414:	4630      	mov	r0, r6
 800e416:	4639      	mov	r1, r7
 800e418:	f7f1 feda 	bl	80001d0 <__aeabi_dsub>
 800e41c:	460f      	mov	r7, r1
 800e41e:	4606      	mov	r6, r0
 800e420:	f7f2 fb3e 	bl	8000aa0 <__aeabi_d2iz>
 800e424:	9007      	str	r0, [sp, #28]
 800e426:	f7f2 f821 	bl	800046c <__aeabi_i2d>
 800e42a:	4602      	mov	r2, r0
 800e42c:	460b      	mov	r3, r1
 800e42e:	4630      	mov	r0, r6
 800e430:	4639      	mov	r1, r7
 800e432:	f7f1 fecd 	bl	80001d0 <__aeabi_dsub>
 800e436:	f1ba 0f00 	cmp.w	sl, #0
 800e43a:	4606      	mov	r6, r0
 800e43c:	460f      	mov	r7, r1
 800e43e:	dd70      	ble.n	800e522 <__kernel_rem_pio2+0x252>
 800e440:	1e62      	subs	r2, r4, #1
 800e442:	ab0c      	add	r3, sp, #48	; 0x30
 800e444:	9d07      	ldr	r5, [sp, #28]
 800e446:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e44a:	f1ca 0118 	rsb	r1, sl, #24
 800e44e:	fa40 f301 	asr.w	r3, r0, r1
 800e452:	441d      	add	r5, r3
 800e454:	408b      	lsls	r3, r1
 800e456:	1ac0      	subs	r0, r0, r3
 800e458:	ab0c      	add	r3, sp, #48	; 0x30
 800e45a:	9507      	str	r5, [sp, #28]
 800e45c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e460:	f1ca 0317 	rsb	r3, sl, #23
 800e464:	fa40 f303 	asr.w	r3, r0, r3
 800e468:	9302      	str	r3, [sp, #8]
 800e46a:	9b02      	ldr	r3, [sp, #8]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	dd66      	ble.n	800e53e <__kernel_rem_pio2+0x26e>
 800e470:	9b07      	ldr	r3, [sp, #28]
 800e472:	2200      	movs	r2, #0
 800e474:	3301      	adds	r3, #1
 800e476:	9307      	str	r3, [sp, #28]
 800e478:	4615      	mov	r5, r2
 800e47a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e47e:	4294      	cmp	r4, r2
 800e480:	f300 8099 	bgt.w	800e5b6 <__kernel_rem_pio2+0x2e6>
 800e484:	f1ba 0f00 	cmp.w	sl, #0
 800e488:	dd07      	ble.n	800e49a <__kernel_rem_pio2+0x1ca>
 800e48a:	f1ba 0f01 	cmp.w	sl, #1
 800e48e:	f000 80a5 	beq.w	800e5dc <__kernel_rem_pio2+0x30c>
 800e492:	f1ba 0f02 	cmp.w	sl, #2
 800e496:	f000 80c1 	beq.w	800e61c <__kernel_rem_pio2+0x34c>
 800e49a:	9b02      	ldr	r3, [sp, #8]
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	d14e      	bne.n	800e53e <__kernel_rem_pio2+0x26e>
 800e4a0:	4632      	mov	r2, r6
 800e4a2:	463b      	mov	r3, r7
 800e4a4:	4958      	ldr	r1, [pc, #352]	; (800e608 <__kernel_rem_pio2+0x338>)
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	f7f1 fe92 	bl	80001d0 <__aeabi_dsub>
 800e4ac:	4606      	mov	r6, r0
 800e4ae:	460f      	mov	r7, r1
 800e4b0:	2d00      	cmp	r5, #0
 800e4b2:	d044      	beq.n	800e53e <__kernel_rem_pio2+0x26e>
 800e4b4:	4650      	mov	r0, sl
 800e4b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e5f8 <__kernel_rem_pio2+0x328>
 800e4ba:	f000 fec5 	bl	800f248 <scalbn>
 800e4be:	4630      	mov	r0, r6
 800e4c0:	4639      	mov	r1, r7
 800e4c2:	ec53 2b10 	vmov	r2, r3, d0
 800e4c6:	f7f1 fe83 	bl	80001d0 <__aeabi_dsub>
 800e4ca:	4606      	mov	r6, r0
 800e4cc:	460f      	mov	r7, r1
 800e4ce:	e036      	b.n	800e53e <__kernel_rem_pio2+0x26e>
 800e4d0:	4b4e      	ldr	r3, [pc, #312]	; (800e60c <__kernel_rem_pio2+0x33c>)
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	4639      	mov	r1, r7
 800e4d8:	f7f2 f832 	bl	8000540 <__aeabi_dmul>
 800e4dc:	f7f2 fae0 	bl	8000aa0 <__aeabi_d2iz>
 800e4e0:	f7f1 ffc4 	bl	800046c <__aeabi_i2d>
 800e4e4:	4b4a      	ldr	r3, [pc, #296]	; (800e610 <__kernel_rem_pio2+0x340>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	4680      	mov	r8, r0
 800e4ea:	4689      	mov	r9, r1
 800e4ec:	f7f2 f828 	bl	8000540 <__aeabi_dmul>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	4639      	mov	r1, r7
 800e4f8:	f7f1 fe6a 	bl	80001d0 <__aeabi_dsub>
 800e4fc:	f7f2 fad0 	bl	8000aa0 <__aeabi_d2iz>
 800e500:	9b02      	ldr	r3, [sp, #8]
 800e502:	f843 0b04 	str.w	r0, [r3], #4
 800e506:	3d01      	subs	r5, #1
 800e508:	9302      	str	r3, [sp, #8]
 800e50a:	ab70      	add	r3, sp, #448	; 0x1c0
 800e50c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e514:	4640      	mov	r0, r8
 800e516:	4649      	mov	r1, r9
 800e518:	f7f1 fe5c 	bl	80001d4 <__adddf3>
 800e51c:	4606      	mov	r6, r0
 800e51e:	460f      	mov	r7, r1
 800e520:	e75b      	b.n	800e3da <__kernel_rem_pio2+0x10a>
 800e522:	d105      	bne.n	800e530 <__kernel_rem_pio2+0x260>
 800e524:	1e63      	subs	r3, r4, #1
 800e526:	aa0c      	add	r2, sp, #48	; 0x30
 800e528:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e52c:	15c3      	asrs	r3, r0, #23
 800e52e:	e79b      	b.n	800e468 <__kernel_rem_pio2+0x198>
 800e530:	4b38      	ldr	r3, [pc, #224]	; (800e614 <__kernel_rem_pio2+0x344>)
 800e532:	2200      	movs	r2, #0
 800e534:	f7f2 fa8a 	bl	8000a4c <__aeabi_dcmpge>
 800e538:	2800      	cmp	r0, #0
 800e53a:	d139      	bne.n	800e5b0 <__kernel_rem_pio2+0x2e0>
 800e53c:	9002      	str	r0, [sp, #8]
 800e53e:	2200      	movs	r2, #0
 800e540:	2300      	movs	r3, #0
 800e542:	4630      	mov	r0, r6
 800e544:	4639      	mov	r1, r7
 800e546:	f7f2 fa63 	bl	8000a10 <__aeabi_dcmpeq>
 800e54a:	2800      	cmp	r0, #0
 800e54c:	f000 80b4 	beq.w	800e6b8 <__kernel_rem_pio2+0x3e8>
 800e550:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 800e554:	465b      	mov	r3, fp
 800e556:	2200      	movs	r2, #0
 800e558:	9904      	ldr	r1, [sp, #16]
 800e55a:	428b      	cmp	r3, r1
 800e55c:	da65      	bge.n	800e62a <__kernel_rem_pio2+0x35a>
 800e55e:	2a00      	cmp	r2, #0
 800e560:	d07b      	beq.n	800e65a <__kernel_rem_pio2+0x38a>
 800e562:	ab0c      	add	r3, sp, #48	; 0x30
 800e564:	f1aa 0a18 	sub.w	sl, sl, #24
 800e568:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f000 80a0 	beq.w	800e6b2 <__kernel_rem_pio2+0x3e2>
 800e572:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800e5f8 <__kernel_rem_pio2+0x328>
 800e576:	4650      	mov	r0, sl
 800e578:	f000 fe66 	bl	800f248 <scalbn>
 800e57c:	4f23      	ldr	r7, [pc, #140]	; (800e60c <__kernel_rem_pio2+0x33c>)
 800e57e:	ec55 4b10 	vmov	r4, r5, d0
 800e582:	46d8      	mov	r8, fp
 800e584:	2600      	movs	r6, #0
 800e586:	f1b8 0f00 	cmp.w	r8, #0
 800e58a:	f280 80cf 	bge.w	800e72c <__kernel_rem_pio2+0x45c>
 800e58e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800e5f0 <__kernel_rem_pio2+0x320>
 800e592:	465f      	mov	r7, fp
 800e594:	f04f 0800 	mov.w	r8, #0
 800e598:	2f00      	cmp	r7, #0
 800e59a:	f2c0 80fd 	blt.w	800e798 <__kernel_rem_pio2+0x4c8>
 800e59e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e5a0:	f8df a074 	ldr.w	sl, [pc, #116]	; 800e618 <__kernel_rem_pio2+0x348>
 800e5a4:	ec55 4b18 	vmov	r4, r5, d8
 800e5a8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800e5ac:	2600      	movs	r6, #0
 800e5ae:	e0e5      	b.n	800e77c <__kernel_rem_pio2+0x4ac>
 800e5b0:	2302      	movs	r3, #2
 800e5b2:	9302      	str	r3, [sp, #8]
 800e5b4:	e75c      	b.n	800e470 <__kernel_rem_pio2+0x1a0>
 800e5b6:	f8db 3000 	ldr.w	r3, [fp]
 800e5ba:	b955      	cbnz	r5, 800e5d2 <__kernel_rem_pio2+0x302>
 800e5bc:	b123      	cbz	r3, 800e5c8 <__kernel_rem_pio2+0x2f8>
 800e5be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e5c2:	f8cb 3000 	str.w	r3, [fp]
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	3201      	adds	r2, #1
 800e5ca:	f10b 0b04 	add.w	fp, fp, #4
 800e5ce:	461d      	mov	r5, r3
 800e5d0:	e755      	b.n	800e47e <__kernel_rem_pio2+0x1ae>
 800e5d2:	1acb      	subs	r3, r1, r3
 800e5d4:	f8cb 3000 	str.w	r3, [fp]
 800e5d8:	462b      	mov	r3, r5
 800e5da:	e7f5      	b.n	800e5c8 <__kernel_rem_pio2+0x2f8>
 800e5dc:	1e62      	subs	r2, r4, #1
 800e5de:	ab0c      	add	r3, sp, #48	; 0x30
 800e5e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e5e8:	a90c      	add	r1, sp, #48	; 0x30
 800e5ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e5ee:	e754      	b.n	800e49a <__kernel_rem_pio2+0x1ca>
	...
 800e5fc:	3ff00000 	.word	0x3ff00000
 800e600:	0800fdf8 	.word	0x0800fdf8
 800e604:	40200000 	.word	0x40200000
 800e608:	3ff00000 	.word	0x3ff00000
 800e60c:	3e700000 	.word	0x3e700000
 800e610:	41700000 	.word	0x41700000
 800e614:	3fe00000 	.word	0x3fe00000
 800e618:	0800fdb8 	.word	0x0800fdb8
 800e61c:	1e62      	subs	r2, r4, #1
 800e61e:	ab0c      	add	r3, sp, #48	; 0x30
 800e620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e624:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e628:	e7de      	b.n	800e5e8 <__kernel_rem_pio2+0x318>
 800e62a:	a90c      	add	r1, sp, #48	; 0x30
 800e62c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e630:	3b01      	subs	r3, #1
 800e632:	430a      	orrs	r2, r1
 800e634:	e790      	b.n	800e558 <__kernel_rem_pio2+0x288>
 800e636:	3301      	adds	r3, #1
 800e638:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e63c:	2900      	cmp	r1, #0
 800e63e:	d0fa      	beq.n	800e636 <__kernel_rem_pio2+0x366>
 800e640:	9a08      	ldr	r2, [sp, #32]
 800e642:	18e3      	adds	r3, r4, r3
 800e644:	18a6      	adds	r6, r4, r2
 800e646:	aa20      	add	r2, sp, #128	; 0x80
 800e648:	1c65      	adds	r5, r4, #1
 800e64a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e64e:	9302      	str	r3, [sp, #8]
 800e650:	9b02      	ldr	r3, [sp, #8]
 800e652:	42ab      	cmp	r3, r5
 800e654:	da04      	bge.n	800e660 <__kernel_rem_pio2+0x390>
 800e656:	461c      	mov	r4, r3
 800e658:	e6b5      	b.n	800e3c6 <__kernel_rem_pio2+0xf6>
 800e65a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e65c:	2301      	movs	r3, #1
 800e65e:	e7eb      	b.n	800e638 <__kernel_rem_pio2+0x368>
 800e660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e662:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e666:	f7f1 ff01 	bl	800046c <__aeabi_i2d>
 800e66a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e670:	46b3      	mov	fp, r6
 800e672:	461c      	mov	r4, r3
 800e674:	2700      	movs	r7, #0
 800e676:	f04f 0800 	mov.w	r8, #0
 800e67a:	f04f 0900 	mov.w	r9, #0
 800e67e:	9b06      	ldr	r3, [sp, #24]
 800e680:	429f      	cmp	r7, r3
 800e682:	dd06      	ble.n	800e692 <__kernel_rem_pio2+0x3c2>
 800e684:	ab70      	add	r3, sp, #448	; 0x1c0
 800e686:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e68a:	e9c3 8900 	strd	r8, r9, [r3]
 800e68e:	3501      	adds	r5, #1
 800e690:	e7de      	b.n	800e650 <__kernel_rem_pio2+0x380>
 800e692:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e696:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e69a:	f7f1 ff51 	bl	8000540 <__aeabi_dmul>
 800e69e:	4602      	mov	r2, r0
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	4640      	mov	r0, r8
 800e6a4:	4649      	mov	r1, r9
 800e6a6:	f7f1 fd95 	bl	80001d4 <__adddf3>
 800e6aa:	3701      	adds	r7, #1
 800e6ac:	4680      	mov	r8, r0
 800e6ae:	4689      	mov	r9, r1
 800e6b0:	e7e5      	b.n	800e67e <__kernel_rem_pio2+0x3ae>
 800e6b2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e6b6:	e754      	b.n	800e562 <__kernel_rem_pio2+0x292>
 800e6b8:	ec47 6b10 	vmov	d0, r6, r7
 800e6bc:	f1ca 0000 	rsb	r0, sl, #0
 800e6c0:	f000 fdc2 	bl	800f248 <scalbn>
 800e6c4:	ec57 6b10 	vmov	r6, r7, d0
 800e6c8:	4b9f      	ldr	r3, [pc, #636]	; (800e948 <__kernel_rem_pio2+0x678>)
 800e6ca:	ee10 0a10 	vmov	r0, s0
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	4639      	mov	r1, r7
 800e6d2:	f7f2 f9bb 	bl	8000a4c <__aeabi_dcmpge>
 800e6d6:	b300      	cbz	r0, 800e71a <__kernel_rem_pio2+0x44a>
 800e6d8:	4b9c      	ldr	r3, [pc, #624]	; (800e94c <__kernel_rem_pio2+0x67c>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	4630      	mov	r0, r6
 800e6de:	4639      	mov	r1, r7
 800e6e0:	f7f1 ff2e 	bl	8000540 <__aeabi_dmul>
 800e6e4:	f7f2 f9dc 	bl	8000aa0 <__aeabi_d2iz>
 800e6e8:	4605      	mov	r5, r0
 800e6ea:	f7f1 febf 	bl	800046c <__aeabi_i2d>
 800e6ee:	4b96      	ldr	r3, [pc, #600]	; (800e948 <__kernel_rem_pio2+0x678>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f7f1 ff25 	bl	8000540 <__aeabi_dmul>
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	4639      	mov	r1, r7
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	f7f1 fd67 	bl	80001d0 <__aeabi_dsub>
 800e702:	f7f2 f9cd 	bl	8000aa0 <__aeabi_d2iz>
 800e706:	f104 0b01 	add.w	fp, r4, #1
 800e70a:	ab0c      	add	r3, sp, #48	; 0x30
 800e70c:	f10a 0a18 	add.w	sl, sl, #24
 800e710:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e714:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800e718:	e72b      	b.n	800e572 <__kernel_rem_pio2+0x2a2>
 800e71a:	4630      	mov	r0, r6
 800e71c:	4639      	mov	r1, r7
 800e71e:	f7f2 f9bf 	bl	8000aa0 <__aeabi_d2iz>
 800e722:	ab0c      	add	r3, sp, #48	; 0x30
 800e724:	46a3      	mov	fp, r4
 800e726:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e72a:	e722      	b.n	800e572 <__kernel_rem_pio2+0x2a2>
 800e72c:	ab70      	add	r3, sp, #448	; 0x1c0
 800e72e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800e732:	ab0c      	add	r3, sp, #48	; 0x30
 800e734:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e738:	f7f1 fe98 	bl	800046c <__aeabi_i2d>
 800e73c:	4622      	mov	r2, r4
 800e73e:	462b      	mov	r3, r5
 800e740:	f7f1 fefe 	bl	8000540 <__aeabi_dmul>
 800e744:	4632      	mov	r2, r6
 800e746:	e9c9 0100 	strd	r0, r1, [r9]
 800e74a:	463b      	mov	r3, r7
 800e74c:	4620      	mov	r0, r4
 800e74e:	4629      	mov	r1, r5
 800e750:	f7f1 fef6 	bl	8000540 <__aeabi_dmul>
 800e754:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e758:	4604      	mov	r4, r0
 800e75a:	460d      	mov	r5, r1
 800e75c:	e713      	b.n	800e586 <__kernel_rem_pio2+0x2b6>
 800e75e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e762:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e766:	f7f1 feeb 	bl	8000540 <__aeabi_dmul>
 800e76a:	4602      	mov	r2, r0
 800e76c:	460b      	mov	r3, r1
 800e76e:	4620      	mov	r0, r4
 800e770:	4629      	mov	r1, r5
 800e772:	f7f1 fd2f 	bl	80001d4 <__adddf3>
 800e776:	3601      	adds	r6, #1
 800e778:	4604      	mov	r4, r0
 800e77a:	460d      	mov	r5, r1
 800e77c:	9b04      	ldr	r3, [sp, #16]
 800e77e:	429e      	cmp	r6, r3
 800e780:	dc01      	bgt.n	800e786 <__kernel_rem_pio2+0x4b6>
 800e782:	45b0      	cmp	r8, r6
 800e784:	daeb      	bge.n	800e75e <__kernel_rem_pio2+0x48e>
 800e786:	ab48      	add	r3, sp, #288	; 0x120
 800e788:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e78c:	e9c3 4500 	strd	r4, r5, [r3]
 800e790:	3f01      	subs	r7, #1
 800e792:	f108 0801 	add.w	r8, r8, #1
 800e796:	e6ff      	b.n	800e598 <__kernel_rem_pio2+0x2c8>
 800e798:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e79a:	2b02      	cmp	r3, #2
 800e79c:	dc0b      	bgt.n	800e7b6 <__kernel_rem_pio2+0x4e6>
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	dc6e      	bgt.n	800e880 <__kernel_rem_pio2+0x5b0>
 800e7a2:	d045      	beq.n	800e830 <__kernel_rem_pio2+0x560>
 800e7a4:	9b07      	ldr	r3, [sp, #28]
 800e7a6:	f003 0007 	and.w	r0, r3, #7
 800e7aa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e7ae:	ecbd 8b02 	vpop	{d8}
 800e7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e7b8:	2b03      	cmp	r3, #3
 800e7ba:	d1f3      	bne.n	800e7a4 <__kernel_rem_pio2+0x4d4>
 800e7bc:	ab48      	add	r3, sp, #288	; 0x120
 800e7be:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800e7c2:	46d0      	mov	r8, sl
 800e7c4:	46d9      	mov	r9, fp
 800e7c6:	f1b9 0f00 	cmp.w	r9, #0
 800e7ca:	f1a8 0808 	sub.w	r8, r8, #8
 800e7ce:	dc64      	bgt.n	800e89a <__kernel_rem_pio2+0x5ca>
 800e7d0:	465c      	mov	r4, fp
 800e7d2:	2c01      	cmp	r4, #1
 800e7d4:	f1aa 0a08 	sub.w	sl, sl, #8
 800e7d8:	dc7e      	bgt.n	800e8d8 <__kernel_rem_pio2+0x608>
 800e7da:	2000      	movs	r0, #0
 800e7dc:	2100      	movs	r1, #0
 800e7de:	f1bb 0f01 	cmp.w	fp, #1
 800e7e2:	f300 8097 	bgt.w	800e914 <__kernel_rem_pio2+0x644>
 800e7e6:	9b02      	ldr	r3, [sp, #8]
 800e7e8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800e7ec:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f040 8099 	bne.w	800e928 <__kernel_rem_pio2+0x658>
 800e7f6:	9b01      	ldr	r3, [sp, #4]
 800e7f8:	e9c3 5600 	strd	r5, r6, [r3]
 800e7fc:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e800:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e804:	e7ce      	b.n	800e7a4 <__kernel_rem_pio2+0x4d4>
 800e806:	ab48      	add	r3, sp, #288	; 0x120
 800e808:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	f7f1 fce0 	bl	80001d4 <__adddf3>
 800e814:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e818:	f1bb 0f00 	cmp.w	fp, #0
 800e81c:	daf3      	bge.n	800e806 <__kernel_rem_pio2+0x536>
 800e81e:	9b02      	ldr	r3, [sp, #8]
 800e820:	b113      	cbz	r3, 800e828 <__kernel_rem_pio2+0x558>
 800e822:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e826:	4619      	mov	r1, r3
 800e828:	9b01      	ldr	r3, [sp, #4]
 800e82a:	e9c3 0100 	strd	r0, r1, [r3]
 800e82e:	e7b9      	b.n	800e7a4 <__kernel_rem_pio2+0x4d4>
 800e830:	2000      	movs	r0, #0
 800e832:	2100      	movs	r1, #0
 800e834:	e7f0      	b.n	800e818 <__kernel_rem_pio2+0x548>
 800e836:	ab48      	add	r3, sp, #288	; 0x120
 800e838:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e840:	f7f1 fcc8 	bl	80001d4 <__adddf3>
 800e844:	3c01      	subs	r4, #1
 800e846:	2c00      	cmp	r4, #0
 800e848:	daf5      	bge.n	800e836 <__kernel_rem_pio2+0x566>
 800e84a:	9b02      	ldr	r3, [sp, #8]
 800e84c:	b1e3      	cbz	r3, 800e888 <__kernel_rem_pio2+0x5b8>
 800e84e:	4602      	mov	r2, r0
 800e850:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e854:	9c01      	ldr	r4, [sp, #4]
 800e856:	e9c4 2300 	strd	r2, r3, [r4]
 800e85a:	4602      	mov	r2, r0
 800e85c:	460b      	mov	r3, r1
 800e85e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e862:	f7f1 fcb5 	bl	80001d0 <__aeabi_dsub>
 800e866:	ad4a      	add	r5, sp, #296	; 0x128
 800e868:	2401      	movs	r4, #1
 800e86a:	45a3      	cmp	fp, r4
 800e86c:	da0f      	bge.n	800e88e <__kernel_rem_pio2+0x5be>
 800e86e:	9b02      	ldr	r3, [sp, #8]
 800e870:	b113      	cbz	r3, 800e878 <__kernel_rem_pio2+0x5a8>
 800e872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e876:	4619      	mov	r1, r3
 800e878:	9b01      	ldr	r3, [sp, #4]
 800e87a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e87e:	e791      	b.n	800e7a4 <__kernel_rem_pio2+0x4d4>
 800e880:	465c      	mov	r4, fp
 800e882:	2000      	movs	r0, #0
 800e884:	2100      	movs	r1, #0
 800e886:	e7de      	b.n	800e846 <__kernel_rem_pio2+0x576>
 800e888:	4602      	mov	r2, r0
 800e88a:	460b      	mov	r3, r1
 800e88c:	e7e2      	b.n	800e854 <__kernel_rem_pio2+0x584>
 800e88e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e892:	f7f1 fc9f 	bl	80001d4 <__adddf3>
 800e896:	3401      	adds	r4, #1
 800e898:	e7e7      	b.n	800e86a <__kernel_rem_pio2+0x59a>
 800e89a:	e9d8 4500 	ldrd	r4, r5, [r8]
 800e89e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	4632      	mov	r2, r6
 800e8a6:	463b      	mov	r3, r7
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	f7f1 fc93 	bl	80001d4 <__adddf3>
 800e8ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	4629      	mov	r1, r5
 800e8ba:	f7f1 fc89 	bl	80001d0 <__aeabi_dsub>
 800e8be:	4632      	mov	r2, r6
 800e8c0:	463b      	mov	r3, r7
 800e8c2:	f7f1 fc87 	bl	80001d4 <__adddf3>
 800e8c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e8ca:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800e8ce:	ed88 7b00 	vstr	d7, [r8]
 800e8d2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e8d6:	e776      	b.n	800e7c6 <__kernel_rem_pio2+0x4f6>
 800e8d8:	e9da 8900 	ldrd	r8, r9, [sl]
 800e8dc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e8e0:	4640      	mov	r0, r8
 800e8e2:	4632      	mov	r2, r6
 800e8e4:	463b      	mov	r3, r7
 800e8e6:	4649      	mov	r1, r9
 800e8e8:	f7f1 fc74 	bl	80001d4 <__adddf3>
 800e8ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	460b      	mov	r3, r1
 800e8f4:	4640      	mov	r0, r8
 800e8f6:	4649      	mov	r1, r9
 800e8f8:	f7f1 fc6a 	bl	80001d0 <__aeabi_dsub>
 800e8fc:	4632      	mov	r2, r6
 800e8fe:	463b      	mov	r3, r7
 800e900:	f7f1 fc68 	bl	80001d4 <__adddf3>
 800e904:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e908:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e90c:	ed8a 7b00 	vstr	d7, [sl]
 800e910:	3c01      	subs	r4, #1
 800e912:	e75e      	b.n	800e7d2 <__kernel_rem_pio2+0x502>
 800e914:	ab48      	add	r3, sp, #288	; 0x120
 800e916:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91e:	f7f1 fc59 	bl	80001d4 <__adddf3>
 800e922:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e926:	e75a      	b.n	800e7de <__kernel_rem_pio2+0x50e>
 800e928:	9b01      	ldr	r3, [sp, #4]
 800e92a:	9a01      	ldr	r2, [sp, #4]
 800e92c:	601d      	str	r5, [r3, #0]
 800e92e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e932:	605c      	str	r4, [r3, #4]
 800e934:	609f      	str	r7, [r3, #8]
 800e936:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e93a:	60d3      	str	r3, [r2, #12]
 800e93c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e940:	6110      	str	r0, [r2, #16]
 800e942:	6153      	str	r3, [r2, #20]
 800e944:	e72e      	b.n	800e7a4 <__kernel_rem_pio2+0x4d4>
 800e946:	bf00      	nop
 800e948:	41700000 	.word	0x41700000
 800e94c:	3e700000 	.word	0x3e700000

0800e950 <__kernel_sin>:
 800e950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e954:	ed2d 8b04 	vpush	{d8-d9}
 800e958:	eeb0 8a41 	vmov.f32	s16, s2
 800e95c:	eef0 8a61 	vmov.f32	s17, s3
 800e960:	ec55 4b10 	vmov	r4, r5, d0
 800e964:	b083      	sub	sp, #12
 800e966:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e96a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e96e:	9001      	str	r0, [sp, #4]
 800e970:	da06      	bge.n	800e980 <__kernel_sin+0x30>
 800e972:	ee10 0a10 	vmov	r0, s0
 800e976:	4629      	mov	r1, r5
 800e978:	f7f2 f892 	bl	8000aa0 <__aeabi_d2iz>
 800e97c:	2800      	cmp	r0, #0
 800e97e:	d051      	beq.n	800ea24 <__kernel_sin+0xd4>
 800e980:	4622      	mov	r2, r4
 800e982:	462b      	mov	r3, r5
 800e984:	4620      	mov	r0, r4
 800e986:	4629      	mov	r1, r5
 800e988:	f7f1 fdda 	bl	8000540 <__aeabi_dmul>
 800e98c:	4682      	mov	sl, r0
 800e98e:	468b      	mov	fp, r1
 800e990:	4602      	mov	r2, r0
 800e992:	460b      	mov	r3, r1
 800e994:	4620      	mov	r0, r4
 800e996:	4629      	mov	r1, r5
 800e998:	f7f1 fdd2 	bl	8000540 <__aeabi_dmul>
 800e99c:	a341      	add	r3, pc, #260	; (adr r3, 800eaa4 <__kernel_sin+0x154>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	4680      	mov	r8, r0
 800e9a4:	4689      	mov	r9, r1
 800e9a6:	4650      	mov	r0, sl
 800e9a8:	4659      	mov	r1, fp
 800e9aa:	f7f1 fdc9 	bl	8000540 <__aeabi_dmul>
 800e9ae:	a33f      	add	r3, pc, #252	; (adr r3, 800eaac <__kernel_sin+0x15c>)
 800e9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b4:	f7f1 fc0c 	bl	80001d0 <__aeabi_dsub>
 800e9b8:	4652      	mov	r2, sl
 800e9ba:	465b      	mov	r3, fp
 800e9bc:	f7f1 fdc0 	bl	8000540 <__aeabi_dmul>
 800e9c0:	a33c      	add	r3, pc, #240	; (adr r3, 800eab4 <__kernel_sin+0x164>)
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	f7f1 fc05 	bl	80001d4 <__adddf3>
 800e9ca:	4652      	mov	r2, sl
 800e9cc:	465b      	mov	r3, fp
 800e9ce:	f7f1 fdb7 	bl	8000540 <__aeabi_dmul>
 800e9d2:	a33a      	add	r3, pc, #232	; (adr r3, 800eabc <__kernel_sin+0x16c>)
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	f7f1 fbfa 	bl	80001d0 <__aeabi_dsub>
 800e9dc:	4652      	mov	r2, sl
 800e9de:	465b      	mov	r3, fp
 800e9e0:	f7f1 fdae 	bl	8000540 <__aeabi_dmul>
 800e9e4:	a337      	add	r3, pc, #220	; (adr r3, 800eac4 <__kernel_sin+0x174>)
 800e9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ea:	f7f1 fbf3 	bl	80001d4 <__adddf3>
 800e9ee:	9b01      	ldr	r3, [sp, #4]
 800e9f0:	4606      	mov	r6, r0
 800e9f2:	460f      	mov	r7, r1
 800e9f4:	b9eb      	cbnz	r3, 800ea32 <__kernel_sin+0xe2>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	4650      	mov	r0, sl
 800e9fc:	4659      	mov	r1, fp
 800e9fe:	f7f1 fd9f 	bl	8000540 <__aeabi_dmul>
 800ea02:	a325      	add	r3, pc, #148	; (adr r3, 800ea98 <__kernel_sin+0x148>)
 800ea04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea08:	f7f1 fbe2 	bl	80001d0 <__aeabi_dsub>
 800ea0c:	4642      	mov	r2, r8
 800ea0e:	464b      	mov	r3, r9
 800ea10:	f7f1 fd96 	bl	8000540 <__aeabi_dmul>
 800ea14:	4602      	mov	r2, r0
 800ea16:	460b      	mov	r3, r1
 800ea18:	4620      	mov	r0, r4
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	f7f1 fbda 	bl	80001d4 <__adddf3>
 800ea20:	4604      	mov	r4, r0
 800ea22:	460d      	mov	r5, r1
 800ea24:	ec45 4b10 	vmov	d0, r4, r5
 800ea28:	b003      	add	sp, #12
 800ea2a:	ecbd 8b04 	vpop	{d8-d9}
 800ea2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea32:	4b1b      	ldr	r3, [pc, #108]	; (800eaa0 <__kernel_sin+0x150>)
 800ea34:	ec51 0b18 	vmov	r0, r1, d8
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f7f1 fd81 	bl	8000540 <__aeabi_dmul>
 800ea3e:	4632      	mov	r2, r6
 800ea40:	ec41 0b19 	vmov	d9, r0, r1
 800ea44:	463b      	mov	r3, r7
 800ea46:	4640      	mov	r0, r8
 800ea48:	4649      	mov	r1, r9
 800ea4a:	f7f1 fd79 	bl	8000540 <__aeabi_dmul>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	460b      	mov	r3, r1
 800ea52:	ec51 0b19 	vmov	r0, r1, d9
 800ea56:	f7f1 fbbb 	bl	80001d0 <__aeabi_dsub>
 800ea5a:	4652      	mov	r2, sl
 800ea5c:	465b      	mov	r3, fp
 800ea5e:	f7f1 fd6f 	bl	8000540 <__aeabi_dmul>
 800ea62:	ec53 2b18 	vmov	r2, r3, d8
 800ea66:	f7f1 fbb3 	bl	80001d0 <__aeabi_dsub>
 800ea6a:	a30b      	add	r3, pc, #44	; (adr r3, 800ea98 <__kernel_sin+0x148>)
 800ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea70:	4606      	mov	r6, r0
 800ea72:	460f      	mov	r7, r1
 800ea74:	4640      	mov	r0, r8
 800ea76:	4649      	mov	r1, r9
 800ea78:	f7f1 fd62 	bl	8000540 <__aeabi_dmul>
 800ea7c:	4602      	mov	r2, r0
 800ea7e:	460b      	mov	r3, r1
 800ea80:	4630      	mov	r0, r6
 800ea82:	4639      	mov	r1, r7
 800ea84:	f7f1 fba6 	bl	80001d4 <__adddf3>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	4629      	mov	r1, r5
 800ea90:	f7f1 fb9e 	bl	80001d0 <__aeabi_dsub>
 800ea94:	e7c4      	b.n	800ea20 <__kernel_sin+0xd0>
 800ea96:	bf00      	nop
 800ea98:	55555549 	.word	0x55555549
 800ea9c:	3fc55555 	.word	0x3fc55555
 800eaa0:	3fe00000 	.word	0x3fe00000
 800eaa4:	5acfd57c 	.word	0x5acfd57c
 800eaa8:	3de5d93a 	.word	0x3de5d93a
 800eaac:	8a2b9ceb 	.word	0x8a2b9ceb
 800eab0:	3e5ae5e6 	.word	0x3e5ae5e6
 800eab4:	57b1fe7d 	.word	0x57b1fe7d
 800eab8:	3ec71de3 	.word	0x3ec71de3
 800eabc:	19c161d5 	.word	0x19c161d5
 800eac0:	3f2a01a0 	.word	0x3f2a01a0
 800eac4:	1110f8a6 	.word	0x1110f8a6
 800eac8:	3f811111 	.word	0x3f811111

0800eacc <__kernel_cosf>:
 800eacc:	ee10 3a10 	vmov	r3, s0
 800ead0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ead4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ead8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800eadc:	da05      	bge.n	800eaea <__kernel_cosf+0x1e>
 800eade:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800eae2:	ee17 2a90 	vmov	r2, s15
 800eae6:	2a00      	cmp	r2, #0
 800eae8:	d03d      	beq.n	800eb66 <__kernel_cosf+0x9a>
 800eaea:	ee60 5a00 	vmul.f32	s11, s0, s0
 800eaee:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800eb6c <__kernel_cosf+0xa0>
 800eaf2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800eb70 <__kernel_cosf+0xa4>
 800eaf6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800eb74 <__kernel_cosf+0xa8>
 800eafa:	4a1f      	ldr	r2, [pc, #124]	; (800eb78 <__kernel_cosf+0xac>)
 800eafc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800eb00:	4293      	cmp	r3, r2
 800eb02:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800eb7c <__kernel_cosf+0xb0>
 800eb06:	eee7 7a25 	vfma.f32	s15, s14, s11
 800eb0a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800eb80 <__kernel_cosf+0xb4>
 800eb0e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800eb12:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800eb84 <__kernel_cosf+0xb8>
 800eb16:	eee7 7a25 	vfma.f32	s15, s14, s11
 800eb1a:	eeb0 7a66 	vmov.f32	s14, s13
 800eb1e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800eb22:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800eb26:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800eb2a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800eb2e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800eb32:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800eb36:	dc04      	bgt.n	800eb42 <__kernel_cosf+0x76>
 800eb38:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800eb3c:	ee36 0a47 	vsub.f32	s0, s12, s14
 800eb40:	4770      	bx	lr
 800eb42:	4a11      	ldr	r2, [pc, #68]	; (800eb88 <__kernel_cosf+0xbc>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	bfda      	itte	le
 800eb48:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800eb4c:	ee06 3a90 	vmovle	s13, r3
 800eb50:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800eb54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800eb58:	ee36 0a66 	vsub.f32	s0, s12, s13
 800eb5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eb60:	ee30 0a67 	vsub.f32	s0, s0, s15
 800eb64:	4770      	bx	lr
 800eb66:	eeb0 0a46 	vmov.f32	s0, s12
 800eb6a:	4770      	bx	lr
 800eb6c:	ad47d74e 	.word	0xad47d74e
 800eb70:	310f74f6 	.word	0x310f74f6
 800eb74:	3d2aaaab 	.word	0x3d2aaaab
 800eb78:	3e999999 	.word	0x3e999999
 800eb7c:	b493f27c 	.word	0xb493f27c
 800eb80:	37d00d01 	.word	0x37d00d01
 800eb84:	bab60b61 	.word	0xbab60b61
 800eb88:	3f480000 	.word	0x3f480000

0800eb8c <__kernel_rem_pio2f>:
 800eb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb90:	ed2d 8b04 	vpush	{d8-d9}
 800eb94:	b0d7      	sub	sp, #348	; 0x15c
 800eb96:	4616      	mov	r6, r2
 800eb98:	4698      	mov	r8, r3
 800eb9a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800eb9c:	4bbb      	ldr	r3, [pc, #748]	; (800ee8c <__kernel_rem_pio2f+0x300>)
 800eb9e:	9001      	str	r0, [sp, #4]
 800eba0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800eba4:	1d33      	adds	r3, r6, #4
 800eba6:	460d      	mov	r5, r1
 800eba8:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 800ebac:	db29      	blt.n	800ec02 <__kernel_rem_pio2f+0x76>
 800ebae:	1ef1      	subs	r1, r6, #3
 800ebb0:	bf48      	it	mi
 800ebb2:	1d31      	addmi	r1, r6, #4
 800ebb4:	10c9      	asrs	r1, r1, #3
 800ebb6:	1c4c      	adds	r4, r1, #1
 800ebb8:	00e3      	lsls	r3, r4, #3
 800ebba:	9302      	str	r3, [sp, #8]
 800ebbc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ebbe:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800ee9c <__kernel_rem_pio2f+0x310>
 800ebc2:	eba1 0009 	sub.w	r0, r1, r9
 800ebc6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 800ebca:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800ebce:	eb07 0c09 	add.w	ip, r7, r9
 800ebd2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	4563      	cmp	r3, ip
 800ebda:	dd14      	ble.n	800ec06 <__kernel_rem_pio2f+0x7a>
 800ebdc:	ab1a      	add	r3, sp, #104	; 0x68
 800ebde:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800ebe2:	46cc      	mov	ip, r9
 800ebe4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 800ebe8:	f1c8 0b01 	rsb	fp, r8, #1
 800ebec:	eb0b 020c 	add.w	r2, fp, ip
 800ebf0:	4297      	cmp	r7, r2
 800ebf2:	db27      	blt.n	800ec44 <__kernel_rem_pio2f+0xb8>
 800ebf4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ebf8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800ee9c <__kernel_rem_pio2f+0x310>
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	2200      	movs	r2, #0
 800ec00:	e016      	b.n	800ec30 <__kernel_rem_pio2f+0xa4>
 800ec02:	2100      	movs	r1, #0
 800ec04:	e7d7      	b.n	800ebb6 <__kernel_rem_pio2f+0x2a>
 800ec06:	42d8      	cmn	r0, r3
 800ec08:	bf5d      	ittte	pl
 800ec0a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 800ec0e:	ee07 2a90 	vmovpl	s15, r2
 800ec12:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800ec16:	eef0 7a47 	vmovmi.f32	s15, s14
 800ec1a:	ecea 7a01 	vstmia	sl!, {s15}
 800ec1e:	3301      	adds	r3, #1
 800ec20:	e7da      	b.n	800ebd8 <__kernel_rem_pio2f+0x4c>
 800ec22:	ecfe 6a01 	vldmia	lr!, {s13}
 800ec26:	ed90 7a00 	vldr	s14, [r0]
 800ec2a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ec2e:	3201      	adds	r2, #1
 800ec30:	454a      	cmp	r2, r9
 800ec32:	f1a0 0004 	sub.w	r0, r0, #4
 800ec36:	ddf4      	ble.n	800ec22 <__kernel_rem_pio2f+0x96>
 800ec38:	ecea 7a01 	vstmia	sl!, {s15}
 800ec3c:	3304      	adds	r3, #4
 800ec3e:	f10c 0c01 	add.w	ip, ip, #1
 800ec42:	e7d3      	b.n	800ebec <__kernel_rem_pio2f+0x60>
 800ec44:	ab06      	add	r3, sp, #24
 800ec46:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800ec4a:	9304      	str	r3, [sp, #16]
 800ec4c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ec4e:	eddf 8a92 	vldr	s17, [pc, #584]	; 800ee98 <__kernel_rem_pio2f+0x30c>
 800ec52:	ed9f 9a90 	vldr	s18, [pc, #576]	; 800ee94 <__kernel_rem_pio2f+0x308>
 800ec56:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800ec5a:	9303      	str	r3, [sp, #12]
 800ec5c:	46ba      	mov	sl, r7
 800ec5e:	ab56      	add	r3, sp, #344	; 0x158
 800ec60:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800ec64:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800ec68:	ab06      	add	r3, sp, #24
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	4652      	mov	r2, sl
 800ec6e:	2a00      	cmp	r2, #0
 800ec70:	dc51      	bgt.n	800ed16 <__kernel_rem_pio2f+0x18a>
 800ec72:	4620      	mov	r0, r4
 800ec74:	9305      	str	r3, [sp, #20]
 800ec76:	f000 fbb7 	bl	800f3e8 <scalbnf>
 800ec7a:	eeb0 8a40 	vmov.f32	s16, s0
 800ec7e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800ec82:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ec86:	f000 fb6d 	bl	800f364 <floorf>
 800ec8a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800ec8e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ec92:	2c00      	cmp	r4, #0
 800ec94:	9b05      	ldr	r3, [sp, #20]
 800ec96:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ec9a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800ec9e:	edcd 7a00 	vstr	s15, [sp]
 800eca2:	ee38 8a40 	vsub.f32	s16, s16, s0
 800eca6:	dd4b      	ble.n	800ed40 <__kernel_rem_pio2f+0x1b4>
 800eca8:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800ecac:	aa06      	add	r2, sp, #24
 800ecae:	f1c4 0e08 	rsb	lr, r4, #8
 800ecb2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ecb6:	ee17 1a90 	vmov	r1, s15
 800ecba:	fa42 f00e 	asr.w	r0, r2, lr
 800ecbe:	4401      	add	r1, r0
 800ecc0:	9100      	str	r1, [sp, #0]
 800ecc2:	fa00 f00e 	lsl.w	r0, r0, lr
 800ecc6:	a906      	add	r1, sp, #24
 800ecc8:	1a12      	subs	r2, r2, r0
 800ecca:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ecce:	f1c4 0007 	rsb	r0, r4, #7
 800ecd2:	fa42 fb00 	asr.w	fp, r2, r0
 800ecd6:	f1bb 0f00 	cmp.w	fp, #0
 800ecda:	dd43      	ble.n	800ed64 <__kernel_rem_pio2f+0x1d8>
 800ecdc:	9a00      	ldr	r2, [sp, #0]
 800ecde:	f04f 0e00 	mov.w	lr, #0
 800ece2:	3201      	adds	r2, #1
 800ece4:	9200      	str	r2, [sp, #0]
 800ece6:	4670      	mov	r0, lr
 800ece8:	45f2      	cmp	sl, lr
 800ecea:	dc6c      	bgt.n	800edc6 <__kernel_rem_pio2f+0x23a>
 800ecec:	2c00      	cmp	r4, #0
 800ecee:	dd04      	ble.n	800ecfa <__kernel_rem_pio2f+0x16e>
 800ecf0:	2c01      	cmp	r4, #1
 800ecf2:	d079      	beq.n	800ede8 <__kernel_rem_pio2f+0x25c>
 800ecf4:	2c02      	cmp	r4, #2
 800ecf6:	f000 8082 	beq.w	800edfe <__kernel_rem_pio2f+0x272>
 800ecfa:	f1bb 0f02 	cmp.w	fp, #2
 800ecfe:	d131      	bne.n	800ed64 <__kernel_rem_pio2f+0x1d8>
 800ed00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ed04:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ed08:	b360      	cbz	r0, 800ed64 <__kernel_rem_pio2f+0x1d8>
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 fb6c 	bl	800f3e8 <scalbnf>
 800ed10:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ed14:	e026      	b.n	800ed64 <__kernel_rem_pio2f+0x1d8>
 800ed16:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ed1a:	3a01      	subs	r2, #1
 800ed1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ed20:	a942      	add	r1, sp, #264	; 0x108
 800ed22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ed26:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800ed2a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800ed2e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ed32:	eca0 0a01 	vstmia	r0!, {s0}
 800ed36:	ed9c 0a00 	vldr	s0, [ip]
 800ed3a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ed3e:	e796      	b.n	800ec6e <__kernel_rem_pio2f+0xe2>
 800ed40:	d107      	bne.n	800ed52 <__kernel_rem_pio2f+0x1c6>
 800ed42:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 800ed46:	a906      	add	r1, sp, #24
 800ed48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800ed4c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800ed50:	e7c1      	b.n	800ecd6 <__kernel_rem_pio2f+0x14a>
 800ed52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ed56:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ed5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5e:	da2f      	bge.n	800edc0 <__kernel_rem_pio2f+0x234>
 800ed60:	f04f 0b00 	mov.w	fp, #0
 800ed64:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ed68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed6c:	f040 8098 	bne.w	800eea0 <__kernel_rem_pio2f+0x314>
 800ed70:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ed74:	469c      	mov	ip, r3
 800ed76:	2200      	movs	r2, #0
 800ed78:	45bc      	cmp	ip, r7
 800ed7a:	da48      	bge.n	800ee0e <__kernel_rem_pio2f+0x282>
 800ed7c:	2a00      	cmp	r2, #0
 800ed7e:	d05f      	beq.n	800ee40 <__kernel_rem_pio2f+0x2b4>
 800ed80:	aa06      	add	r2, sp, #24
 800ed82:	3c08      	subs	r4, #8
 800ed84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ed88:	2900      	cmp	r1, #0
 800ed8a:	d07d      	beq.n	800ee88 <__kernel_rem_pio2f+0x2fc>
 800ed8c:	4620      	mov	r0, r4
 800ed8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ed92:	9301      	str	r3, [sp, #4]
 800ed94:	f000 fb28 	bl	800f3e8 <scalbnf>
 800ed98:	9b01      	ldr	r3, [sp, #4]
 800ed9a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800ee98 <__kernel_rem_pio2f+0x30c>
 800ed9e:	4619      	mov	r1, r3
 800eda0:	2900      	cmp	r1, #0
 800eda2:	f280 80af 	bge.w	800ef04 <__kernel_rem_pio2f+0x378>
 800eda6:	4618      	mov	r0, r3
 800eda8:	2400      	movs	r4, #0
 800edaa:	2800      	cmp	r0, #0
 800edac:	f2c0 80d0 	blt.w	800ef50 <__kernel_rem_pio2f+0x3c4>
 800edb0:	a942      	add	r1, sp, #264	; 0x108
 800edb2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 800edb6:	4a36      	ldr	r2, [pc, #216]	; (800ee90 <__kernel_rem_pio2f+0x304>)
 800edb8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800ee9c <__kernel_rem_pio2f+0x310>
 800edbc:	2100      	movs	r1, #0
 800edbe:	e0bb      	b.n	800ef38 <__kernel_rem_pio2f+0x3ac>
 800edc0:	f04f 0b02 	mov.w	fp, #2
 800edc4:	e78a      	b.n	800ecdc <__kernel_rem_pio2f+0x150>
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	b948      	cbnz	r0, 800edde <__kernel_rem_pio2f+0x252>
 800edca:	b11a      	cbz	r2, 800edd4 <__kernel_rem_pio2f+0x248>
 800edcc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 800edd0:	601a      	str	r2, [r3, #0]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f10e 0e01 	add.w	lr, lr, #1
 800edd8:	3304      	adds	r3, #4
 800edda:	4610      	mov	r0, r2
 800eddc:	e784      	b.n	800ece8 <__kernel_rem_pio2f+0x15c>
 800edde:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 800ede2:	601a      	str	r2, [r3, #0]
 800ede4:	4602      	mov	r2, r0
 800ede6:	e7f5      	b.n	800edd4 <__kernel_rem_pio2f+0x248>
 800ede8:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800edec:	ab06      	add	r3, sp, #24
 800edee:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800edf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edf6:	aa06      	add	r2, sp, #24
 800edf8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 800edfc:	e77d      	b.n	800ecfa <__kernel_rem_pio2f+0x16e>
 800edfe:	f10a 3cff 	add.w	ip, sl, #4294967295	; 0xffffffff
 800ee02:	ab06      	add	r3, sp, #24
 800ee04:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800ee08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee0c:	e7f3      	b.n	800edf6 <__kernel_rem_pio2f+0x26a>
 800ee0e:	a906      	add	r1, sp, #24
 800ee10:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 800ee14:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800ee18:	4302      	orrs	r2, r0
 800ee1a:	e7ad      	b.n	800ed78 <__kernel_rem_pio2f+0x1ec>
 800ee1c:	3001      	adds	r0, #1
 800ee1e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ee22:	2a00      	cmp	r2, #0
 800ee24:	d0fa      	beq.n	800ee1c <__kernel_rem_pio2f+0x290>
 800ee26:	a91a      	add	r1, sp, #104	; 0x68
 800ee28:	eb0a 0208 	add.w	r2, sl, r8
 800ee2c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ee30:	f10a 0301 	add.w	r3, sl, #1
 800ee34:	eb0a 0100 	add.w	r1, sl, r0
 800ee38:	4299      	cmp	r1, r3
 800ee3a:	da04      	bge.n	800ee46 <__kernel_rem_pio2f+0x2ba>
 800ee3c:	468a      	mov	sl, r1
 800ee3e:	e70e      	b.n	800ec5e <__kernel_rem_pio2f+0xd2>
 800ee40:	9b04      	ldr	r3, [sp, #16]
 800ee42:	2001      	movs	r0, #1
 800ee44:	e7eb      	b.n	800ee1e <__kernel_rem_pio2f+0x292>
 800ee46:	9803      	ldr	r0, [sp, #12]
 800ee48:	f8dd c004 	ldr.w	ip, [sp, #4]
 800ee4c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ee50:	9000      	str	r0, [sp, #0]
 800ee52:	ee07 0a90 	vmov	s15, r0
 800ee56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	ece2 7a01 	vstmia	r2!, {s15}
 800ee60:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ee9c <__kernel_rem_pio2f+0x310>
 800ee64:	4696      	mov	lr, r2
 800ee66:	4548      	cmp	r0, r9
 800ee68:	dd06      	ble.n	800ee78 <__kernel_rem_pio2f+0x2ec>
 800ee6a:	a842      	add	r0, sp, #264	; 0x108
 800ee6c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ee70:	edc0 7a00 	vstr	s15, [r0]
 800ee74:	3301      	adds	r3, #1
 800ee76:	e7df      	b.n	800ee38 <__kernel_rem_pio2f+0x2ac>
 800ee78:	ecfc 6a01 	vldmia	ip!, {s13}
 800ee7c:	ed3e 7a01 	vldmdb	lr!, {s14}
 800ee80:	3001      	adds	r0, #1
 800ee82:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ee86:	e7ee      	b.n	800ee66 <__kernel_rem_pio2f+0x2da>
 800ee88:	3b01      	subs	r3, #1
 800ee8a:	e779      	b.n	800ed80 <__kernel_rem_pio2f+0x1f4>
 800ee8c:	0800fe34 	.word	0x0800fe34
 800ee90:	0800fe08 	.word	0x0800fe08
 800ee94:	43800000 	.word	0x43800000
 800ee98:	3b800000 	.word	0x3b800000
 800ee9c:	00000000 	.word	0x00000000
 800eea0:	9b02      	ldr	r3, [sp, #8]
 800eea2:	eeb0 0a48 	vmov.f32	s0, s16
 800eea6:	1b98      	subs	r0, r3, r6
 800eea8:	f000 fa9e 	bl	800f3e8 <scalbnf>
 800eeac:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800ee94 <__kernel_rem_pio2f+0x308>
 800eeb0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800eeb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb8:	db1b      	blt.n	800eef2 <__kernel_rem_pio2f+0x366>
 800eeba:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ee98 <__kernel_rem_pio2f+0x30c>
 800eebe:	ee60 7a27 	vmul.f32	s15, s0, s15
 800eec2:	aa06      	add	r2, sp, #24
 800eec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eec8:	a906      	add	r1, sp, #24
 800eeca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eece:	3408      	adds	r4, #8
 800eed0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800eed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eed8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800eedc:	ee10 3a10 	vmov	r3, s0
 800eee0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800eee4:	ee17 2a90 	vmov	r2, s15
 800eee8:	f10a 0301 	add.w	r3, sl, #1
 800eeec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800eef0:	e74c      	b.n	800ed8c <__kernel_rem_pio2f+0x200>
 800eef2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800eef6:	aa06      	add	r2, sp, #24
 800eef8:	ee10 3a10 	vmov	r3, s0
 800eefc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 800ef00:	4653      	mov	r3, sl
 800ef02:	e743      	b.n	800ed8c <__kernel_rem_pio2f+0x200>
 800ef04:	aa42      	add	r2, sp, #264	; 0x108
 800ef06:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800ef0a:	aa06      	add	r2, sp, #24
 800ef0c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ef10:	9201      	str	r2, [sp, #4]
 800ef12:	ee07 2a90 	vmov	s15, r2
 800ef16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ef1a:	3901      	subs	r1, #1
 800ef1c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ef20:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ef24:	edc0 7a00 	vstr	s15, [r0]
 800ef28:	e73a      	b.n	800eda0 <__kernel_rem_pio2f+0x214>
 800ef2a:	ecf2 6a01 	vldmia	r2!, {s13}
 800ef2e:	ecb6 7a01 	vldmia	r6!, {s14}
 800ef32:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ef36:	3101      	adds	r1, #1
 800ef38:	42b9      	cmp	r1, r7
 800ef3a:	dc01      	bgt.n	800ef40 <__kernel_rem_pio2f+0x3b4>
 800ef3c:	428c      	cmp	r4, r1
 800ef3e:	daf4      	bge.n	800ef2a <__kernel_rem_pio2f+0x39e>
 800ef40:	aa56      	add	r2, sp, #344	; 0x158
 800ef42:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800ef46:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800ef4a:	3801      	subs	r0, #1
 800ef4c:	3401      	adds	r4, #1
 800ef4e:	e72c      	b.n	800edaa <__kernel_rem_pio2f+0x21e>
 800ef50:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ef52:	2a02      	cmp	r2, #2
 800ef54:	dc0a      	bgt.n	800ef6c <__kernel_rem_pio2f+0x3e0>
 800ef56:	2a00      	cmp	r2, #0
 800ef58:	dc61      	bgt.n	800f01e <__kernel_rem_pio2f+0x492>
 800ef5a:	d03c      	beq.n	800efd6 <__kernel_rem_pio2f+0x44a>
 800ef5c:	9b00      	ldr	r3, [sp, #0]
 800ef5e:	f003 0007 	and.w	r0, r3, #7
 800ef62:	b057      	add	sp, #348	; 0x15c
 800ef64:	ecbd 8b04 	vpop	{d8-d9}
 800ef68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ef6e:	2a03      	cmp	r2, #3
 800ef70:	d1f4      	bne.n	800ef5c <__kernel_rem_pio2f+0x3d0>
 800ef72:	aa2e      	add	r2, sp, #184	; 0xb8
 800ef74:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800ef78:	4608      	mov	r0, r1
 800ef7a:	461c      	mov	r4, r3
 800ef7c:	2c00      	cmp	r4, #0
 800ef7e:	f1a0 0004 	sub.w	r0, r0, #4
 800ef82:	dc59      	bgt.n	800f038 <__kernel_rem_pio2f+0x4ac>
 800ef84:	4618      	mov	r0, r3
 800ef86:	2801      	cmp	r0, #1
 800ef88:	f1a1 0104 	sub.w	r1, r1, #4
 800ef8c:	dc64      	bgt.n	800f058 <__kernel_rem_pio2f+0x4cc>
 800ef8e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800ee9c <__kernel_rem_pio2f+0x310>
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	dc70      	bgt.n	800f078 <__kernel_rem_pio2f+0x4ec>
 800ef96:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800ef9a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800ef9e:	f1bb 0f00 	cmp.w	fp, #0
 800efa2:	d172      	bne.n	800f08a <__kernel_rem_pio2f+0x4fe>
 800efa4:	edc5 6a00 	vstr	s13, [r5]
 800efa8:	ed85 7a01 	vstr	s14, [r5, #4]
 800efac:	edc5 7a02 	vstr	s15, [r5, #8]
 800efb0:	e7d4      	b.n	800ef5c <__kernel_rem_pio2f+0x3d0>
 800efb2:	aa2e      	add	r2, sp, #184	; 0xb8
 800efb4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800efb8:	ed91 7a00 	vldr	s14, [r1]
 800efbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800efc0:	3b01      	subs	r3, #1
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	daf5      	bge.n	800efb2 <__kernel_rem_pio2f+0x426>
 800efc6:	f1bb 0f00 	cmp.w	fp, #0
 800efca:	d001      	beq.n	800efd0 <__kernel_rem_pio2f+0x444>
 800efcc:	eef1 7a67 	vneg.f32	s15, s15
 800efd0:	edc5 7a00 	vstr	s15, [r5]
 800efd4:	e7c2      	b.n	800ef5c <__kernel_rem_pio2f+0x3d0>
 800efd6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800ee9c <__kernel_rem_pio2f+0x310>
 800efda:	e7f2      	b.n	800efc2 <__kernel_rem_pio2f+0x436>
 800efdc:	aa2e      	add	r2, sp, #184	; 0xb8
 800efde:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800efe2:	edd0 7a00 	vldr	s15, [r0]
 800efe6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800efea:	3901      	subs	r1, #1
 800efec:	2900      	cmp	r1, #0
 800efee:	daf5      	bge.n	800efdc <__kernel_rem_pio2f+0x450>
 800eff0:	f1bb 0f00 	cmp.w	fp, #0
 800eff4:	d017      	beq.n	800f026 <__kernel_rem_pio2f+0x49a>
 800eff6:	eef1 7a47 	vneg.f32	s15, s14
 800effa:	edc5 7a00 	vstr	s15, [r5]
 800effe:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800f002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f006:	a82f      	add	r0, sp, #188	; 0xbc
 800f008:	2101      	movs	r1, #1
 800f00a:	428b      	cmp	r3, r1
 800f00c:	da0e      	bge.n	800f02c <__kernel_rem_pio2f+0x4a0>
 800f00e:	f1bb 0f00 	cmp.w	fp, #0
 800f012:	d001      	beq.n	800f018 <__kernel_rem_pio2f+0x48c>
 800f014:	eef1 7a67 	vneg.f32	s15, s15
 800f018:	edc5 7a01 	vstr	s15, [r5, #4]
 800f01c:	e79e      	b.n	800ef5c <__kernel_rem_pio2f+0x3d0>
 800f01e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800ee9c <__kernel_rem_pio2f+0x310>
 800f022:	4619      	mov	r1, r3
 800f024:	e7e2      	b.n	800efec <__kernel_rem_pio2f+0x460>
 800f026:	eef0 7a47 	vmov.f32	s15, s14
 800f02a:	e7e6      	b.n	800effa <__kernel_rem_pio2f+0x46e>
 800f02c:	ecb0 7a01 	vldmia	r0!, {s14}
 800f030:	3101      	adds	r1, #1
 800f032:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f036:	e7e8      	b.n	800f00a <__kernel_rem_pio2f+0x47e>
 800f038:	edd0 7a00 	vldr	s15, [r0]
 800f03c:	edd0 6a01 	vldr	s13, [r0, #4]
 800f040:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f044:	3c01      	subs	r4, #1
 800f046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f04a:	ed80 7a00 	vstr	s14, [r0]
 800f04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f052:	edc0 7a01 	vstr	s15, [r0, #4]
 800f056:	e791      	b.n	800ef7c <__kernel_rem_pio2f+0x3f0>
 800f058:	edd1 7a00 	vldr	s15, [r1]
 800f05c:	edd1 6a01 	vldr	s13, [r1, #4]
 800f060:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f064:	3801      	subs	r0, #1
 800f066:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f06a:	ed81 7a00 	vstr	s14, [r1]
 800f06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f072:	edc1 7a01 	vstr	s15, [r1, #4]
 800f076:	e786      	b.n	800ef86 <__kernel_rem_pio2f+0x3fa>
 800f078:	aa2e      	add	r2, sp, #184	; 0xb8
 800f07a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800f07e:	ed91 7a00 	vldr	s14, [r1]
 800f082:	3b01      	subs	r3, #1
 800f084:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f088:	e783      	b.n	800ef92 <__kernel_rem_pio2f+0x406>
 800f08a:	eef1 6a66 	vneg.f32	s13, s13
 800f08e:	eeb1 7a47 	vneg.f32	s14, s14
 800f092:	edc5 6a00 	vstr	s13, [r5]
 800f096:	ed85 7a01 	vstr	s14, [r5, #4]
 800f09a:	eef1 7a67 	vneg.f32	s15, s15
 800f09e:	e785      	b.n	800efac <__kernel_rem_pio2f+0x420>

0800f0a0 <__kernel_sinf>:
 800f0a0:	ee10 3a10 	vmov	r3, s0
 800f0a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f0a8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f0ac:	da04      	bge.n	800f0b8 <__kernel_sinf+0x18>
 800f0ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f0b2:	ee17 3a90 	vmov	r3, s15
 800f0b6:	b35b      	cbz	r3, 800f110 <__kernel_sinf+0x70>
 800f0b8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f0bc:	eddf 7a15 	vldr	s15, [pc, #84]	; 800f114 <__kernel_sinf+0x74>
 800f0c0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800f118 <__kernel_sinf+0x78>
 800f0c4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f0c8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800f11c <__kernel_sinf+0x7c>
 800f0cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f0d0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800f120 <__kernel_sinf+0x80>
 800f0d4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f0d8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800f124 <__kernel_sinf+0x84>
 800f0dc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f0e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f0e4:	b930      	cbnz	r0, 800f0f4 <__kernel_sinf+0x54>
 800f0e6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800f128 <__kernel_sinf+0x88>
 800f0ea:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f0ee:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f0f2:	4770      	bx	lr
 800f0f4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f0f8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f0fc:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f100:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f104:	eddf 7a09 	vldr	s15, [pc, #36]	; 800f12c <__kernel_sinf+0x8c>
 800f108:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f10c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f110:	4770      	bx	lr
 800f112:	bf00      	nop
 800f114:	2f2ec9d3 	.word	0x2f2ec9d3
 800f118:	b2d72f34 	.word	0xb2d72f34
 800f11c:	3638ef1b 	.word	0x3638ef1b
 800f120:	b9500d01 	.word	0xb9500d01
 800f124:	3c088889 	.word	0x3c088889
 800f128:	be2aaaab 	.word	0xbe2aaaab
 800f12c:	3e2aaaab 	.word	0x3e2aaaab

0800f130 <fabs>:
 800f130:	ec51 0b10 	vmov	r0, r1, d0
 800f134:	ee10 2a10 	vmov	r2, s0
 800f138:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f13c:	ec43 2b10 	vmov	d0, r2, r3
 800f140:	4770      	bx	lr
 800f142:	0000      	movs	r0, r0
 800f144:	0000      	movs	r0, r0
	...

0800f148 <floor>:
 800f148:	ec51 0b10 	vmov	r0, r1, d0
 800f14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f150:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f154:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f158:	2e13      	cmp	r6, #19
 800f15a:	ee10 5a10 	vmov	r5, s0
 800f15e:	ee10 8a10 	vmov	r8, s0
 800f162:	460c      	mov	r4, r1
 800f164:	dc32      	bgt.n	800f1cc <floor+0x84>
 800f166:	2e00      	cmp	r6, #0
 800f168:	da14      	bge.n	800f194 <floor+0x4c>
 800f16a:	a333      	add	r3, pc, #204	; (adr r3, 800f238 <floor+0xf0>)
 800f16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f170:	f7f1 f830 	bl	80001d4 <__adddf3>
 800f174:	2200      	movs	r2, #0
 800f176:	2300      	movs	r3, #0
 800f178:	f7f1 fc72 	bl	8000a60 <__aeabi_dcmpgt>
 800f17c:	b138      	cbz	r0, 800f18e <floor+0x46>
 800f17e:	2c00      	cmp	r4, #0
 800f180:	da57      	bge.n	800f232 <floor+0xea>
 800f182:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f186:	431d      	orrs	r5, r3
 800f188:	d001      	beq.n	800f18e <floor+0x46>
 800f18a:	4c2d      	ldr	r4, [pc, #180]	; (800f240 <floor+0xf8>)
 800f18c:	2500      	movs	r5, #0
 800f18e:	4621      	mov	r1, r4
 800f190:	4628      	mov	r0, r5
 800f192:	e025      	b.n	800f1e0 <floor+0x98>
 800f194:	4f2b      	ldr	r7, [pc, #172]	; (800f244 <floor+0xfc>)
 800f196:	4137      	asrs	r7, r6
 800f198:	ea01 0307 	and.w	r3, r1, r7
 800f19c:	4303      	orrs	r3, r0
 800f19e:	d01f      	beq.n	800f1e0 <floor+0x98>
 800f1a0:	a325      	add	r3, pc, #148	; (adr r3, 800f238 <floor+0xf0>)
 800f1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a6:	f7f1 f815 	bl	80001d4 <__adddf3>
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	f7f1 fc57 	bl	8000a60 <__aeabi_dcmpgt>
 800f1b2:	2800      	cmp	r0, #0
 800f1b4:	d0eb      	beq.n	800f18e <floor+0x46>
 800f1b6:	2c00      	cmp	r4, #0
 800f1b8:	bfbe      	ittt	lt
 800f1ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f1be:	fa43 f606 	asrlt.w	r6, r3, r6
 800f1c2:	19a4      	addlt	r4, r4, r6
 800f1c4:	ea24 0407 	bic.w	r4, r4, r7
 800f1c8:	2500      	movs	r5, #0
 800f1ca:	e7e0      	b.n	800f18e <floor+0x46>
 800f1cc:	2e33      	cmp	r6, #51	; 0x33
 800f1ce:	dd0b      	ble.n	800f1e8 <floor+0xa0>
 800f1d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f1d4:	d104      	bne.n	800f1e0 <floor+0x98>
 800f1d6:	ee10 2a10 	vmov	r2, s0
 800f1da:	460b      	mov	r3, r1
 800f1dc:	f7f0 fffa 	bl	80001d4 <__adddf3>
 800f1e0:	ec41 0b10 	vmov	d0, r0, r1
 800f1e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f1ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1f0:	fa23 f707 	lsr.w	r7, r3, r7
 800f1f4:	4207      	tst	r7, r0
 800f1f6:	d0f3      	beq.n	800f1e0 <floor+0x98>
 800f1f8:	a30f      	add	r3, pc, #60	; (adr r3, 800f238 <floor+0xf0>)
 800f1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fe:	f7f0 ffe9 	bl	80001d4 <__adddf3>
 800f202:	2200      	movs	r2, #0
 800f204:	2300      	movs	r3, #0
 800f206:	f7f1 fc2b 	bl	8000a60 <__aeabi_dcmpgt>
 800f20a:	2800      	cmp	r0, #0
 800f20c:	d0bf      	beq.n	800f18e <floor+0x46>
 800f20e:	2c00      	cmp	r4, #0
 800f210:	da02      	bge.n	800f218 <floor+0xd0>
 800f212:	2e14      	cmp	r6, #20
 800f214:	d103      	bne.n	800f21e <floor+0xd6>
 800f216:	3401      	adds	r4, #1
 800f218:	ea25 0507 	bic.w	r5, r5, r7
 800f21c:	e7b7      	b.n	800f18e <floor+0x46>
 800f21e:	2301      	movs	r3, #1
 800f220:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f224:	fa03 f606 	lsl.w	r6, r3, r6
 800f228:	4435      	add	r5, r6
 800f22a:	4545      	cmp	r5, r8
 800f22c:	bf38      	it	cc
 800f22e:	18e4      	addcc	r4, r4, r3
 800f230:	e7f2      	b.n	800f218 <floor+0xd0>
 800f232:	2500      	movs	r5, #0
 800f234:	462c      	mov	r4, r5
 800f236:	e7aa      	b.n	800f18e <floor+0x46>
 800f238:	8800759c 	.word	0x8800759c
 800f23c:	7e37e43c 	.word	0x7e37e43c
 800f240:	bff00000 	.word	0xbff00000
 800f244:	000fffff 	.word	0x000fffff

0800f248 <scalbn>:
 800f248:	b570      	push	{r4, r5, r6, lr}
 800f24a:	ec55 4b10 	vmov	r4, r5, d0
 800f24e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f252:	4606      	mov	r6, r0
 800f254:	462b      	mov	r3, r5
 800f256:	b99a      	cbnz	r2, 800f280 <scalbn+0x38>
 800f258:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f25c:	4323      	orrs	r3, r4
 800f25e:	d036      	beq.n	800f2ce <scalbn+0x86>
 800f260:	4b39      	ldr	r3, [pc, #228]	; (800f348 <scalbn+0x100>)
 800f262:	4629      	mov	r1, r5
 800f264:	ee10 0a10 	vmov	r0, s0
 800f268:	2200      	movs	r2, #0
 800f26a:	f7f1 f969 	bl	8000540 <__aeabi_dmul>
 800f26e:	4b37      	ldr	r3, [pc, #220]	; (800f34c <scalbn+0x104>)
 800f270:	429e      	cmp	r6, r3
 800f272:	4604      	mov	r4, r0
 800f274:	460d      	mov	r5, r1
 800f276:	da10      	bge.n	800f29a <scalbn+0x52>
 800f278:	a32b      	add	r3, pc, #172	; (adr r3, 800f328 <scalbn+0xe0>)
 800f27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27e:	e03a      	b.n	800f2f6 <scalbn+0xae>
 800f280:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f284:	428a      	cmp	r2, r1
 800f286:	d10c      	bne.n	800f2a2 <scalbn+0x5a>
 800f288:	ee10 2a10 	vmov	r2, s0
 800f28c:	4620      	mov	r0, r4
 800f28e:	4629      	mov	r1, r5
 800f290:	f7f0 ffa0 	bl	80001d4 <__adddf3>
 800f294:	4604      	mov	r4, r0
 800f296:	460d      	mov	r5, r1
 800f298:	e019      	b.n	800f2ce <scalbn+0x86>
 800f29a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f29e:	460b      	mov	r3, r1
 800f2a0:	3a36      	subs	r2, #54	; 0x36
 800f2a2:	4432      	add	r2, r6
 800f2a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f2a8:	428a      	cmp	r2, r1
 800f2aa:	dd08      	ble.n	800f2be <scalbn+0x76>
 800f2ac:	2d00      	cmp	r5, #0
 800f2ae:	a120      	add	r1, pc, #128	; (adr r1, 800f330 <scalbn+0xe8>)
 800f2b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2b4:	da1c      	bge.n	800f2f0 <scalbn+0xa8>
 800f2b6:	a120      	add	r1, pc, #128	; (adr r1, 800f338 <scalbn+0xf0>)
 800f2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2bc:	e018      	b.n	800f2f0 <scalbn+0xa8>
 800f2be:	2a00      	cmp	r2, #0
 800f2c0:	dd08      	ble.n	800f2d4 <scalbn+0x8c>
 800f2c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f2c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f2ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f2ce:	ec45 4b10 	vmov	d0, r4, r5
 800f2d2:	bd70      	pop	{r4, r5, r6, pc}
 800f2d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f2d8:	da19      	bge.n	800f30e <scalbn+0xc6>
 800f2da:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f2de:	429e      	cmp	r6, r3
 800f2e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f2e4:	dd0a      	ble.n	800f2fc <scalbn+0xb4>
 800f2e6:	a112      	add	r1, pc, #72	; (adr r1, 800f330 <scalbn+0xe8>)
 800f2e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d1e2      	bne.n	800f2b6 <scalbn+0x6e>
 800f2f0:	a30f      	add	r3, pc, #60	; (adr r3, 800f330 <scalbn+0xe8>)
 800f2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f6:	f7f1 f923 	bl	8000540 <__aeabi_dmul>
 800f2fa:	e7cb      	b.n	800f294 <scalbn+0x4c>
 800f2fc:	a10a      	add	r1, pc, #40	; (adr r1, 800f328 <scalbn+0xe0>)
 800f2fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d0b8      	beq.n	800f278 <scalbn+0x30>
 800f306:	a10e      	add	r1, pc, #56	; (adr r1, 800f340 <scalbn+0xf8>)
 800f308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f30c:	e7b4      	b.n	800f278 <scalbn+0x30>
 800f30e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f312:	3236      	adds	r2, #54	; 0x36
 800f314:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f318:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f31c:	4620      	mov	r0, r4
 800f31e:	4b0c      	ldr	r3, [pc, #48]	; (800f350 <scalbn+0x108>)
 800f320:	2200      	movs	r2, #0
 800f322:	e7e8      	b.n	800f2f6 <scalbn+0xae>
 800f324:	f3af 8000 	nop.w
 800f328:	c2f8f359 	.word	0xc2f8f359
 800f32c:	01a56e1f 	.word	0x01a56e1f
 800f330:	8800759c 	.word	0x8800759c
 800f334:	7e37e43c 	.word	0x7e37e43c
 800f338:	8800759c 	.word	0x8800759c
 800f33c:	fe37e43c 	.word	0xfe37e43c
 800f340:	c2f8f359 	.word	0xc2f8f359
 800f344:	81a56e1f 	.word	0x81a56e1f
 800f348:	43500000 	.word	0x43500000
 800f34c:	ffff3cb0 	.word	0xffff3cb0
 800f350:	3c900000 	.word	0x3c900000

0800f354 <fabsf>:
 800f354:	ee10 3a10 	vmov	r3, s0
 800f358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f35c:	ee00 3a10 	vmov	s0, r3
 800f360:	4770      	bx	lr
	...

0800f364 <floorf>:
 800f364:	ee10 3a10 	vmov	r3, s0
 800f368:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f36c:	3a7f      	subs	r2, #127	; 0x7f
 800f36e:	2a16      	cmp	r2, #22
 800f370:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f374:	dc2a      	bgt.n	800f3cc <floorf+0x68>
 800f376:	2a00      	cmp	r2, #0
 800f378:	da11      	bge.n	800f39e <floorf+0x3a>
 800f37a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800f3dc <floorf+0x78>
 800f37e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f382:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f38a:	dd05      	ble.n	800f398 <floorf+0x34>
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	da23      	bge.n	800f3d8 <floorf+0x74>
 800f390:	4a13      	ldr	r2, [pc, #76]	; (800f3e0 <floorf+0x7c>)
 800f392:	2900      	cmp	r1, #0
 800f394:	bf18      	it	ne
 800f396:	4613      	movne	r3, r2
 800f398:	ee00 3a10 	vmov	s0, r3
 800f39c:	4770      	bx	lr
 800f39e:	4911      	ldr	r1, [pc, #68]	; (800f3e4 <floorf+0x80>)
 800f3a0:	4111      	asrs	r1, r2
 800f3a2:	420b      	tst	r3, r1
 800f3a4:	d0fa      	beq.n	800f39c <floorf+0x38>
 800f3a6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f3dc <floorf+0x78>
 800f3aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f3ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b6:	ddef      	ble.n	800f398 <floorf+0x34>
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	bfbe      	ittt	lt
 800f3bc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800f3c0:	fa40 f202 	asrlt.w	r2, r0, r2
 800f3c4:	189b      	addlt	r3, r3, r2
 800f3c6:	ea23 0301 	bic.w	r3, r3, r1
 800f3ca:	e7e5      	b.n	800f398 <floorf+0x34>
 800f3cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f3d0:	d3e4      	bcc.n	800f39c <floorf+0x38>
 800f3d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f3d6:	4770      	bx	lr
 800f3d8:	2300      	movs	r3, #0
 800f3da:	e7dd      	b.n	800f398 <floorf+0x34>
 800f3dc:	7149f2ca 	.word	0x7149f2ca
 800f3e0:	bf800000 	.word	0xbf800000
 800f3e4:	007fffff 	.word	0x007fffff

0800f3e8 <scalbnf>:
 800f3e8:	ee10 3a10 	vmov	r3, s0
 800f3ec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f3f0:	d025      	beq.n	800f43e <scalbnf+0x56>
 800f3f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f3f6:	d302      	bcc.n	800f3fe <scalbnf+0x16>
 800f3f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f3fc:	4770      	bx	lr
 800f3fe:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800f402:	d122      	bne.n	800f44a <scalbnf+0x62>
 800f404:	4b2a      	ldr	r3, [pc, #168]	; (800f4b0 <scalbnf+0xc8>)
 800f406:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f4b4 <scalbnf+0xcc>
 800f40a:	4298      	cmp	r0, r3
 800f40c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f410:	db16      	blt.n	800f440 <scalbnf+0x58>
 800f412:	ee10 3a10 	vmov	r3, s0
 800f416:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f41a:	3a19      	subs	r2, #25
 800f41c:	4402      	add	r2, r0
 800f41e:	2afe      	cmp	r2, #254	; 0xfe
 800f420:	dd15      	ble.n	800f44e <scalbnf+0x66>
 800f422:	ee10 3a10 	vmov	r3, s0
 800f426:	eddf 7a24 	vldr	s15, [pc, #144]	; 800f4b8 <scalbnf+0xd0>
 800f42a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800f4bc <scalbnf+0xd4>
 800f42e:	2b00      	cmp	r3, #0
 800f430:	eeb0 7a67 	vmov.f32	s14, s15
 800f434:	bfb8      	it	lt
 800f436:	eef0 7a66 	vmovlt.f32	s15, s13
 800f43a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800f43e:	4770      	bx	lr
 800f440:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f4c0 <scalbnf+0xd8>
 800f444:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f448:	4770      	bx	lr
 800f44a:	0dd2      	lsrs	r2, r2, #23
 800f44c:	e7e6      	b.n	800f41c <scalbnf+0x34>
 800f44e:	2a00      	cmp	r2, #0
 800f450:	dd06      	ble.n	800f460 <scalbnf+0x78>
 800f452:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f456:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f45a:	ee00 3a10 	vmov	s0, r3
 800f45e:	4770      	bx	lr
 800f460:	f112 0f16 	cmn.w	r2, #22
 800f464:	da1a      	bge.n	800f49c <scalbnf+0xb4>
 800f466:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f46a:	4298      	cmp	r0, r3
 800f46c:	ee10 3a10 	vmov	r3, s0
 800f470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f474:	dd0a      	ble.n	800f48c <scalbnf+0xa4>
 800f476:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800f4b8 <scalbnf+0xd0>
 800f47a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800f4bc <scalbnf+0xd4>
 800f47e:	eef0 7a40 	vmov.f32	s15, s0
 800f482:	2b00      	cmp	r3, #0
 800f484:	bf18      	it	ne
 800f486:	eeb0 0a47 	vmovne.f32	s0, s14
 800f48a:	e7db      	b.n	800f444 <scalbnf+0x5c>
 800f48c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800f4c0 <scalbnf+0xd8>
 800f490:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800f4c4 <scalbnf+0xdc>
 800f494:	eef0 7a40 	vmov.f32	s15, s0
 800f498:	2b00      	cmp	r3, #0
 800f49a:	e7f3      	b.n	800f484 <scalbnf+0x9c>
 800f49c:	3219      	adds	r2, #25
 800f49e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4a2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f4a6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f4c8 <scalbnf+0xe0>
 800f4aa:	ee07 3a10 	vmov	s14, r3
 800f4ae:	e7c4      	b.n	800f43a <scalbnf+0x52>
 800f4b0:	ffff3cb0 	.word	0xffff3cb0
 800f4b4:	4c000000 	.word	0x4c000000
 800f4b8:	7149f2ca 	.word	0x7149f2ca
 800f4bc:	f149f2ca 	.word	0xf149f2ca
 800f4c0:	0da24260 	.word	0x0da24260
 800f4c4:	8da24260 	.word	0x8da24260
 800f4c8:	33000000 	.word	0x33000000

0800f4cc <abort>:
 800f4cc:	b508      	push	{r3, lr}
 800f4ce:	2006      	movs	r0, #6
 800f4d0:	f000 f950 	bl	800f774 <raise>
 800f4d4:	2001      	movs	r0, #1
 800f4d6:	f7f4 ff17 	bl	8004308 <_exit>
	...

0800f4dc <__errno>:
 800f4dc:	4b01      	ldr	r3, [pc, #4]	; (800f4e4 <__errno+0x8>)
 800f4de:	6818      	ldr	r0, [r3, #0]
 800f4e0:	4770      	bx	lr
 800f4e2:	bf00      	nop
 800f4e4:	20000180 	.word	0x20000180

0800f4e8 <__libc_init_array>:
 800f4e8:	b570      	push	{r4, r5, r6, lr}
 800f4ea:	4d0d      	ldr	r5, [pc, #52]	; (800f520 <__libc_init_array+0x38>)
 800f4ec:	4c0d      	ldr	r4, [pc, #52]	; (800f524 <__libc_init_array+0x3c>)
 800f4ee:	1b64      	subs	r4, r4, r5
 800f4f0:	10a4      	asrs	r4, r4, #2
 800f4f2:	2600      	movs	r6, #0
 800f4f4:	42a6      	cmp	r6, r4
 800f4f6:	d109      	bne.n	800f50c <__libc_init_array+0x24>
 800f4f8:	4d0b      	ldr	r5, [pc, #44]	; (800f528 <__libc_init_array+0x40>)
 800f4fa:	4c0c      	ldr	r4, [pc, #48]	; (800f52c <__libc_init_array+0x44>)
 800f4fc:	f000 f964 	bl	800f7c8 <_init>
 800f500:	1b64      	subs	r4, r4, r5
 800f502:	10a4      	asrs	r4, r4, #2
 800f504:	2600      	movs	r6, #0
 800f506:	42a6      	cmp	r6, r4
 800f508:	d105      	bne.n	800f516 <__libc_init_array+0x2e>
 800f50a:	bd70      	pop	{r4, r5, r6, pc}
 800f50c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f510:	4798      	blx	r3
 800f512:	3601      	adds	r6, #1
 800f514:	e7ee      	b.n	800f4f4 <__libc_init_array+0xc>
 800f516:	f855 3b04 	ldr.w	r3, [r5], #4
 800f51a:	4798      	blx	r3
 800f51c:	3601      	adds	r6, #1
 800f51e:	e7f2      	b.n	800f506 <__libc_init_array+0x1e>
 800f520:	0800fe48 	.word	0x0800fe48
 800f524:	0800fe48 	.word	0x0800fe48
 800f528:	0800fe48 	.word	0x0800fe48
 800f52c:	0800fe54 	.word	0x0800fe54

0800f530 <malloc>:
 800f530:	4b02      	ldr	r3, [pc, #8]	; (800f53c <malloc+0xc>)
 800f532:	4601      	mov	r1, r0
 800f534:	6818      	ldr	r0, [r3, #0]
 800f536:	f000 b88b 	b.w	800f650 <_malloc_r>
 800f53a:	bf00      	nop
 800f53c:	20000180 	.word	0x20000180

0800f540 <free>:
 800f540:	4b02      	ldr	r3, [pc, #8]	; (800f54c <free+0xc>)
 800f542:	4601      	mov	r1, r0
 800f544:	6818      	ldr	r0, [r3, #0]
 800f546:	f000 b833 	b.w	800f5b0 <_free_r>
 800f54a:	bf00      	nop
 800f54c:	20000180 	.word	0x20000180

0800f550 <memcpy>:
 800f550:	440a      	add	r2, r1
 800f552:	4291      	cmp	r1, r2
 800f554:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f558:	d100      	bne.n	800f55c <memcpy+0xc>
 800f55a:	4770      	bx	lr
 800f55c:	b510      	push	{r4, lr}
 800f55e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f562:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f566:	4291      	cmp	r1, r2
 800f568:	d1f9      	bne.n	800f55e <memcpy+0xe>
 800f56a:	bd10      	pop	{r4, pc}

0800f56c <memmove>:
 800f56c:	4288      	cmp	r0, r1
 800f56e:	b510      	push	{r4, lr}
 800f570:	eb01 0402 	add.w	r4, r1, r2
 800f574:	d902      	bls.n	800f57c <memmove+0x10>
 800f576:	4284      	cmp	r4, r0
 800f578:	4623      	mov	r3, r4
 800f57a:	d807      	bhi.n	800f58c <memmove+0x20>
 800f57c:	1e43      	subs	r3, r0, #1
 800f57e:	42a1      	cmp	r1, r4
 800f580:	d008      	beq.n	800f594 <memmove+0x28>
 800f582:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f58a:	e7f8      	b.n	800f57e <memmove+0x12>
 800f58c:	4402      	add	r2, r0
 800f58e:	4601      	mov	r1, r0
 800f590:	428a      	cmp	r2, r1
 800f592:	d100      	bne.n	800f596 <memmove+0x2a>
 800f594:	bd10      	pop	{r4, pc}
 800f596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f59a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f59e:	e7f7      	b.n	800f590 <memmove+0x24>

0800f5a0 <memset>:
 800f5a0:	4402      	add	r2, r0
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d100      	bne.n	800f5aa <memset+0xa>
 800f5a8:	4770      	bx	lr
 800f5aa:	f803 1b01 	strb.w	r1, [r3], #1
 800f5ae:	e7f9      	b.n	800f5a4 <memset+0x4>

0800f5b0 <_free_r>:
 800f5b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5b2:	2900      	cmp	r1, #0
 800f5b4:	d048      	beq.n	800f648 <_free_r+0x98>
 800f5b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5ba:	9001      	str	r0, [sp, #4]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	f1a1 0404 	sub.w	r4, r1, #4
 800f5c2:	bfb8      	it	lt
 800f5c4:	18e4      	addlt	r4, r4, r3
 800f5c6:	f000 f8f1 	bl	800f7ac <__malloc_lock>
 800f5ca:	4a20      	ldr	r2, [pc, #128]	; (800f64c <_free_r+0x9c>)
 800f5cc:	9801      	ldr	r0, [sp, #4]
 800f5ce:	6813      	ldr	r3, [r2, #0]
 800f5d0:	4615      	mov	r5, r2
 800f5d2:	b933      	cbnz	r3, 800f5e2 <_free_r+0x32>
 800f5d4:	6063      	str	r3, [r4, #4]
 800f5d6:	6014      	str	r4, [r2, #0]
 800f5d8:	b003      	add	sp, #12
 800f5da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5de:	f000 b8eb 	b.w	800f7b8 <__malloc_unlock>
 800f5e2:	42a3      	cmp	r3, r4
 800f5e4:	d90b      	bls.n	800f5fe <_free_r+0x4e>
 800f5e6:	6821      	ldr	r1, [r4, #0]
 800f5e8:	1862      	adds	r2, r4, r1
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	bf04      	itt	eq
 800f5ee:	681a      	ldreq	r2, [r3, #0]
 800f5f0:	685b      	ldreq	r3, [r3, #4]
 800f5f2:	6063      	str	r3, [r4, #4]
 800f5f4:	bf04      	itt	eq
 800f5f6:	1852      	addeq	r2, r2, r1
 800f5f8:	6022      	streq	r2, [r4, #0]
 800f5fa:	602c      	str	r4, [r5, #0]
 800f5fc:	e7ec      	b.n	800f5d8 <_free_r+0x28>
 800f5fe:	461a      	mov	r2, r3
 800f600:	685b      	ldr	r3, [r3, #4]
 800f602:	b10b      	cbz	r3, 800f608 <_free_r+0x58>
 800f604:	42a3      	cmp	r3, r4
 800f606:	d9fa      	bls.n	800f5fe <_free_r+0x4e>
 800f608:	6811      	ldr	r1, [r2, #0]
 800f60a:	1855      	adds	r5, r2, r1
 800f60c:	42a5      	cmp	r5, r4
 800f60e:	d10b      	bne.n	800f628 <_free_r+0x78>
 800f610:	6824      	ldr	r4, [r4, #0]
 800f612:	4421      	add	r1, r4
 800f614:	1854      	adds	r4, r2, r1
 800f616:	42a3      	cmp	r3, r4
 800f618:	6011      	str	r1, [r2, #0]
 800f61a:	d1dd      	bne.n	800f5d8 <_free_r+0x28>
 800f61c:	681c      	ldr	r4, [r3, #0]
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	6053      	str	r3, [r2, #4]
 800f622:	4421      	add	r1, r4
 800f624:	6011      	str	r1, [r2, #0]
 800f626:	e7d7      	b.n	800f5d8 <_free_r+0x28>
 800f628:	d902      	bls.n	800f630 <_free_r+0x80>
 800f62a:	230c      	movs	r3, #12
 800f62c:	6003      	str	r3, [r0, #0]
 800f62e:	e7d3      	b.n	800f5d8 <_free_r+0x28>
 800f630:	6825      	ldr	r5, [r4, #0]
 800f632:	1961      	adds	r1, r4, r5
 800f634:	428b      	cmp	r3, r1
 800f636:	bf04      	itt	eq
 800f638:	6819      	ldreq	r1, [r3, #0]
 800f63a:	685b      	ldreq	r3, [r3, #4]
 800f63c:	6063      	str	r3, [r4, #4]
 800f63e:	bf04      	itt	eq
 800f640:	1949      	addeq	r1, r1, r5
 800f642:	6021      	streq	r1, [r4, #0]
 800f644:	6054      	str	r4, [r2, #4]
 800f646:	e7c7      	b.n	800f5d8 <_free_r+0x28>
 800f648:	b003      	add	sp, #12
 800f64a:	bd30      	pop	{r4, r5, pc}
 800f64c:	20000b08 	.word	0x20000b08

0800f650 <_malloc_r>:
 800f650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f652:	1ccd      	adds	r5, r1, #3
 800f654:	f025 0503 	bic.w	r5, r5, #3
 800f658:	3508      	adds	r5, #8
 800f65a:	2d0c      	cmp	r5, #12
 800f65c:	bf38      	it	cc
 800f65e:	250c      	movcc	r5, #12
 800f660:	2d00      	cmp	r5, #0
 800f662:	4606      	mov	r6, r0
 800f664:	db01      	blt.n	800f66a <_malloc_r+0x1a>
 800f666:	42a9      	cmp	r1, r5
 800f668:	d903      	bls.n	800f672 <_malloc_r+0x22>
 800f66a:	230c      	movs	r3, #12
 800f66c:	6033      	str	r3, [r6, #0]
 800f66e:	2000      	movs	r0, #0
 800f670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f672:	f000 f89b 	bl	800f7ac <__malloc_lock>
 800f676:	4921      	ldr	r1, [pc, #132]	; (800f6fc <_malloc_r+0xac>)
 800f678:	680a      	ldr	r2, [r1, #0]
 800f67a:	4614      	mov	r4, r2
 800f67c:	b99c      	cbnz	r4, 800f6a6 <_malloc_r+0x56>
 800f67e:	4f20      	ldr	r7, [pc, #128]	; (800f700 <_malloc_r+0xb0>)
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	b923      	cbnz	r3, 800f68e <_malloc_r+0x3e>
 800f684:	4621      	mov	r1, r4
 800f686:	4630      	mov	r0, r6
 800f688:	f000 f83c 	bl	800f704 <_sbrk_r>
 800f68c:	6038      	str	r0, [r7, #0]
 800f68e:	4629      	mov	r1, r5
 800f690:	4630      	mov	r0, r6
 800f692:	f000 f837 	bl	800f704 <_sbrk_r>
 800f696:	1c43      	adds	r3, r0, #1
 800f698:	d123      	bne.n	800f6e2 <_malloc_r+0x92>
 800f69a:	230c      	movs	r3, #12
 800f69c:	6033      	str	r3, [r6, #0]
 800f69e:	4630      	mov	r0, r6
 800f6a0:	f000 f88a 	bl	800f7b8 <__malloc_unlock>
 800f6a4:	e7e3      	b.n	800f66e <_malloc_r+0x1e>
 800f6a6:	6823      	ldr	r3, [r4, #0]
 800f6a8:	1b5b      	subs	r3, r3, r5
 800f6aa:	d417      	bmi.n	800f6dc <_malloc_r+0x8c>
 800f6ac:	2b0b      	cmp	r3, #11
 800f6ae:	d903      	bls.n	800f6b8 <_malloc_r+0x68>
 800f6b0:	6023      	str	r3, [r4, #0]
 800f6b2:	441c      	add	r4, r3
 800f6b4:	6025      	str	r5, [r4, #0]
 800f6b6:	e004      	b.n	800f6c2 <_malloc_r+0x72>
 800f6b8:	6863      	ldr	r3, [r4, #4]
 800f6ba:	42a2      	cmp	r2, r4
 800f6bc:	bf0c      	ite	eq
 800f6be:	600b      	streq	r3, [r1, #0]
 800f6c0:	6053      	strne	r3, [r2, #4]
 800f6c2:	4630      	mov	r0, r6
 800f6c4:	f000 f878 	bl	800f7b8 <__malloc_unlock>
 800f6c8:	f104 000b 	add.w	r0, r4, #11
 800f6cc:	1d23      	adds	r3, r4, #4
 800f6ce:	f020 0007 	bic.w	r0, r0, #7
 800f6d2:	1ac2      	subs	r2, r0, r3
 800f6d4:	d0cc      	beq.n	800f670 <_malloc_r+0x20>
 800f6d6:	1a1b      	subs	r3, r3, r0
 800f6d8:	50a3      	str	r3, [r4, r2]
 800f6da:	e7c9      	b.n	800f670 <_malloc_r+0x20>
 800f6dc:	4622      	mov	r2, r4
 800f6de:	6864      	ldr	r4, [r4, #4]
 800f6e0:	e7cc      	b.n	800f67c <_malloc_r+0x2c>
 800f6e2:	1cc4      	adds	r4, r0, #3
 800f6e4:	f024 0403 	bic.w	r4, r4, #3
 800f6e8:	42a0      	cmp	r0, r4
 800f6ea:	d0e3      	beq.n	800f6b4 <_malloc_r+0x64>
 800f6ec:	1a21      	subs	r1, r4, r0
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	f000 f808 	bl	800f704 <_sbrk_r>
 800f6f4:	3001      	adds	r0, #1
 800f6f6:	d1dd      	bne.n	800f6b4 <_malloc_r+0x64>
 800f6f8:	e7cf      	b.n	800f69a <_malloc_r+0x4a>
 800f6fa:	bf00      	nop
 800f6fc:	20000b08 	.word	0x20000b08
 800f700:	20000b0c 	.word	0x20000b0c

0800f704 <_sbrk_r>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	4d06      	ldr	r5, [pc, #24]	; (800f720 <_sbrk_r+0x1c>)
 800f708:	2300      	movs	r3, #0
 800f70a:	4604      	mov	r4, r0
 800f70c:	4608      	mov	r0, r1
 800f70e:	602b      	str	r3, [r5, #0]
 800f710:	f7f4 fe04 	bl	800431c <_sbrk>
 800f714:	1c43      	adds	r3, r0, #1
 800f716:	d102      	bne.n	800f71e <_sbrk_r+0x1a>
 800f718:	682b      	ldr	r3, [r5, #0]
 800f71a:	b103      	cbz	r3, 800f71e <_sbrk_r+0x1a>
 800f71c:	6023      	str	r3, [r4, #0]
 800f71e:	bd38      	pop	{r3, r4, r5, pc}
 800f720:	200023ec 	.word	0x200023ec

0800f724 <_raise_r>:
 800f724:	291f      	cmp	r1, #31
 800f726:	b538      	push	{r3, r4, r5, lr}
 800f728:	4604      	mov	r4, r0
 800f72a:	460d      	mov	r5, r1
 800f72c:	d904      	bls.n	800f738 <_raise_r+0x14>
 800f72e:	2316      	movs	r3, #22
 800f730:	6003      	str	r3, [r0, #0]
 800f732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f736:	bd38      	pop	{r3, r4, r5, pc}
 800f738:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f73a:	b112      	cbz	r2, 800f742 <_raise_r+0x1e>
 800f73c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f740:	b94b      	cbnz	r3, 800f756 <_raise_r+0x32>
 800f742:	4620      	mov	r0, r4
 800f744:	f000 f830 	bl	800f7a8 <_getpid_r>
 800f748:	462a      	mov	r2, r5
 800f74a:	4601      	mov	r1, r0
 800f74c:	4620      	mov	r0, r4
 800f74e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f752:	f000 b817 	b.w	800f784 <_kill_r>
 800f756:	2b01      	cmp	r3, #1
 800f758:	d00a      	beq.n	800f770 <_raise_r+0x4c>
 800f75a:	1c59      	adds	r1, r3, #1
 800f75c:	d103      	bne.n	800f766 <_raise_r+0x42>
 800f75e:	2316      	movs	r3, #22
 800f760:	6003      	str	r3, [r0, #0]
 800f762:	2001      	movs	r0, #1
 800f764:	e7e7      	b.n	800f736 <_raise_r+0x12>
 800f766:	2400      	movs	r4, #0
 800f768:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f76c:	4628      	mov	r0, r5
 800f76e:	4798      	blx	r3
 800f770:	2000      	movs	r0, #0
 800f772:	e7e0      	b.n	800f736 <_raise_r+0x12>

0800f774 <raise>:
 800f774:	4b02      	ldr	r3, [pc, #8]	; (800f780 <raise+0xc>)
 800f776:	4601      	mov	r1, r0
 800f778:	6818      	ldr	r0, [r3, #0]
 800f77a:	f7ff bfd3 	b.w	800f724 <_raise_r>
 800f77e:	bf00      	nop
 800f780:	20000180 	.word	0x20000180

0800f784 <_kill_r>:
 800f784:	b538      	push	{r3, r4, r5, lr}
 800f786:	4d07      	ldr	r5, [pc, #28]	; (800f7a4 <_kill_r+0x20>)
 800f788:	2300      	movs	r3, #0
 800f78a:	4604      	mov	r4, r0
 800f78c:	4608      	mov	r0, r1
 800f78e:	4611      	mov	r1, r2
 800f790:	602b      	str	r3, [r5, #0]
 800f792:	f7f4 fda9 	bl	80042e8 <_kill>
 800f796:	1c43      	adds	r3, r0, #1
 800f798:	d102      	bne.n	800f7a0 <_kill_r+0x1c>
 800f79a:	682b      	ldr	r3, [r5, #0]
 800f79c:	b103      	cbz	r3, 800f7a0 <_kill_r+0x1c>
 800f79e:	6023      	str	r3, [r4, #0]
 800f7a0:	bd38      	pop	{r3, r4, r5, pc}
 800f7a2:	bf00      	nop
 800f7a4:	200023ec 	.word	0x200023ec

0800f7a8 <_getpid_r>:
 800f7a8:	f7f4 bd96 	b.w	80042d8 <_getpid>

0800f7ac <__malloc_lock>:
 800f7ac:	4801      	ldr	r0, [pc, #4]	; (800f7b4 <__malloc_lock+0x8>)
 800f7ae:	f000 b809 	b.w	800f7c4 <__retarget_lock_acquire_recursive>
 800f7b2:	bf00      	nop
 800f7b4:	200023f4 	.word	0x200023f4

0800f7b8 <__malloc_unlock>:
 800f7b8:	4801      	ldr	r0, [pc, #4]	; (800f7c0 <__malloc_unlock+0x8>)
 800f7ba:	f000 b804 	b.w	800f7c6 <__retarget_lock_release_recursive>
 800f7be:	bf00      	nop
 800f7c0:	200023f4 	.word	0x200023f4

0800f7c4 <__retarget_lock_acquire_recursive>:
 800f7c4:	4770      	bx	lr

0800f7c6 <__retarget_lock_release_recursive>:
 800f7c6:	4770      	bx	lr

0800f7c8 <_init>:
 800f7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ca:	bf00      	nop
 800f7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ce:	bc08      	pop	{r3}
 800f7d0:	469e      	mov	lr, r3
 800f7d2:	4770      	bx	lr

0800f7d4 <_fini>:
 800f7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d6:	bf00      	nop
 800f7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7da:	bc08      	pop	{r3}
 800f7dc:	469e      	mov	lr, r3
 800f7de:	4770      	bx	lr
